pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = c_longdouble;
pub const int_least8_t = i8;
pub const int_least16_t = i16;
pub const int_least32_t = i32;
pub const int_least64_t = i64;
pub const uint_least8_t = u8;
pub const uint_least16_t = u16;
pub const uint_least32_t = u32;
pub const uint_least64_t = u64;
pub const int_fast8_t = i8;
pub const int_fast16_t = i16;
pub const int_fast32_t = i32;
pub const int_fast64_t = i64;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = u16;
pub const uint_fast32_t = u32;
pub const uint_fast64_t = u64;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_longlong;
pub const __uint64_t = c_ulonglong;
pub const __darwin_intptr_t = c_long;
pub const __darwin_natural_t = c_uint;
pub const __darwin_ct_rune_t = c_int;
pub const __mbstate_t = extern union {
    __mbstate8: [128]u8,
    _mbstateL: c_longlong,
};
pub const __darwin_mbstate_t = __mbstate_t;
pub const __darwin_ptrdiff_t = c_long;
pub const __darwin_size_t = c_ulong;
pub const __builtin_va_list = [*c]u8;
pub const __darwin_va_list = __builtin_va_list;
pub const __darwin_wchar_t = c_int;
pub const __darwin_rune_t = __darwin_wchar_t;
pub const __darwin_wint_t = c_int;
pub const __darwin_clock_t = c_ulong;
pub const __darwin_socklen_t = __uint32_t;
pub const __darwin_ssize_t = c_long;
pub const __darwin_time_t = c_long;
pub const __darwin_blkcnt_t = __int64_t;
pub const __darwin_blksize_t = __int32_t;
pub const __darwin_dev_t = __int32_t;
pub const __darwin_fsblkcnt_t = c_uint;
pub const __darwin_fsfilcnt_t = c_uint;
pub const __darwin_gid_t = __uint32_t;
pub const __darwin_id_t = __uint32_t;
pub const __darwin_ino64_t = __uint64_t;
pub const __darwin_ino_t = __darwin_ino64_t;
pub const __darwin_mach_port_name_t = __darwin_natural_t;
pub const __darwin_mach_port_t = __darwin_mach_port_name_t;
pub const __darwin_mode_t = __uint16_t;
pub const __darwin_off_t = __int64_t;
pub const __darwin_pid_t = __int32_t;
pub const __darwin_sigset_t = __uint32_t;
pub const __darwin_suseconds_t = __int32_t;
pub const __darwin_uid_t = __uint32_t;
pub const __darwin_useconds_t = __uint32_t;
pub const __darwin_uuid_t = [16]u8;
pub const __darwin_uuid_string_t = [37]u8;
pub const struct___darwin_pthread_handler_rec = extern struct {
    __routine: ?*const fn (?*anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) void),
    __arg: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    __next: [*c]struct___darwin_pthread_handler_rec = @import("std").mem.zeroes([*c]struct___darwin_pthread_handler_rec),
};
pub const struct__opaque_pthread_attr_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [56]u8 = @import("std").mem.zeroes([56]u8),
};
pub const struct__opaque_pthread_cond_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [40]u8 = @import("std").mem.zeroes([40]u8),
};
pub const struct__opaque_pthread_condattr_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const struct__opaque_pthread_mutex_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [56]u8 = @import("std").mem.zeroes([56]u8),
};
pub const struct__opaque_pthread_mutexattr_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const struct__opaque_pthread_once_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const struct__opaque_pthread_rwlock_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [192]u8 = @import("std").mem.zeroes([192]u8),
};
pub const struct__opaque_pthread_rwlockattr_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __opaque: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const struct__opaque_pthread_t = extern struct {
    __sig: c_long = @import("std").mem.zeroes(c_long),
    __cleanup_stack: [*c]struct___darwin_pthread_handler_rec = @import("std").mem.zeroes([*c]struct___darwin_pthread_handler_rec),
    __opaque: [8176]u8 = @import("std").mem.zeroes([8176]u8),
};
pub const __darwin_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const __darwin_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const __darwin_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const __darwin_pthread_key_t = c_ulong;
pub const __darwin_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const __darwin_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const __darwin_pthread_once_t = struct__opaque_pthread_once_t;
pub const __darwin_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const __darwin_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const __darwin_pthread_t = [*c]struct__opaque_pthread_t;
pub const u_int8_t = u8;
pub const u_int16_t = c_ushort;
pub const u_int32_t = c_uint;
pub const u_int64_t = c_ulonglong;
pub const register_t = i64;
pub const user_addr_t = u_int64_t;
pub const user_size_t = u_int64_t;
pub const user_ssize_t = i64;
pub const user_long_t = i64;
pub const user_ulong_t = u_int64_t;
pub const user_time_t = i64;
pub const user_off_t = i64;
pub const syscall_arg_t = u_int64_t;
pub const intmax_t = c_long;
pub const uintmax_t = c_ulong;
pub extern fn _Block_copy(aBlock: ?*const anyopaque) ?*anyopaque;
pub extern fn _Block_release(aBlock: ?*const anyopaque) void;
pub extern fn _Block_object_assign(?*anyopaque, ?*const anyopaque, c_int) void;
pub extern fn _Block_object_dispose(?*const anyopaque, c_int) void;
pub extern var _NSConcreteGlobalBlock: [32]?*anyopaque;
pub extern var _NSConcreteStackBlock: [32]?*anyopaque;
pub fn _OSSwapInt16(arg__data: u16) callconv(.C) u16 {
    var _data = arg__data;
    _ = &_data;
    return @as(u16, @bitCast(@as(c_short, @truncate((@as(c_int, @bitCast(@as(c_uint, _data))) << @intCast(8)) | (@as(c_int, @bitCast(@as(c_uint, _data))) >> @intCast(8))))));
}
pub fn _OSSwapInt32(arg__data: u32) callconv(.C) u32 {
    var _data = arg__data;
    _ = &_data;
    _data = __builtin_bswap32(_data);
    return _data;
}
pub fn _OSSwapInt64(arg__data: u64) callconv(.C) u64 {
    var _data = arg__data;
    _ = &_data;
    return __builtin_bswap64(_data);
}
pub const struct__OSUnalignedU16 = extern struct {
    __val: u16 align(1) = @import("std").mem.zeroes(u16),
};
pub const struct__OSUnalignedU32 = extern struct {
    __val: u32 align(1) = @import("std").mem.zeroes(u32),
};
pub const struct__OSUnalignedU64 = extern struct {
    __val: u64 align(1) = @import("std").mem.zeroes(u64),
};
pub fn OSReadSwapInt16(arg__base: ?*const volatile anyopaque, arg__offset: usize) callconv(.C) u16 {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    return _OSSwapInt16(@as([*c]struct__OSUnalignedU16, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val);
}
pub fn OSReadSwapInt32(arg__base: ?*const volatile anyopaque, arg__offset: usize) callconv(.C) u32 {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    return _OSSwapInt32(@as([*c]struct__OSUnalignedU32, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val);
}
pub fn OSReadSwapInt64(arg__base: ?*const volatile anyopaque, arg__offset: usize) callconv(.C) u64 {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    return _OSSwapInt64(@as([*c]struct__OSUnalignedU64, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val);
}
pub fn OSWriteSwapInt16(arg__base: ?*volatile anyopaque, arg__offset: usize, arg__data: u16) callconv(.C) void {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    var _data = arg__data;
    _ = &_data;
    @as([*c]struct__OSUnalignedU16, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val = _OSSwapInt16(_data);
}
pub fn OSWriteSwapInt32(arg__base: ?*volatile anyopaque, arg__offset: usize, arg__data: u32) callconv(.C) void {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    var _data = arg__data;
    _ = &_data;
    @as([*c]struct__OSUnalignedU32, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val = _OSSwapInt32(_data);
}
pub fn OSWriteSwapInt64(arg__base: ?*volatile anyopaque, arg__offset: usize, arg__data: u64) callconv(.C) void {
    var _base = arg__base;
    _ = &_base;
    var _offset = arg__offset;
    _ = &_offset;
    var _data = arg__data;
    _ = &_data;
    @as([*c]struct__OSUnalignedU64, @ptrFromInt(@as(usize, @intCast(@intFromPtr(_base))) +% _offset)).*.__val = _OSSwapInt64(_data);
}
pub const u_char = u8;
pub const u_short = c_ushort;
pub const u_int = c_uint;
pub const u_long = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_quad_t = u_int64_t;
pub const quad_t = i64;
pub const qaddr_t = [*c]quad_t;
pub const caddr_t = [*c]u8;
pub const daddr_t = i32;
pub const dev_t = __darwin_dev_t;
pub const fixpt_t = u_int32_t;
pub const blkcnt_t = __darwin_blkcnt_t;
pub const blksize_t = __darwin_blksize_t;
pub const gid_t = __darwin_gid_t;
pub const in_addr_t = __uint32_t;
pub const in_port_t = __uint16_t;
pub const ino_t = __darwin_ino_t;
pub const ino64_t = __darwin_ino64_t;
pub const key_t = __int32_t;
pub const mode_t = __darwin_mode_t;
pub const nlink_t = __uint16_t;
pub const id_t = __darwin_id_t;
pub const pid_t = __darwin_pid_t;
pub const off_t = __darwin_off_t;
pub const segsz_t = i32;
pub const swblk_t = i32;
pub const uid_t = __darwin_uid_t;
pub const clock_t = __darwin_clock_t;
pub const time_t = __darwin_time_t;
pub const useconds_t = __darwin_useconds_t;
pub const suseconds_t = __darwin_suseconds_t;
pub const rsize_t = __darwin_size_t;
pub const errno_t = c_int;
pub const struct_fd_set = extern struct {
    fds_bits: [32]__int32_t = @import("std").mem.zeroes([32]__int32_t),
};
pub const fd_set = struct_fd_set;
pub extern fn __darwin_check_fd_set_overflow(c_int, ?*const anyopaque, c_int) c_int;
pub inline fn __darwin_check_fd_set(arg__a: c_int, arg__b: ?*const anyopaque) c_int {
    var _a = arg__a;
    _ = &_a;
    var _b = arg__b;
    _ = &_b;
    if (@as(usize, @intCast(@intFromPtr(&__darwin_check_fd_set_overflow))) != @as(usize, @bitCast(@as(c_long, @as(c_int, 0))))) {
        return __darwin_check_fd_set_overflow(_a, _b, @as(c_int, 0));
    } else {
        return 1;
    }
    return 0;
}
pub inline fn __darwin_fd_isset(arg__fd: c_int, arg__p: [*c]const struct_fd_set) c_int {
    var _fd = arg__fd;
    _ = &_fd;
    var _p = arg__p;
    _ = &_p;
    if (__darwin_check_fd_set(_fd, @as(?*const anyopaque, @ptrCast(_p))) != 0) {
        return _p.*.fds_bits[@as(c_ulong, @bitCast(@as(c_long, _fd))) / (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8)))))] & @as(__int32_t, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1)))) << @intCast(@as(c_ulong, @bitCast(@as(c_long, _fd))) % (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8))))))))));
    }
    return 0;
}
pub inline fn __darwin_fd_set(arg__fd: c_int, _p: [*c]struct_fd_set) void {
    var _fd = arg__fd;
    _ = &_fd;
    _ = &_p;
    if (__darwin_check_fd_set(_fd, @as(?*const anyopaque, @ptrCast(_p))) != 0) {
        _ = blk: {
            const ref = &_p.*.fds_bits[@as(c_ulong, @bitCast(@as(c_long, _fd))) / (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8)))))];
            ref.* |= @as(__int32_t, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1)))) << @intCast(@as(c_ulong, @bitCast(@as(c_long, _fd))) % (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8))))))))));
            break :blk ref.*;
        };
    }
}
pub inline fn __darwin_fd_clr(arg__fd: c_int, _p: [*c]struct_fd_set) void {
    var _fd = arg__fd;
    _ = &_fd;
    _ = &_p;
    if (__darwin_check_fd_set(_fd, @as(?*const anyopaque, @ptrCast(_p))) != 0) {
        _ = blk: {
            const ref = &_p.*.fds_bits[@as(c_ulong, @bitCast(@as(c_long, _fd))) / (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8)))))];
            ref.* &= ~@as(__int32_t, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1)))) << @intCast(@as(c_ulong, @bitCast(@as(c_long, _fd))) % (@sizeOf(__int32_t) *% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 8))))))))));
            break :blk ref.*;
        };
    }
}
pub const fd_mask = __int32_t;
pub const pthread_attr_t = __darwin_pthread_attr_t;
pub const pthread_cond_t = __darwin_pthread_cond_t;
pub const pthread_condattr_t = __darwin_pthread_condattr_t;
pub const pthread_mutex_t = __darwin_pthread_mutex_t;
pub const pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub const pthread_once_t = __darwin_pthread_once_t;
pub const pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub const pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub const pthread_t = __darwin_pthread_t;
pub const pthread_key_t = __darwin_pthread_key_t;
pub const fsblkcnt_t = __darwin_fsblkcnt_t;
pub const fsfilcnt_t = __darwin_fsfilcnt_t;
pub const UInt8 = u8;
pub const SInt8 = i8;
pub const UInt16 = c_ushort;
pub const SInt16 = c_short;
pub const UInt32 = c_uint;
pub const SInt32 = c_int;
pub const struct_wide = extern struct {
    lo: UInt32 = @import("std").mem.zeroes(UInt32),
    hi: SInt32 = @import("std").mem.zeroes(SInt32),
};
pub const wide = struct_wide;
pub const struct_UnsignedWide = extern struct {
    lo: UInt32 = @import("std").mem.zeroes(UInt32),
    hi: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const UnsignedWide = struct_UnsignedWide;
pub const SInt64 = c_longlong;
pub const UInt64 = c_ulonglong;
pub const Fixed = SInt32;
pub const FixedPtr = [*c]Fixed;
pub const Fract = SInt32;
pub const FractPtr = [*c]Fract;
pub const UnsignedFixed = UInt32;
pub const UnsignedFixedPtr = [*c]UnsignedFixed;
pub const ShortFixed = c_short;
pub const ShortFixedPtr = [*c]ShortFixed;
pub const Float32 = f32;
pub const Float64 = f64;
pub const struct_Float80 = extern struct {
    exp: SInt16 = @import("std").mem.zeroes(SInt16),
    man: [4]UInt16 = @import("std").mem.zeroes([4]UInt16),
};
pub const Float80 = struct_Float80;
pub const struct_Float96 = extern struct {
    exp: [2]SInt16 = @import("std").mem.zeroes([2]SInt16),
    man: [4]UInt16 = @import("std").mem.zeroes([4]UInt16),
};
pub const Float96 = struct_Float96;
pub const struct_Float32Point = extern struct {
    x: Float32 = @import("std").mem.zeroes(Float32),
    y: Float32 = @import("std").mem.zeroes(Float32),
};
pub const Float32Point = struct_Float32Point;
pub const Ptr = [*c]u8;
pub const Handle = [*c]Ptr;
pub const Size = c_long;
pub const OSErr = SInt16;
pub const OSStatus = SInt32;
pub const LogicalAddress = ?*anyopaque;
pub const ConstLogicalAddress = ?*const anyopaque;
pub const PhysicalAddress = ?*anyopaque;
pub const BytePtr = [*c]UInt8;
pub const ByteCount = c_ulong;
pub const ByteOffset = c_ulong;
pub const Duration = SInt32;
pub const AbsoluteTime = UnsignedWide;
pub const OptionBits = UInt32;
pub const ItemCount = c_ulong;
pub const PBVersion = UInt32;
pub const ScriptCode = SInt16;
pub const LangCode = SInt16;
pub const RegionCode = SInt16;
pub const FourCharCode = UInt32;
pub const OSType = FourCharCode;
pub const ResType = FourCharCode;
pub const OSTypePtr = [*c]OSType;
pub const ResTypePtr = [*c]ResType;
pub const Boolean = u8;
pub const ProcPtr = ?*const fn () callconv(.C) c_long;
pub const Register68kProcPtr = ?*const fn () callconv(.C) void;
pub const UniversalProcPtr = ProcPtr;
pub const ProcHandle = [*c]ProcPtr;
pub const UniversalProcHandle = [*c]UniversalProcPtr;
pub const PRefCon = ?*anyopaque;
pub const URefCon = ?*anyopaque;
pub const SRefCon = ?*anyopaque;
pub const noErr: c_int = 0;
const enum_unnamed_1 = c_uint;
pub const kNilOptions: c_int = 0;
const enum_unnamed_2 = c_uint;
pub const kVariableLengthArray: c_int = 1;
const enum_unnamed_3 = c_uint;
pub const kUnknownType: c_int = 1061109567;
const enum_unnamed_4 = c_uint;
pub const UnicodeScalarValue = UInt32;
pub const UTF32Char = UInt32;
pub const UniChar = UInt16;
pub const UTF16Char = UInt16;
pub const UTF8Char = UInt8;
pub const UniCharPtr = [*c]UniChar;
pub const UniCharCount = c_ulong;
pub const UniCharCountPtr = [*c]UniCharCount;
pub const Str255 = [256]u8;
pub const Str63 = [64]u8;
pub const Str32 = [33]u8;
pub const Str31 = [32]u8;
pub const Str27 = [28]u8;
pub const Str15 = [16]u8;
pub const Str32Field = [34]u8;
pub const StrFileName = Str63;
pub const StringPtr = [*c]u8;
pub const StringHandle = [*c]StringPtr;
pub const ConstStringPtr = [*c]const u8;
pub const ConstStr255Param = [*c]const u8;
pub const ConstStr63Param = [*c]const u8;
pub const ConstStr32Param = [*c]const u8;
pub const ConstStr31Param = [*c]const u8;
pub const ConstStr27Param = [*c]const u8;
pub const ConstStr15Param = [*c]const u8;
pub const ConstStrFileNameParam = ConstStr63Param;
pub const struct_ProcessSerialNumber = extern struct {
    highLongOfPSN: UInt32 = @import("std").mem.zeroes(UInt32),
    lowLongOfPSN: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const ProcessSerialNumber = struct_ProcessSerialNumber;
pub const ProcessSerialNumberPtr = [*c]ProcessSerialNumber;
pub const struct_Point = extern struct {
    v: c_short = @import("std").mem.zeroes(c_short),
    h: c_short = @import("std").mem.zeroes(c_short),
};
pub const Point = struct_Point;
pub const PointPtr = [*c]Point;
pub const struct_Rect = extern struct {
    top: c_short = @import("std").mem.zeroes(c_short),
    left: c_short = @import("std").mem.zeroes(c_short),
    bottom: c_short = @import("std").mem.zeroes(c_short),
    right: c_short = @import("std").mem.zeroes(c_short),
};
pub const Rect = struct_Rect;
pub const RectPtr = [*c]Rect;
pub const struct_FixedPoint = extern struct {
    x: Fixed = @import("std").mem.zeroes(Fixed),
    y: Fixed = @import("std").mem.zeroes(Fixed),
};
pub const FixedPoint = struct_FixedPoint;
pub const struct_FixedRect = extern struct {
    left: Fixed = @import("std").mem.zeroes(Fixed),
    top: Fixed = @import("std").mem.zeroes(Fixed),
    right: Fixed = @import("std").mem.zeroes(Fixed),
    bottom: Fixed = @import("std").mem.zeroes(Fixed),
};
pub const FixedRect = struct_FixedRect;
pub const CharParameter = c_short;
pub const normal: c_int = 0;
pub const bold: c_int = 1;
pub const italic: c_int = 2;
pub const underline: c_int = 4;
pub const outline: c_int = 8;
pub const shadow: c_int = 16;
pub const condense: c_int = 32;
pub const extend: c_int = 64;
const enum_unnamed_5 = c_uint;
pub const Style = u8;
pub const StyleParameter = c_short;
pub const StyleField = Style;
pub const TimeValue = SInt32;
pub const TimeScale = SInt32;
pub const CompTimeValue = wide;
pub const TimeValue64 = SInt64;
pub const struct_TimeBaseRecord = opaque {};
pub const TimeBase = ?*struct_TimeBaseRecord;
pub const struct_TimeRecord = extern struct {
    value: CompTimeValue = @import("std").mem.zeroes(CompTimeValue),
    scale: TimeScale = @import("std").mem.zeroes(TimeScale),
    base: TimeBase = @import("std").mem.zeroes(TimeBase),
};
pub const TimeRecord = struct_TimeRecord;
pub const struct_NumVersion = extern struct {
    nonRelRev: UInt8 = @import("std").mem.zeroes(UInt8),
    stage: UInt8 = @import("std").mem.zeroes(UInt8),
    minorAndBugRev: UInt8 = @import("std").mem.zeroes(UInt8),
    majorRev: UInt8 = @import("std").mem.zeroes(UInt8),
};
pub const NumVersion = struct_NumVersion;
pub const developStage: c_int = 32;
pub const alphaStage: c_int = 64;
pub const betaStage: c_int = 96;
pub const finalStage: c_int = 128;
const enum_unnamed_6 = c_uint;
pub const union_NumVersionVariant = extern union {
    parts: NumVersion,
    whole: UInt32,
};
pub const NumVersionVariant = union_NumVersionVariant;
pub const NumVersionVariantPtr = [*c]NumVersionVariant;
pub const NumVersionVariantHandle = [*c]NumVersionVariantPtr;
pub const struct_VersRec = extern struct {
    numericVersion: NumVersion = @import("std").mem.zeroes(NumVersion),
    countryCode: c_short = @import("std").mem.zeroes(c_short),
    shortVersion: Str255 = @import("std").mem.zeroes(Str255),
    reserved: Str255 = @import("std").mem.zeroes(Str255),
};
pub const VersRec = struct_VersRec;
pub const VersRecPtr = [*c]VersRec;
pub const VersRecHndl = [*c]VersRecPtr;
pub const Byte = UInt8;
pub const SignedByte = SInt8;
pub const WidePtr = [*c]wide;
pub const UnsignedWidePtr = [*c]UnsignedWide;
pub const extended80 = Float80;
pub const extended96 = Float96;
pub const VHSelect = SInt8;
pub extern fn Debugger() void;
pub extern fn DebugStr(debuggerMsg: ConstStr255Param) void;
pub extern fn SysBreak() void;
pub extern fn SysBreakStr(debuggerMsg: ConstStr255Param) void;
pub extern fn SysBreakFunc(debuggerMsg: ConstStr255Param) void;
pub extern var kCFCoreFoundationVersionNumber: f64;
pub const CFTypeID = c_ulong;
pub const CFOptionFlags = c_ulong;
pub const CFHashCode = c_ulong;
pub const CFIndex = c_long;
pub const CFTypeRef = ?*const anyopaque;
pub const struct___CFString = opaque {};
pub const CFStringRef = ?*const struct___CFString;
pub const CFMutableStringRef = ?*struct___CFString;
pub const CFPropertyListRef = CFTypeRef;
pub const CFComparisonResult = CFIndex;
pub const kCFCompareLessThan: c_int = -1;
pub const kCFCompareEqualTo: c_int = 0;
pub const kCFCompareGreaterThan: c_int = 1;
const enum_unnamed_7 = c_int;
pub const CFComparatorFunction = ?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.C) CFComparisonResult;
pub const kCFNotFound: CFIndex = @as(CFIndex, @bitCast(@as(c_long, -@as(c_int, 1))));
pub const CFRange = extern struct {
    location: CFIndex = @import("std").mem.zeroes(CFIndex),
    length: CFIndex = @import("std").mem.zeroes(CFIndex),
};
pub inline fn CFRangeMake(arg_loc: CFIndex, arg_len: CFIndex) CFRange {
    var loc = arg_loc;
    _ = &loc;
    var len = arg_len;
    _ = &len;
    var range: CFRange = undefined;
    _ = &range;
    range.location = loc;
    range.length = len;
    return range;
}
pub extern fn __CFRangeMake(loc: CFIndex, len: CFIndex) CFRange;
pub const struct___CFNull = opaque {};
pub const CFNullRef = ?*const struct___CFNull;
pub extern fn CFNullGetTypeID() CFTypeID;
pub extern const kCFNull: CFNullRef;
pub const struct___CFAllocator = opaque {};
pub const CFAllocatorRef = ?*const struct___CFAllocator;
pub extern const kCFAllocatorDefault: CFAllocatorRef;
pub extern const kCFAllocatorSystemDefault: CFAllocatorRef;
pub extern const kCFAllocatorMalloc: CFAllocatorRef;
pub extern const kCFAllocatorMallocZone: CFAllocatorRef;
pub extern const kCFAllocatorNull: CFAllocatorRef;
pub extern const kCFAllocatorUseContext: CFAllocatorRef;
pub const CFAllocatorRetainCallBack = ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFAllocatorReleaseCallBack = ?*const fn (?*const anyopaque) callconv(.C) void;
pub const CFAllocatorCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFAllocatorAllocateCallBack = ?*const fn (CFIndex, CFOptionFlags, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const CFAllocatorReallocateCallBack = ?*const fn (?*anyopaque, CFIndex, CFOptionFlags, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const CFAllocatorDeallocateCallBack = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const CFAllocatorPreferredSizeCallBack = ?*const fn (CFIndex, CFOptionFlags, ?*anyopaque) callconv(.C) CFIndex;
pub const CFAllocatorContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: CFAllocatorRetainCallBack = @import("std").mem.zeroes(CFAllocatorRetainCallBack),
    release: CFAllocatorReleaseCallBack = @import("std").mem.zeroes(CFAllocatorReleaseCallBack),
    copyDescription: CFAllocatorCopyDescriptionCallBack = @import("std").mem.zeroes(CFAllocatorCopyDescriptionCallBack),
    allocate: CFAllocatorAllocateCallBack = @import("std").mem.zeroes(CFAllocatorAllocateCallBack),
    reallocate: CFAllocatorReallocateCallBack = @import("std").mem.zeroes(CFAllocatorReallocateCallBack),
    deallocate: CFAllocatorDeallocateCallBack = @import("std").mem.zeroes(CFAllocatorDeallocateCallBack),
    preferredSize: CFAllocatorPreferredSizeCallBack = @import("std").mem.zeroes(CFAllocatorPreferredSizeCallBack),
};
pub extern fn CFAllocatorGetTypeID() CFTypeID;
pub extern fn CFAllocatorSetDefault(allocator: CFAllocatorRef) void;
pub extern fn CFAllocatorGetDefault() CFAllocatorRef;
pub extern fn CFAllocatorCreate(allocator: CFAllocatorRef, context: [*c]CFAllocatorContext) CFAllocatorRef;
pub extern fn CFAllocatorAllocate(allocator: CFAllocatorRef, size: CFIndex, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorReallocate(allocator: CFAllocatorRef, ptr: ?*anyopaque, newsize: CFIndex, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: ?*anyopaque) void;
pub extern fn CFAllocatorGetPreferredSizeForSize(allocator: CFAllocatorRef, size: CFIndex, hint: CFOptionFlags) CFIndex;
pub extern fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: [*c]CFAllocatorContext) void;
pub extern fn CFGetTypeID(cf: CFTypeRef) CFTypeID;
pub extern fn CFCopyTypeIDDescription(type_id: CFTypeID) CFStringRef;
pub extern fn CFRetain(cf: CFTypeRef) CFTypeRef;
pub extern fn CFRelease(cf: CFTypeRef) void;
pub extern fn CFAutorelease(arg: CFTypeRef) CFTypeRef;
pub extern fn CFGetRetainCount(cf: CFTypeRef) CFIndex;
pub extern fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) Boolean;
pub extern fn CFHash(cf: CFTypeRef) CFHashCode;
pub extern fn CFCopyDescription(cf: CFTypeRef) CFStringRef;
pub extern fn CFGetAllocator(cf: CFTypeRef) CFAllocatorRef;
pub extern fn CFMakeCollectable(cf: CFTypeRef) CFTypeRef;
pub const CGFloat = f64;
pub const struct_CGPoint = extern struct {
    x: CGFloat = @import("std").mem.zeroes(CGFloat),
    y: CGFloat = @import("std").mem.zeroes(CGFloat),
};
pub const CGPoint = struct_CGPoint;
pub const struct_CGSize = extern struct {
    width: CGFloat = @import("std").mem.zeroes(CGFloat),
    height: CGFloat = @import("std").mem.zeroes(CGFloat),
};
pub const CGSize = struct_CGSize;
pub const struct_CGVector = extern struct {
    dx: CGFloat = @import("std").mem.zeroes(CGFloat),
    dy: CGFloat = @import("std").mem.zeroes(CGFloat),
};
pub const CGVector = struct_CGVector;
pub const struct_CGRect = extern struct {
    origin: CGPoint = @import("std").mem.zeroes(CGPoint),
    size: CGSize = @import("std").mem.zeroes(CGSize),
};
pub const CGRect = struct_CGRect;
pub const CGRectEdge = u32;
pub const CGRectMinXEdge: c_int = 0;
pub const CGRectMinYEdge: c_int = 1;
pub const CGRectMaxXEdge: c_int = 2;
pub const CGRectMaxYEdge: c_int = 3;
const enum_unnamed_8 = c_uint;
pub const struct_CGAffineTransform = extern struct {
    a: CGFloat = @import("std").mem.zeroes(CGFloat),
    b: CGFloat = @import("std").mem.zeroes(CGFloat),
    c: CGFloat = @import("std").mem.zeroes(CGFloat),
    d: CGFloat = @import("std").mem.zeroes(CGFloat),
    tx: CGFloat = @import("std").mem.zeroes(CGFloat),
    ty: CGFloat = @import("std").mem.zeroes(CGFloat),
};
pub const CGAffineTransform = struct_CGAffineTransform;
pub const struct_CGAffineTransformComponents = extern struct {
    scale: CGSize = @import("std").mem.zeroes(CGSize),
    horizontalShear: CGFloat = @import("std").mem.zeroes(CGFloat),
    rotation: CGFloat = @import("std").mem.zeroes(CGFloat),
    translation: CGVector = @import("std").mem.zeroes(CGVector),
};
pub const CGAffineTransformComponents = struct_CGAffineTransformComponents;
pub const struct___IOSurface = opaque {};
pub const IOSurfaceRef = ?*struct___IOSurface;
pub const CFDictionaryRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFDictionaryReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void;
pub const CFDictionaryCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFDictionaryEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean;
pub const CFDictionaryHashCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFHashCode;
pub const CFDictionaryKeyCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFDictionaryRetainCallBack = @import("std").mem.zeroes(CFDictionaryRetainCallBack),
    release: CFDictionaryReleaseCallBack = @import("std").mem.zeroes(CFDictionaryReleaseCallBack),
    copyDescription: CFDictionaryCopyDescriptionCallBack = @import("std").mem.zeroes(CFDictionaryCopyDescriptionCallBack),
    equal: CFDictionaryEqualCallBack = @import("std").mem.zeroes(CFDictionaryEqualCallBack),
    hash: CFDictionaryHashCallBack = @import("std").mem.zeroes(CFDictionaryHashCallBack),
};
pub extern const kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
pub extern const kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
pub const CFDictionaryValueCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFDictionaryRetainCallBack = @import("std").mem.zeroes(CFDictionaryRetainCallBack),
    release: CFDictionaryReleaseCallBack = @import("std").mem.zeroes(CFDictionaryReleaseCallBack),
    copyDescription: CFDictionaryCopyDescriptionCallBack = @import("std").mem.zeroes(CFDictionaryCopyDescriptionCallBack),
    equal: CFDictionaryEqualCallBack = @import("std").mem.zeroes(CFDictionaryEqualCallBack),
};
pub extern const kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
pub const CFDictionaryApplierFunction = ?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFDictionary = opaque {};
pub const CFDictionaryRef = ?*const struct___CFDictionary;
pub const CFMutableDictionaryRef = ?*struct___CFDictionary;
pub extern fn CFDictionaryGetTypeID() CFTypeID;
pub extern fn CFDictionaryCreate(allocator: CFAllocatorRef, keys: [*c]?*const anyopaque, values: [*c]?*const anyopaque, numValues: CFIndex, keyCallBacks: [*c]const CFDictionaryKeyCallBacks, valueCallBacks: [*c]const CFDictionaryValueCallBacks) CFDictionaryRef;
pub extern fn CFDictionaryCreateCopy(allocator: CFAllocatorRef, theDict: CFDictionaryRef) CFDictionaryRef;
pub extern fn CFDictionaryCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, keyCallBacks: [*c]const CFDictionaryKeyCallBacks, valueCallBacks: [*c]const CFDictionaryValueCallBacks) CFMutableDictionaryRef;
pub extern fn CFDictionaryCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theDict: CFDictionaryRef) CFMutableDictionaryRef;
pub extern fn CFDictionaryGetCount(theDict: CFDictionaryRef) CFIndex;
pub extern fn CFDictionaryGetCountOfKey(theDict: CFDictionaryRef, key: ?*const anyopaque) CFIndex;
pub extern fn CFDictionaryGetCountOfValue(theDict: CFDictionaryRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFDictionaryContainsKey(theDict: CFDictionaryRef, key: ?*const anyopaque) Boolean;
pub extern fn CFDictionaryContainsValue(theDict: CFDictionaryRef, value: ?*const anyopaque) Boolean;
pub extern fn CFDictionaryGetValue(theDict: CFDictionaryRef, key: ?*const anyopaque) ?*const anyopaque;
pub extern fn CFDictionaryGetValueIfPresent(theDict: CFDictionaryRef, key: ?*const anyopaque, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFDictionaryGetKeysAndValues(theDict: CFDictionaryRef, keys: [*c]?*const anyopaque, values: [*c]?*const anyopaque) void;
pub extern fn CFDictionaryApplyFunction(theDict: CFDictionaryRef, applier: CFDictionaryApplierFunction, context: ?*anyopaque) void;
pub extern fn CFDictionaryAddValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque, value: ?*const anyopaque) void;
pub extern fn CFDictionarySetValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque, value: ?*const anyopaque) void;
pub extern fn CFDictionaryReplaceValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque, value: ?*const anyopaque) void;
pub extern fn CFDictionaryRemoveValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque) void;
pub extern fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef) void;
pub extern const CGPointZero: CGPoint;
pub extern const CGSizeZero: CGSize;
pub extern const CGRectZero: CGRect;
pub extern const CGRectNull: CGRect;
pub extern const CGRectInfinite: CGRect;
pub fn CGPointMake(arg_x: CGFloat, arg_y: CGFloat) callconv(.C) CGPoint {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var p: CGPoint = undefined;
    _ = &p;
    p.x = x;
    p.y = y;
    return p;
}
pub fn CGSizeMake(arg_width: CGFloat, arg_height: CGFloat) callconv(.C) CGSize {
    var width = arg_width;
    _ = &width;
    var height = arg_height;
    _ = &height;
    var size: CGSize = undefined;
    _ = &size;
    size.width = width;
    size.height = height;
    return size;
}
pub fn CGVectorMake(arg_dx: CGFloat, arg_dy: CGFloat) callconv(.C) CGVector {
    var dx = arg_dx;
    _ = &dx;
    var dy = arg_dy;
    _ = &dy;
    var vector: CGVector = undefined;
    _ = &vector;
    vector.dx = dx;
    vector.dy = dy;
    return vector;
}
pub fn CGRectMake(arg_x: CGFloat, arg_y: CGFloat, arg_width: CGFloat, arg_height: CGFloat) callconv(.C) CGRect {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var width = arg_width;
    _ = &width;
    var height = arg_height;
    _ = &height;
    var rect: CGRect = undefined;
    _ = &rect;
    rect.origin.x = x;
    rect.origin.y = y;
    rect.size.width = width;
    rect.size.height = height;
    return rect;
}
pub extern fn CGRectGetMinX(rect: CGRect) CGFloat;
pub extern fn CGRectGetMidX(rect: CGRect) CGFloat;
pub extern fn CGRectGetMaxX(rect: CGRect) CGFloat;
pub extern fn CGRectGetMinY(rect: CGRect) CGFloat;
pub extern fn CGRectGetMidY(rect: CGRect) CGFloat;
pub extern fn CGRectGetMaxY(rect: CGRect) CGFloat;
pub extern fn CGRectGetWidth(rect: CGRect) CGFloat;
pub extern fn CGRectGetHeight(rect: CGRect) CGFloat;
pub extern fn CGPointEqualToPoint(point1: CGPoint, point2: CGPoint) bool;
pub extern fn CGSizeEqualToSize(size1: CGSize, size2: CGSize) bool;
pub extern fn CGRectEqualToRect(rect1: CGRect, rect2: CGRect) bool;
pub extern fn CGRectStandardize(rect: CGRect) CGRect;
pub extern fn CGRectIsEmpty(rect: CGRect) bool;
pub extern fn CGRectIsNull(rect: CGRect) bool;
pub extern fn CGRectIsInfinite(rect: CGRect) bool;
pub extern fn CGRectInset(rect: CGRect, dx: CGFloat, dy: CGFloat) CGRect;
pub extern fn CGRectIntegral(rect: CGRect) CGRect;
pub extern fn CGRectUnion(r1: CGRect, r2: CGRect) CGRect;
pub extern fn CGRectIntersection(r1: CGRect, r2: CGRect) CGRect;
pub extern fn CGRectOffset(rect: CGRect, dx: CGFloat, dy: CGFloat) CGRect;
pub extern fn CGRectDivide(rect: CGRect, slice: [*c]CGRect, remainder: [*c]CGRect, amount: CGFloat, edge: CGRectEdge) void;
pub extern fn CGRectContainsPoint(rect: CGRect, point: CGPoint) bool;
pub extern fn CGRectContainsRect(rect1: CGRect, rect2: CGRect) bool;
pub extern fn CGRectIntersectsRect(rect1: CGRect, rect2: CGRect) bool;
pub extern fn CGPointCreateDictionaryRepresentation(point: CGPoint) CFDictionaryRef;
pub extern fn CGPointMakeWithDictionaryRepresentation(dict: CFDictionaryRef, point: [*c]CGPoint) bool;
pub extern fn CGSizeCreateDictionaryRepresentation(size: CGSize) CFDictionaryRef;
pub extern fn CGSizeMakeWithDictionaryRepresentation(dict: CFDictionaryRef, size: [*c]CGSize) bool;
pub extern fn CGRectCreateDictionaryRepresentation(CGRect) CFDictionaryRef;
pub extern fn CGRectMakeWithDictionaryRepresentation(dict: CFDictionaryRef, rect: [*c]CGRect) bool;
pub fn __CGPointEqualToPoint(arg_point1: CGPoint, arg_point2: CGPoint) callconv(.C) bool {
    var point1 = arg_point1;
    _ = &point1;
    var point2 = arg_point2;
    _ = &point2;
    return (point1.x == point2.x) and (point1.y == point2.y);
}
pub fn __CGSizeEqualToSize(arg_size1: CGSize, arg_size2: CGSize) callconv(.C) bool {
    var size1 = arg_size1;
    _ = &size1;
    var size2 = arg_size2;
    _ = &size2;
    return (size1.width == size2.width) and (size1.height == size2.height);
}
pub extern const CGAffineTransformIdentity: CGAffineTransform;
pub extern fn CGAffineTransformMake(a: CGFloat, b: CGFloat, c: CGFloat, d: CGFloat, tx: CGFloat, ty: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformMakeTranslation(tx: CGFloat, ty: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformMakeScale(sx: CGFloat, sy: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformMakeRotation(angle: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformIsIdentity(t: CGAffineTransform) bool;
pub extern fn CGAffineTransformTranslate(t: CGAffineTransform, tx: CGFloat, ty: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformScale(t: CGAffineTransform, sx: CGFloat, sy: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformRotate(t: CGAffineTransform, angle: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformInvert(t: CGAffineTransform) CGAffineTransform;
pub extern fn CGAffineTransformConcat(t1: CGAffineTransform, t2: CGAffineTransform) CGAffineTransform;
pub extern fn CGAffineTransformEqualToTransform(t1: CGAffineTransform, t2: CGAffineTransform) bool;
pub extern fn CGPointApplyAffineTransform(point: CGPoint, t: CGAffineTransform) CGPoint;
pub extern fn CGSizeApplyAffineTransform(size: CGSize, t: CGAffineTransform) CGSize;
pub extern fn CGRectApplyAffineTransform(rect: CGRect, t: CGAffineTransform) CGRect;
pub extern fn CGAffineTransformDecompose(transform: CGAffineTransform) CGAffineTransformComponents;
pub extern fn CGAffineTransformMakeWithComponents(components: CGAffineTransformComponents) CGAffineTransform;
pub fn __CGAffineTransformMake(arg_a: CGFloat, arg_b: CGFloat, arg_c: CGFloat, arg_d: CGFloat, arg_tx: CGFloat, arg_ty: CGFloat) callconv(.C) CGAffineTransform {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    var c = arg_c;
    _ = &c;
    var d = arg_d;
    _ = &d;
    var tx = arg_tx;
    _ = &tx;
    var ty = arg_ty;
    _ = &ty;
    var t: CGAffineTransform = undefined;
    _ = &t;
    t.a = a;
    t.b = b;
    t.c = c;
    t.d = d;
    t.tx = tx;
    t.ty = ty;
    return t;
}
pub fn __CGPointApplyAffineTransform(arg_point: CGPoint, arg_t: CGAffineTransform) callconv(.C) CGPoint {
    var point = arg_point;
    _ = &point;
    var t = arg_t;
    _ = &t;
    var p: CGPoint = undefined;
    _ = &p;
    p.x = @as(CGFloat, @floatCast(((@as(f64, @floatCast(t.a)) * point.x) + (@as(f64, @floatCast(t.c)) * point.y)) + t.tx));
    p.y = @as(CGFloat, @floatCast(((@as(f64, @floatCast(t.b)) * point.x) + (@as(f64, @floatCast(t.d)) * point.y)) + t.ty));
    return p;
}
pub fn __CGSizeApplyAffineTransform(arg_size: CGSize, arg_t: CGAffineTransform) callconv(.C) CGSize {
    var size = arg_size;
    _ = &size;
    var t = arg_t;
    _ = &t;
    var s: CGSize = undefined;
    _ = &s;
    s.width = @as(CGFloat, @floatCast((@as(f64, @floatCast(t.a)) * size.width) + (@as(f64, @floatCast(t.c)) * size.height)));
    s.height = @as(CGFloat, @floatCast((@as(f64, @floatCast(t.b)) * size.width) + (@as(f64, @floatCast(t.d)) * size.height)));
    return s;
}
pub const struct_CGContext = opaque {};
pub const CGContextRef = ?*struct_CGContext;
pub const struct_CGColor = opaque {};
pub const CGColorRef = ?*struct_CGColor;
pub const struct_CGColorSpace = opaque {};
pub const CGColorSpaceRef = ?*struct_CGColorSpace;
pub const struct_CGDataProvider = opaque {};
pub const CGDataProviderRef = ?*struct_CGDataProvider;
pub const struct___CFData = opaque {};
pub const CFDataRef = ?*const struct___CFData;
pub const CFMutableDataRef = ?*struct___CFData;
pub extern fn CFDataGetTypeID() CFTypeID;
pub extern fn CFDataCreate(allocator: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex) CFDataRef;
pub extern fn CFDataCreateWithBytesNoCopy(allocator: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex, bytesDeallocator: CFAllocatorRef) CFDataRef;
pub extern fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) CFDataRef;
pub extern fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) CFMutableDataRef;
pub extern fn CFDataCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theData: CFDataRef) CFMutableDataRef;
pub extern fn CFDataGetLength(theData: CFDataRef) CFIndex;
pub extern fn CFDataGetBytePtr(theData: CFDataRef) [*c]const UInt8;
pub extern fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) [*c]UInt8;
pub extern fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: [*c]UInt8) void;
pub extern fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex) void;
pub extern fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex) void;
pub extern fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: [*c]const UInt8, length: CFIndex) void;
pub extern fn CFDataReplaceBytes(theData: CFMutableDataRef, range: CFRange, newBytes: [*c]const UInt8, newLength: CFIndex) void;
pub extern fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange) void;
pub const CFDataSearchFlags = CFOptionFlags;
pub const kCFDataSearchBackwards: c_int = 1;
pub const kCFDataSearchAnchored: c_int = 2;
const enum_unnamed_9 = c_uint;
pub extern fn CFDataFind(theData: CFDataRef, dataToFind: CFDataRef, searchRange: CFRange, compareOptions: CFDataSearchFlags) CFRange;
pub const CFErrorDomain = CFStringRef;
pub const struct___CFError = opaque {};
pub const CFErrorRef = ?*struct___CFError;
pub extern fn CFErrorGetTypeID() CFTypeID;
pub extern const kCFErrorDomainPOSIX: CFErrorDomain;
pub extern const kCFErrorDomainOSStatus: CFErrorDomain;
pub extern const kCFErrorDomainMach: CFErrorDomain;
pub extern const kCFErrorDomainCocoa: CFErrorDomain;
pub extern const kCFErrorLocalizedDescriptionKey: CFStringRef;
pub extern const kCFErrorLocalizedFailureKey: CFStringRef;
pub extern const kCFErrorLocalizedFailureReasonKey: CFStringRef;
pub extern const kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
pub extern const kCFErrorDescriptionKey: CFStringRef;
pub extern const kCFErrorUnderlyingErrorKey: CFStringRef;
pub extern const kCFErrorURLKey: CFStringRef;
pub extern const kCFErrorFilePathKey: CFStringRef;
pub extern fn CFErrorCreate(allocator: CFAllocatorRef, domain: CFErrorDomain, code: CFIndex, userInfo: CFDictionaryRef) CFErrorRef;
pub extern fn CFErrorCreateWithUserInfoKeysAndValues(allocator: CFAllocatorRef, domain: CFErrorDomain, code: CFIndex, userInfoKeys: [*c]const ?*const anyopaque, userInfoValues: [*c]const ?*const anyopaque, numUserInfoValues: CFIndex) CFErrorRef;
pub extern fn CFErrorGetDomain(err: CFErrorRef) CFErrorDomain;
pub extern fn CFErrorGetCode(err: CFErrorRef) CFIndex;
pub extern fn CFErrorCopyUserInfo(err: CFErrorRef) CFDictionaryRef;
pub extern fn CFErrorCopyDescription(err: CFErrorRef) CFStringRef;
pub extern fn CFErrorCopyFailureReason(err: CFErrorRef) CFStringRef;
pub extern fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) CFStringRef;
pub const CFArrayRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFArrayReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void;
pub const CFArrayCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFArrayEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean;
pub const CFArrayCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFArrayRetainCallBack = @import("std").mem.zeroes(CFArrayRetainCallBack),
    release: CFArrayReleaseCallBack = @import("std").mem.zeroes(CFArrayReleaseCallBack),
    copyDescription: CFArrayCopyDescriptionCallBack = @import("std").mem.zeroes(CFArrayCopyDescriptionCallBack),
    equal: CFArrayEqualCallBack = @import("std").mem.zeroes(CFArrayEqualCallBack),
};
pub extern const kCFTypeArrayCallBacks: CFArrayCallBacks;
pub const CFArrayApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFArray = opaque {};
pub const CFArrayRef = ?*const struct___CFArray;
pub const CFMutableArrayRef = ?*struct___CFArray;
pub extern fn CFArrayGetTypeID() CFTypeID;
pub extern fn CFArrayCreate(allocator: CFAllocatorRef, values: [*c]?*const anyopaque, numValues: CFIndex, callBacks: [*c]const CFArrayCallBacks) CFArrayRef;
pub extern fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) CFArrayRef;
pub extern fn CFArrayCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFArrayCallBacks) CFMutableArrayRef;
pub extern fn CFArrayCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theArray: CFArrayRef) CFMutableArrayRef;
pub extern fn CFArrayGetCount(theArray: CFArrayRef) CFIndex;
pub extern fn CFArrayGetCountOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) CFIndex;
pub extern fn CFArrayContainsValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) Boolean;
pub extern fn CFArrayGetValueAtIndex(theArray: CFArrayRef, idx: CFIndex) ?*const anyopaque;
pub extern fn CFArrayGetValues(theArray: CFArrayRef, range: CFRange, values: [*c]?*const anyopaque) void;
pub extern fn CFArrayApplyFunction(theArray: CFArrayRef, range: CFRange, applier: CFArrayApplierFunction, context: ?*anyopaque) void;
pub extern fn CFArrayGetFirstIndexOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) CFIndex;
pub extern fn CFArrayGetLastIndexOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) CFIndex;
pub extern fn CFArrayBSearchValues(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque, comparator: CFComparatorFunction, context: ?*anyopaque) CFIndex;
pub extern fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: ?*const anyopaque) void;
pub extern fn CFArrayInsertValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex, value: ?*const anyopaque) void;
pub extern fn CFArraySetValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex, value: ?*const anyopaque) void;
pub extern fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex) void;
pub extern fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef) void;
pub extern fn CFArrayReplaceValues(theArray: CFMutableArrayRef, range: CFRange, newValues: [*c]?*const anyopaque, newCount: CFIndex) void;
pub extern fn CFArrayExchangeValuesAtIndices(theArray: CFMutableArrayRef, idx1: CFIndex, idx2: CFIndex) void;
pub extern fn CFArraySortValues(theArray: CFMutableArrayRef, range: CFRange, comparator: CFComparatorFunction, context: ?*anyopaque) void;
pub extern fn CFArrayAppendArray(theArray: CFMutableArrayRef, otherArray: CFArrayRef, otherRange: CFRange) void;
pub const struct___CFCharacterSet = opaque {};
pub const CFCharacterSetRef = ?*const struct___CFCharacterSet;
pub const CFMutableCharacterSetRef = ?*struct___CFCharacterSet;
pub const CFCharacterSetPredefinedSet = CFIndex;
pub const kCFCharacterSetControl: c_int = 1;
pub const kCFCharacterSetWhitespace: c_int = 2;
pub const kCFCharacterSetWhitespaceAndNewline: c_int = 3;
pub const kCFCharacterSetDecimalDigit: c_int = 4;
pub const kCFCharacterSetLetter: c_int = 5;
pub const kCFCharacterSetLowercaseLetter: c_int = 6;
pub const kCFCharacterSetUppercaseLetter: c_int = 7;
pub const kCFCharacterSetNonBase: c_int = 8;
pub const kCFCharacterSetDecomposable: c_int = 9;
pub const kCFCharacterSetAlphaNumeric: c_int = 10;
pub const kCFCharacterSetPunctuation: c_int = 11;
pub const kCFCharacterSetCapitalizedLetter: c_int = 13;
pub const kCFCharacterSetSymbol: c_int = 14;
pub const kCFCharacterSetNewline: c_int = 15;
pub const kCFCharacterSetIllegal: c_int = 12;
const enum_unnamed_10 = c_uint;
pub extern fn CFCharacterSetGetTypeID() CFTypeID;
pub extern fn CFCharacterSetGetPredefined(theSetIdentifier: CFCharacterSetPredefinedSet) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithCharactersInRange(alloc: CFAllocatorRef, theRange: CFRange) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithCharactersInString(alloc: CFAllocatorRef, theString: CFStringRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithBitmapRepresentation(alloc: CFAllocatorRef, theData: CFDataRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateInvertedSet(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFCharacterSetRef;
pub extern fn CFCharacterSetIsSupersetOfSet(theSet: CFCharacterSetRef, theOtherset: CFCharacterSetRef) Boolean;
pub extern fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) Boolean;
pub extern fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) CFMutableCharacterSetRef;
pub extern fn CFCharacterSetCreateCopy(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateMutableCopy(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFMutableCharacterSetRef;
pub extern fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) Boolean;
pub extern fn CFCharacterSetIsLongCharacterMember(theSet: CFCharacterSetRef, theChar: UTF32Char) Boolean;
pub extern fn CFCharacterSetCreateBitmapRepresentation(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFDataRef;
pub extern fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange) void;
pub extern fn CFCharacterSetRemoveCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange) void;
pub extern fn CFCharacterSetAddCharactersInString(theSet: CFMutableCharacterSetRef, theString: CFStringRef) void;
pub extern fn CFCharacterSetRemoveCharactersInString(theSet: CFMutableCharacterSetRef, theString: CFStringRef) void;
pub extern fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef) void;
pub extern fn CFCharacterSetIntersect(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef) void;
pub extern fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef) void;
pub const CFNotificationName = CFStringRef;
pub const struct___CFNotificationCenter = opaque {};
pub const CFNotificationCenterRef = ?*struct___CFNotificationCenter;
pub const CFNotificationCallback = ?*const fn (CFNotificationCenterRef, ?*anyopaque, CFNotificationName, ?*const anyopaque, CFDictionaryRef) callconv(.C) void;
pub const CFNotificationSuspensionBehavior = CFIndex;
pub const CFNotificationSuspensionBehaviorDrop: c_int = 1;
pub const CFNotificationSuspensionBehaviorCoalesce: c_int = 2;
pub const CFNotificationSuspensionBehaviorHold: c_int = 3;
pub const CFNotificationSuspensionBehaviorDeliverImmediately: c_int = 4;
const enum_unnamed_11 = c_uint;
pub extern fn CFNotificationCenterGetTypeID() CFTypeID;
pub extern fn CFNotificationCenterGetLocalCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterGetDistributedCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterGetDarwinNotifyCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterAddObserver(center: CFNotificationCenterRef, observer: ?*const anyopaque, callBack: CFNotificationCallback, name: CFStringRef, object: ?*const anyopaque, suspensionBehavior: CFNotificationSuspensionBehavior) void;
pub extern fn CFNotificationCenterRemoveObserver(center: CFNotificationCenterRef, observer: ?*const anyopaque, name: CFNotificationName, object: ?*const anyopaque) void;
pub extern fn CFNotificationCenterRemoveEveryObserver(center: CFNotificationCenterRef, observer: ?*const anyopaque) void;
pub extern fn CFNotificationCenterPostNotification(center: CFNotificationCenterRef, name: CFNotificationName, object: ?*const anyopaque, userInfo: CFDictionaryRef, deliverImmediately: Boolean) void;
pub const kCFNotificationDeliverImmediately: c_int = 1;
pub const kCFNotificationPostToAllSessions: c_int = 2;
const enum_unnamed_12 = c_uint;
pub extern fn CFNotificationCenterPostNotificationWithOptions(center: CFNotificationCenterRef, name: CFNotificationName, object: ?*const anyopaque, userInfo: CFDictionaryRef, options: CFOptionFlags) void;
pub const CFLocaleIdentifier = CFStringRef;
pub const CFLocaleKey = CFStringRef;
pub const struct___CFLocale = opaque {};
pub const CFLocaleRef = ?*const struct___CFLocale;
pub extern fn CFLocaleGetTypeID() CFTypeID;
pub extern fn CFLocaleGetSystem() CFLocaleRef;
pub extern fn CFLocaleCopyCurrent() CFLocaleRef;
pub extern fn CFLocaleCopyAvailableLocaleIdentifiers() CFArrayRef;
pub extern fn CFLocaleCopyISOLanguageCodes() CFArrayRef;
pub extern fn CFLocaleCopyISOCountryCodes() CFArrayRef;
pub extern fn CFLocaleCopyISOCurrencyCodes() CFArrayRef;
pub extern fn CFLocaleCopyCommonISOCurrencyCodes() CFArrayRef;
pub extern fn CFLocaleCopyPreferredLanguages() CFArrayRef;
pub extern fn CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator: CFAllocatorRef, localeIdentifier: CFStringRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator: CFAllocatorRef, localeIdentifier: CFStringRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator: CFAllocatorRef, lcode: LangCode, rcode: RegionCode) CFLocaleIdentifier;
pub extern fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator: CFAllocatorRef, lcid: u32) CFLocaleIdentifier;
pub extern fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier: CFLocaleIdentifier) u32;
pub const CFLocaleLanguageDirection = CFIndex;
pub const kCFLocaleLanguageDirectionUnknown: c_int = 0;
pub const kCFLocaleLanguageDirectionLeftToRight: c_int = 1;
pub const kCFLocaleLanguageDirectionRightToLeft: c_int = 2;
pub const kCFLocaleLanguageDirectionTopToBottom: c_int = 3;
pub const kCFLocaleLanguageDirectionBottomToTop: c_int = 4;
const enum_unnamed_13 = c_uint;
pub extern fn CFLocaleGetLanguageCharacterDirection(isoLangCode: CFStringRef) CFLocaleLanguageDirection;
pub extern fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) CFLocaleLanguageDirection;
pub extern fn CFLocaleCreateComponentsFromLocaleIdentifier(allocator: CFAllocatorRef, localeID: CFLocaleIdentifier) CFDictionaryRef;
pub extern fn CFLocaleCreateLocaleIdentifierFromComponents(allocator: CFAllocatorRef, dictionary: CFDictionaryRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreate(allocator: CFAllocatorRef, localeIdentifier: CFLocaleIdentifier) CFLocaleRef;
pub extern fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) CFLocaleRef;
pub extern fn CFLocaleGetIdentifier(locale: CFLocaleRef) CFLocaleIdentifier;
pub extern fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) CFTypeRef;
pub extern fn CFLocaleCopyDisplayNameForPropertyValue(displayLocale: CFLocaleRef, key: CFLocaleKey, value: CFStringRef) CFStringRef;
pub extern const kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
pub extern const kCFLocaleIdentifier: CFLocaleKey;
pub extern const kCFLocaleLanguageCode: CFLocaleKey;
pub extern const kCFLocaleCountryCode: CFLocaleKey;
pub extern const kCFLocaleScriptCode: CFLocaleKey;
pub extern const kCFLocaleVariantCode: CFLocaleKey;
pub extern const kCFLocaleExemplarCharacterSet: CFLocaleKey;
pub extern const kCFLocaleCalendarIdentifier: CFLocaleKey;
pub extern const kCFLocaleCalendar: CFLocaleKey;
pub extern const kCFLocaleCollationIdentifier: CFLocaleKey;
pub extern const kCFLocaleUsesMetricSystem: CFLocaleKey;
pub extern const kCFLocaleMeasurementSystem: CFLocaleKey;
pub extern const kCFLocaleDecimalSeparator: CFLocaleKey;
pub extern const kCFLocaleGroupingSeparator: CFLocaleKey;
pub extern const kCFLocaleCurrencySymbol: CFLocaleKey;
pub extern const kCFLocaleCurrencyCode: CFLocaleKey;
pub extern const kCFLocaleCollatorIdentifier: CFLocaleKey;
pub extern const kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
pub const CFCalendarIdentifier = CFStringRef;
pub extern const kCFGregorianCalendar: CFCalendarIdentifier;
pub extern const kCFBuddhistCalendar: CFCalendarIdentifier;
pub extern const kCFChineseCalendar: CFCalendarIdentifier;
pub extern const kCFHebrewCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicCivilCalendar: CFCalendarIdentifier;
pub extern const kCFJapaneseCalendar: CFCalendarIdentifier;
pub extern const kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
pub extern const kCFPersianCalendar: CFCalendarIdentifier;
pub extern const kCFIndianCalendar: CFCalendarIdentifier;
pub extern const kCFISO8601Calendar: CFCalendarIdentifier;
pub extern const kCFIslamicTabularCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
pub const __gnuc_va_list = __builtin_va_list;
pub const va_list = __builtin_va_list;
pub const CFStringEncoding = UInt32;
pub const CFStringBuiltInEncodings = CFStringEncoding;
pub const kCFStringEncodingMacRoman: c_int = 0;
pub const kCFStringEncodingWindowsLatin1: c_int = 1280;
pub const kCFStringEncodingISOLatin1: c_int = 513;
pub const kCFStringEncodingNextStepLatin: c_int = 2817;
pub const kCFStringEncodingASCII: c_int = 1536;
pub const kCFStringEncodingUnicode: c_int = 256;
pub const kCFStringEncodingUTF8: c_int = 134217984;
pub const kCFStringEncodingNonLossyASCII: c_int = 3071;
pub const kCFStringEncodingUTF16: c_int = 256;
pub const kCFStringEncodingUTF16BE: c_int = 268435712;
pub const kCFStringEncodingUTF16LE: c_int = 335544576;
pub const kCFStringEncodingUTF32: c_int = 201326848;
pub const kCFStringEncodingUTF32BE: c_int = 402653440;
pub const kCFStringEncodingUTF32LE: c_int = 469762304;
const enum_unnamed_14 = c_uint;
pub extern fn CFStringGetTypeID() CFTypeID;
pub extern fn CFStringCreateWithPascalString(alloc: CFAllocatorRef, pStr: ConstStr255Param, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateWithCString(alloc: CFAllocatorRef, cStr: [*c]const u8, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateWithBytes(alloc: CFAllocatorRef, bytes: [*c]const UInt8, numBytes: CFIndex, encoding: CFStringEncoding, isExternalRepresentation: Boolean) CFStringRef;
pub extern fn CFStringCreateWithCharacters(alloc: CFAllocatorRef, chars: [*c]const UniChar, numChars: CFIndex) CFStringRef;
pub extern fn CFStringCreateWithPascalStringNoCopy(alloc: CFAllocatorRef, pStr: ConstStr255Param, encoding: CFStringEncoding, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithCStringNoCopy(alloc: CFAllocatorRef, cStr: [*c]const u8, encoding: CFStringEncoding, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithBytesNoCopy(alloc: CFAllocatorRef, bytes: [*c]const UInt8, numBytes: CFIndex, encoding: CFStringEncoding, isExternalRepresentation: Boolean, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithCharactersNoCopy(alloc: CFAllocatorRef, chars: [*c]const UniChar, numChars: CFIndex, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithSubstring(alloc: CFAllocatorRef, str: CFStringRef, range: CFRange) CFStringRef;
pub extern fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) CFStringRef;
pub extern fn CFStringCreateWithFormat(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, format: CFStringRef, ...) CFStringRef;
pub extern fn CFStringCreateWithFormatAndArguments(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, format: CFStringRef, arguments: va_list) CFStringRef;
pub extern fn CFStringCreateStringWithValidatedFormat(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, validFormatSpecifiers: CFStringRef, format: CFStringRef, errorPtr: [*c]CFErrorRef, ...) CFStringRef;
pub extern fn CFStringCreateStringWithValidatedFormatAndArguments(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, validFormatSpecifiers: CFStringRef, format: CFStringRef, arguments: va_list, errorPtr: [*c]CFErrorRef) CFStringRef;
pub extern fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) CFMutableStringRef;
pub extern fn CFStringCreateMutableCopy(alloc: CFAllocatorRef, maxLength: CFIndex, theString: CFStringRef) CFMutableStringRef;
pub extern fn CFStringCreateMutableWithExternalCharactersNoCopy(alloc: CFAllocatorRef, chars: [*c]UniChar, numChars: CFIndex, capacity: CFIndex, externalCharactersAllocator: CFAllocatorRef) CFMutableStringRef;
pub extern fn CFStringGetLength(theString: CFStringRef) CFIndex;
pub extern fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) UniChar;
pub extern fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: [*c]UniChar) void;
pub extern fn CFStringGetPascalString(theString: CFStringRef, buffer: StringPtr, bufferSize: CFIndex, encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetCString(theString: CFStringRef, buffer: [*c]u8, bufferSize: CFIndex, encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetPascalStringPtr(theString: CFStringRef, encoding: CFStringEncoding) ConstStringPtr;
pub extern fn CFStringGetCStringPtr(theString: CFStringRef, encoding: CFStringEncoding) [*c]const u8;
pub extern fn CFStringGetCharactersPtr(theString: CFStringRef) [*c]const UniChar;
pub extern fn CFStringGetBytes(theString: CFStringRef, range: CFRange, encoding: CFStringEncoding, lossByte: UInt8, isExternalRepresentation: Boolean, buffer: [*c]UInt8, maxBufLen: CFIndex, usedBufLen: [*c]CFIndex) CFIndex;
pub extern fn CFStringCreateFromExternalRepresentation(alloc: CFAllocatorRef, data: CFDataRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateExternalRepresentation(alloc: CFAllocatorRef, theString: CFStringRef, encoding: CFStringEncoding, lossByte: UInt8) CFDataRef;
pub extern fn CFStringGetSmallestEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringGetFastestEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringGetSystemEncoding() CFStringEncoding;
pub extern fn CFStringGetMaximumSizeForEncoding(length: CFIndex, encoding: CFStringEncoding) CFIndex;
pub extern fn CFStringGetFileSystemRepresentation(string: CFStringRef, buffer: [*c]u8, maxBufLen: CFIndex) Boolean;
pub extern fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) CFIndex;
pub extern fn CFStringCreateWithFileSystemRepresentation(alloc: CFAllocatorRef, buffer: [*c]const u8) CFStringRef;
pub const CFStringCompareFlags = CFOptionFlags;
pub const kCFCompareCaseInsensitive: c_int = 1;
pub const kCFCompareBackwards: c_int = 4;
pub const kCFCompareAnchored: c_int = 8;
pub const kCFCompareNonliteral: c_int = 16;
pub const kCFCompareLocalized: c_int = 32;
pub const kCFCompareNumerically: c_int = 64;
pub const kCFCompareDiacriticInsensitive: c_int = 128;
pub const kCFCompareWidthInsensitive: c_int = 256;
pub const kCFCompareForcedOrdering: c_int = 512;
const enum_unnamed_15 = c_uint;
pub extern fn CFStringCompareWithOptionsAndLocale(theString1: CFStringRef, theString2: CFStringRef, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags, locale: CFLocaleRef) CFComparisonResult;
pub extern fn CFStringCompareWithOptions(theString1: CFStringRef, theString2: CFStringRef, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags) CFComparisonResult;
pub extern fn CFStringCompare(theString1: CFStringRef, theString2: CFStringRef, compareOptions: CFStringCompareFlags) CFComparisonResult;
pub extern fn CFStringFindWithOptionsAndLocale(theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, locale: CFLocaleRef, result: [*c]CFRange) Boolean;
pub extern fn CFStringFindWithOptions(theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: [*c]CFRange) Boolean;
pub extern fn CFStringCreateArrayWithFindResults(alloc: CFAllocatorRef, theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags) CFArrayRef;
pub extern fn CFStringFind(theString: CFStringRef, stringToFind: CFStringRef, compareOptions: CFStringCompareFlags) CFRange;
pub extern fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) Boolean;
pub extern fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) Boolean;
pub extern fn CFStringGetRangeOfComposedCharactersAtIndex(theString: CFStringRef, theIndex: CFIndex) CFRange;
pub extern fn CFStringFindCharacterFromSet(theString: CFStringRef, theSet: CFCharacterSetRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: [*c]CFRange) Boolean;
pub extern fn CFStringGetLineBounds(theString: CFStringRef, range: CFRange, lineBeginIndex: [*c]CFIndex, lineEndIndex: [*c]CFIndex, contentsEndIndex: [*c]CFIndex) void;
pub extern fn CFStringGetParagraphBounds(string: CFStringRef, range: CFRange, parBeginIndex: [*c]CFIndex, parEndIndex: [*c]CFIndex, contentsEndIndex: [*c]CFIndex) void;
pub extern fn CFStringGetHyphenationLocationBeforeIndex(string: CFStringRef, location: CFIndex, limitRange: CFRange, options: CFOptionFlags, locale: CFLocaleRef, character: [*c]UTF32Char) CFIndex;
pub extern fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) Boolean;
pub extern fn CFStringCreateByCombiningStrings(alloc: CFAllocatorRef, theArray: CFArrayRef, separatorString: CFStringRef) CFStringRef;
pub extern fn CFStringCreateArrayBySeparatingStrings(alloc: CFAllocatorRef, theString: CFStringRef, separatorString: CFStringRef) CFArrayRef;
pub extern fn CFStringGetIntValue(str: CFStringRef) SInt32;
pub extern fn CFStringGetDoubleValue(str: CFStringRef) f64;
pub extern fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef) void;
pub extern fn CFStringAppendCharacters(theString: CFMutableStringRef, chars: [*c]const UniChar, numChars: CFIndex) void;
pub extern fn CFStringAppendPascalString(theString: CFMutableStringRef, pStr: ConstStr255Param, encoding: CFStringEncoding) void;
pub extern fn CFStringAppendCString(theString: CFMutableStringRef, cStr: [*c]const u8, encoding: CFStringEncoding) void;
pub extern fn CFStringAppendFormat(theString: CFMutableStringRef, formatOptions: CFDictionaryRef, format: CFStringRef, ...) void;
pub extern fn CFStringAppendFormatAndArguments(theString: CFMutableStringRef, formatOptions: CFDictionaryRef, format: CFStringRef, arguments: va_list) void;
pub extern fn CFStringInsert(str: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef) void;
pub extern fn CFStringDelete(theString: CFMutableStringRef, range: CFRange) void;
pub extern fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef) void;
pub extern fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef) void;
pub extern fn CFStringFindAndReplace(theString: CFMutableStringRef, stringToFind: CFStringRef, replacementString: CFStringRef, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags) CFIndex;
pub extern fn CFStringSetExternalCharactersNoCopy(theString: CFMutableStringRef, chars: [*c]UniChar, length: CFIndex, capacity: CFIndex) void;
pub extern fn CFStringPad(theString: CFMutableStringRef, padString: CFStringRef, length: CFIndex, indexIntoPad: CFIndex) void;
pub extern fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef) void;
pub extern fn CFStringTrimWhitespace(theString: CFMutableStringRef) void;
pub extern fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub extern fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub extern fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub const CFStringNormalizationForm = CFIndex;
pub const kCFStringNormalizationFormD: c_int = 0;
pub const kCFStringNormalizationFormKD: c_int = 1;
pub const kCFStringNormalizationFormC: c_int = 2;
pub const kCFStringNormalizationFormKC: c_int = 3;
const enum_unnamed_16 = c_uint;
pub extern fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm) void;
pub extern fn CFStringFold(theString: CFMutableStringRef, theFlags: CFStringCompareFlags, theLocale: CFLocaleRef) void;
pub extern fn CFStringTransform(string: CFMutableStringRef, range: [*c]CFRange, transform: CFStringRef, reverse: Boolean) Boolean;
pub extern const kCFStringTransformStripCombiningMarks: CFStringRef;
pub extern const kCFStringTransformToLatin: CFStringRef;
pub extern const kCFStringTransformFullwidthHalfwidth: CFStringRef;
pub extern const kCFStringTransformLatinKatakana: CFStringRef;
pub extern const kCFStringTransformLatinHiragana: CFStringRef;
pub extern const kCFStringTransformHiraganaKatakana: CFStringRef;
pub extern const kCFStringTransformMandarinLatin: CFStringRef;
pub extern const kCFStringTransformLatinHangul: CFStringRef;
pub extern const kCFStringTransformLatinArabic: CFStringRef;
pub extern const kCFStringTransformLatinHebrew: CFStringRef;
pub extern const kCFStringTransformLatinThai: CFStringRef;
pub extern const kCFStringTransformLatinCyrillic: CFStringRef;
pub extern const kCFStringTransformLatinGreek: CFStringRef;
pub extern const kCFStringTransformToXMLHex: CFStringRef;
pub extern const kCFStringTransformToUnicodeName: CFStringRef;
pub extern const kCFStringTransformStripDiacritics: CFStringRef;
pub extern fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetListOfAvailableEncodings() [*c]const CFStringEncoding;
pub extern fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringConvertEncodingToNSStringEncoding(encoding: CFStringEncoding) c_ulong;
pub extern fn CFStringConvertNSStringEncodingToEncoding(encoding: c_ulong) CFStringEncoding;
pub extern fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) UInt32;
pub extern fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) CFStringEncoding;
pub extern fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringGetMostCompatibleMacStringEncoding(encoding: CFStringEncoding) CFStringEncoding;
pub const CFStringInlineBuffer = extern struct {
    buffer: [64]UniChar = @import("std").mem.zeroes([64]UniChar),
    theString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    directUniCharBuffer: [*c]const UniChar = @import("std").mem.zeroes([*c]const UniChar),
    directCStringBuffer: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    rangeToBuffer: CFRange = @import("std").mem.zeroes(CFRange),
    bufferedRangeStart: CFIndex = @import("std").mem.zeroes(CFIndex),
    bufferedRangeEnd: CFIndex = @import("std").mem.zeroes(CFIndex),
};
pub inline fn CFStringInitInlineBuffer(arg_str: CFStringRef, arg_buf: [*c]CFStringInlineBuffer, arg_range: CFRange) void {
    var str = arg_str;
    _ = &str;
    var buf = arg_buf;
    _ = &buf;
    var range = arg_range;
    _ = &range;
    buf.*.theString = str;
    buf.*.rangeToBuffer = range;
    buf.*.directCStringBuffer = if ((blk: {
        const tmp = CFStringGetCharactersPtr(str);
        buf.*.directUniCharBuffer = tmp;
        break :blk tmp;
    }) != null) null else CFStringGetCStringPtr(str, @as(CFStringEncoding, @bitCast(kCFStringEncodingASCII)));
    buf.*.bufferedRangeStart = blk: {
        const tmp = @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 0))));
        buf.*.bufferedRangeEnd = tmp;
        break :blk tmp;
    };
}
pub inline fn CFStringGetCharacterFromInlineBuffer(arg_buf: [*c]CFStringInlineBuffer, arg_idx: CFIndex) UniChar {
    var buf = arg_buf;
    _ = &buf;
    var idx = arg_idx;
    _ = &idx;
    if ((idx < @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 0))))) or (idx >= buf.*.rangeToBuffer.length)) return 0;
    if (buf.*.directUniCharBuffer != null) return (blk: {
        const tmp = idx + buf.*.rangeToBuffer.location;
        if (tmp >= 0) break :blk buf.*.directUniCharBuffer + @as(usize, @intCast(tmp)) else break :blk buf.*.directUniCharBuffer - ~@as(usize, @bitCast(@as(isize, @intCast(tmp)) +% -1));
    }).*;
    if (buf.*.directCStringBuffer != null) return @as(UniChar, @bitCast(@as(c_ushort, (blk: {
        const tmp = idx + buf.*.rangeToBuffer.location;
        if (tmp >= 0) break :blk buf.*.directCStringBuffer + @as(usize, @intCast(tmp)) else break :blk buf.*.directCStringBuffer - ~@as(usize, @bitCast(@as(isize, @intCast(tmp)) +% -1));
    }).*)));
    if ((idx >= buf.*.bufferedRangeEnd) or (idx < buf.*.bufferedRangeStart)) {
        if ((blk: {
            const tmp = idx - @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 4))));
            buf.*.bufferedRangeStart = tmp;
            break :blk tmp;
        }) < @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 0))))) {
            buf.*.bufferedRangeStart = 0;
        }
        buf.*.bufferedRangeEnd = buf.*.bufferedRangeStart + @as(CFIndex, @bitCast(@as(c_long, @as(c_int, 64))));
        if (buf.*.bufferedRangeEnd > buf.*.rangeToBuffer.length) {
            buf.*.bufferedRangeEnd = buf.*.rangeToBuffer.length;
        }
        CFStringGetCharacters(buf.*.theString, CFRangeMake(buf.*.rangeToBuffer.location + buf.*.bufferedRangeStart, buf.*.bufferedRangeEnd - buf.*.bufferedRangeStart), @as([*c]UniChar, @ptrCast(@alignCast(&buf.*.buffer))));
    }
    return buf.*.buffer[@as(c_ulong, @intCast(idx - buf.*.bufferedRangeStart))];
}
pub inline fn CFStringIsSurrogateHighCharacter(arg_character: UniChar) Boolean {
    var character = arg_character;
    _ = &character;
    return @as(Boolean, @bitCast(@as(i8, @truncate(if ((@as(c_ulong, @bitCast(@as(c_ulong, character))) >= @as(c_ulong, 55296)) and (@as(c_ulong, @bitCast(@as(c_ulong, character))) <= @as(c_ulong, 56319))) @as(c_int, 1) else @as(c_int, 0)))));
}
pub inline fn CFStringIsSurrogateLowCharacter(arg_character: UniChar) Boolean {
    var character = arg_character;
    _ = &character;
    return @as(Boolean, @bitCast(@as(i8, @truncate(if ((@as(c_ulong, @bitCast(@as(c_ulong, character))) >= @as(c_ulong, 56320)) and (@as(c_ulong, @bitCast(@as(c_ulong, character))) <= @as(c_ulong, 57343))) @as(c_int, 1) else @as(c_int, 0)))));
}
pub inline fn CFStringGetLongCharacterForSurrogatePair(arg_surrogateHigh: UniChar, arg_surrogateLow: UniChar) UTF32Char {
    var surrogateHigh = arg_surrogateHigh;
    _ = &surrogateHigh;
    var surrogateLow = arg_surrogateLow;
    _ = &surrogateLow;
    return @as(UTF32Char, @bitCast(@as(c_uint, @truncate((((@as(c_ulong, @bitCast(@as(c_ulong, surrogateHigh))) -% @as(c_ulong, 55296)) << @intCast(10)) +% (@as(c_ulong, @bitCast(@as(c_ulong, surrogateLow))) -% @as(c_ulong, 56320))) +% @as(c_ulong, 65536)))));
}
pub inline fn CFStringGetSurrogatePairForLongCharacter(arg_character: UTF32Char, arg_surrogates: [*c]UniChar) Boolean {
    var character = arg_character;
    _ = &character;
    var surrogates = arg_surrogates;
    _ = &surrogates;
    if ((@as(c_ulong, @bitCast(@as(c_ulong, character))) > @as(c_ulong, 65535)) and (@as(c_ulong, @bitCast(@as(c_ulong, character))) < @as(c_ulong, 1114112))) {
        character -%= @as(UTF32Char, @bitCast(@as(c_int, 65536)));
        if (@as([*c]UniChar, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt(@as(c_int, 0)))))) != surrogates) {
            surrogates[@as(c_uint, @intCast(@as(c_int, 0)))] = @as(UniChar, @bitCast(@as(c_ushort, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, character >> @intCast(10)))) +% @as(c_ulong, 55296)))));
            surrogates[@as(c_uint, @intCast(@as(c_int, 1)))] = @as(UniChar, @bitCast(@as(c_ushort, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, character & @as(UTF32Char, @bitCast(@as(c_int, 1023)))))) +% @as(c_ulong, 56320)))));
        }
        return 1;
    } else {
        if (@as([*c]UniChar, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt(@as(c_int, 0)))))) != surrogates) {
            surrogates.* = @as(UniChar, @bitCast(@as(c_ushort, @truncate(character))));
        }
        return 0;
    }
    return @import("std").mem.zeroes(Boolean);
}
pub extern fn CFShow(obj: CFTypeRef) void;
pub extern fn CFShowStr(str: CFStringRef) void;
pub extern fn __CFStringMakeConstantString(cStr: [*c]const u8) CFStringRef;
pub const CFURLPathStyle = CFIndex;
pub const kCFURLPOSIXPathStyle: c_int = 0;
pub const kCFURLHFSPathStyle: c_int = 1;
pub const kCFURLWindowsPathStyle: c_int = 2;
const enum_unnamed_17 = c_uint;
pub const struct___CFURL = opaque {};
pub const CFURLRef = ?*const struct___CFURL;
pub extern fn CFURLGetTypeID() CFTypeID;
pub extern fn CFURLCreateWithBytes(allocator: CFAllocatorRef, URLBytes: [*c]const UInt8, length: CFIndex, encoding: CFStringEncoding, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateData(allocator: CFAllocatorRef, url: CFURLRef, encoding: CFStringEncoding, escapeWhitespace: Boolean) CFDataRef;
pub extern fn CFURLCreateWithString(allocator: CFAllocatorRef, URLString: CFStringRef, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateAbsoluteURLWithBytes(alloc: CFAllocatorRef, relativeURLBytes: [*c]const UInt8, length: CFIndex, encoding: CFStringEncoding, baseURL: CFURLRef, useCompatibilityMode: Boolean) CFURLRef;
pub extern fn CFURLCreateWithFileSystemPath(allocator: CFAllocatorRef, filePath: CFStringRef, pathStyle: CFURLPathStyle, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateFromFileSystemRepresentation(allocator: CFAllocatorRef, buffer: [*c]const UInt8, bufLen: CFIndex, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateWithFileSystemPathRelativeToBase(allocator: CFAllocatorRef, filePath: CFStringRef, pathStyle: CFURLPathStyle, isDirectory: Boolean, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateFromFileSystemRepresentationRelativeToBase(allocator: CFAllocatorRef, buffer: [*c]const UInt8, bufLen: CFIndex, isDirectory: Boolean, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLGetFileSystemRepresentation(url: CFURLRef, resolveAgainstBase: Boolean, buffer: [*c]UInt8, maxBufLen: CFIndex) Boolean;
pub extern fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) CFURLRef;
pub extern fn CFURLGetString(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLGetBaseURL(anURL: CFURLRef) CFURLRef;
pub extern fn CFURLCanBeDecomposed(anURL: CFURLRef) Boolean;
pub extern fn CFURLCopyScheme(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyNetLocation(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPath(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: [*c]Boolean) CFStringRef;
pub extern fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) CFStringRef;
pub extern fn CFURLHasDirectoryPath(anURL: CFURLRef) Boolean;
pub extern fn CFURLCopyResourceSpecifier(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyHostName(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLGetPortNumber(anURL: CFURLRef) SInt32;
pub extern fn CFURLCopyUserName(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPassword(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyParameterString(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyQueryString(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyLastPathComponent(url: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPathExtension(url: CFURLRef) CFStringRef;
pub extern fn CFURLCreateCopyAppendingPathComponent(allocator: CFAllocatorRef, url: CFURLRef, pathComponent: CFStringRef, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateCopyDeletingLastPathComponent(allocator: CFAllocatorRef, url: CFURLRef) CFURLRef;
pub extern fn CFURLCreateCopyAppendingPathExtension(allocator: CFAllocatorRef, url: CFURLRef, extension: CFStringRef) CFURLRef;
pub extern fn CFURLCreateCopyDeletingPathExtension(allocator: CFAllocatorRef, url: CFURLRef) CFURLRef;
pub extern fn CFURLGetBytes(url: CFURLRef, buffer: [*c]UInt8, bufferLength: CFIndex) CFIndex;
pub const CFURLComponentType = CFIndex;
pub const kCFURLComponentScheme: c_int = 1;
pub const kCFURLComponentNetLocation: c_int = 2;
pub const kCFURLComponentPath: c_int = 3;
pub const kCFURLComponentResourceSpecifier: c_int = 4;
pub const kCFURLComponentUser: c_int = 5;
pub const kCFURLComponentPassword: c_int = 6;
pub const kCFURLComponentUserInfo: c_int = 7;
pub const kCFURLComponentHost: c_int = 8;
pub const kCFURLComponentPort: c_int = 9;
pub const kCFURLComponentParameterString: c_int = 10;
pub const kCFURLComponentQuery: c_int = 11;
pub const kCFURLComponentFragment: c_int = 12;
const enum_unnamed_18 = c_uint;
pub extern fn CFURLGetByteRangeForComponent(url: CFURLRef, component: CFURLComponentType, rangeIncludingSeparators: [*c]CFRange) CFRange;
pub extern fn CFURLCreateStringByReplacingPercentEscapes(allocator: CFAllocatorRef, originalString: CFStringRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(allocator: CFAllocatorRef, origString: CFStringRef, charsToLeaveEscaped: CFStringRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFURLCreateStringByAddingPercentEscapes(allocator: CFAllocatorRef, originalString: CFStringRef, charactersToLeaveUnescaped: CFStringRef, legalURLCharactersToBeEscaped: CFStringRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFURLIsFileReferenceURL(url: CFURLRef) Boolean;
pub extern fn CFURLCreateFileReferenceURL(allocator: CFAllocatorRef, url: CFURLRef, @"error": [*c]CFErrorRef) CFURLRef;
pub extern fn CFURLCreateFilePathURL(allocator: CFAllocatorRef, url: CFURLRef, @"error": [*c]CFErrorRef) CFURLRef;
pub const struct_FSRef = opaque {};
pub extern fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: ?*const struct_FSRef) CFURLRef;
pub extern fn CFURLGetFSRef(url: CFURLRef, fsRef: ?*struct_FSRef) Boolean;
pub extern fn CFURLCopyResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValueTypeRefPtr: ?*anyopaque, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFURLCopyResourcePropertiesForKeys(url: CFURLRef, keys: CFArrayRef, @"error": [*c]CFErrorRef) CFDictionaryRef;
pub extern fn CFURLSetResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValue: CFTypeRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFURLSetResourcePropertiesForKeys(url: CFURLRef, keyedPropertyValues: CFDictionaryRef, @"error": [*c]CFErrorRef) Boolean;
pub extern const kCFURLKeysOfUnsetValuesKey: CFStringRef;
pub extern fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef) void;
pub extern fn CFURLClearResourcePropertyCache(url: CFURLRef) void;
pub extern fn CFURLSetTemporaryResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValue: CFTypeRef) void;
pub extern fn CFURLResourceIsReachable(url: CFURLRef, @"error": [*c]CFErrorRef) Boolean;
pub extern const kCFURLNameKey: CFStringRef;
pub extern const kCFURLLocalizedNameKey: CFStringRef;
pub extern const kCFURLIsRegularFileKey: CFStringRef;
pub extern const kCFURLIsDirectoryKey: CFStringRef;
pub extern const kCFURLIsSymbolicLinkKey: CFStringRef;
pub extern const kCFURLIsVolumeKey: CFStringRef;
pub extern const kCFURLIsPackageKey: CFStringRef;
pub extern const kCFURLIsApplicationKey: CFStringRef;
pub extern const kCFURLApplicationIsScriptableKey: CFStringRef;
pub extern const kCFURLIsSystemImmutableKey: CFStringRef;
pub extern const kCFURLIsUserImmutableKey: CFStringRef;
pub extern const kCFURLIsHiddenKey: CFStringRef;
pub extern const kCFURLHasHiddenExtensionKey: CFStringRef;
pub extern const kCFURLCreationDateKey: CFStringRef;
pub extern const kCFURLContentAccessDateKey: CFStringRef;
pub extern const kCFURLContentModificationDateKey: CFStringRef;
pub extern const kCFURLAttributeModificationDateKey: CFStringRef;
pub extern const kCFURLFileIdentifierKey: CFStringRef;
pub extern const kCFURLFileContentIdentifierKey: CFStringRef;
pub extern const kCFURLMayShareFileContentKey: CFStringRef;
pub extern const kCFURLMayHaveExtendedAttributesKey: CFStringRef;
pub extern const kCFURLIsPurgeableKey: CFStringRef;
pub extern const kCFURLIsSparseKey: CFStringRef;
pub extern const kCFURLLinkCountKey: CFStringRef;
pub extern const kCFURLParentDirectoryURLKey: CFStringRef;
pub extern const kCFURLVolumeURLKey: CFStringRef;
pub extern const kCFURLTypeIdentifierKey: CFStringRef;
pub extern const kCFURLLocalizedTypeDescriptionKey: CFStringRef;
pub extern const kCFURLLabelNumberKey: CFStringRef;
pub extern const kCFURLLabelColorKey: CFStringRef;
pub extern const kCFURLLocalizedLabelKey: CFStringRef;
pub extern const kCFURLEffectiveIconKey: CFStringRef;
pub extern const kCFURLCustomIconKey: CFStringRef;
pub extern const kCFURLFileResourceIdentifierKey: CFStringRef;
pub extern const kCFURLVolumeIdentifierKey: CFStringRef;
pub extern const kCFURLPreferredIOBlockSizeKey: CFStringRef;
pub extern const kCFURLIsReadableKey: CFStringRef;
pub extern const kCFURLIsWritableKey: CFStringRef;
pub extern const kCFURLIsExecutableKey: CFStringRef;
pub extern const kCFURLFileSecurityKey: CFStringRef;
pub extern const kCFURLIsExcludedFromBackupKey: CFStringRef;
pub extern const kCFURLTagNamesKey: CFStringRef;
pub extern const kCFURLPathKey: CFStringRef;
pub extern const kCFURLCanonicalPathKey: CFStringRef;
pub extern const kCFURLIsMountTriggerKey: CFStringRef;
pub extern const kCFURLGenerationIdentifierKey: CFStringRef;
pub extern const kCFURLDocumentIdentifierKey: CFStringRef;
pub extern const kCFURLAddedToDirectoryDateKey: CFStringRef;
pub extern const kCFURLQuarantinePropertiesKey: CFStringRef;
pub extern const kCFURLFileResourceTypeKey: CFStringRef;
pub extern const kCFURLFileResourceTypeNamedPipe: CFStringRef;
pub extern const kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
pub extern const kCFURLFileResourceTypeDirectory: CFStringRef;
pub extern const kCFURLFileResourceTypeBlockSpecial: CFStringRef;
pub extern const kCFURLFileResourceTypeRegular: CFStringRef;
pub extern const kCFURLFileResourceTypeSymbolicLink: CFStringRef;
pub extern const kCFURLFileResourceTypeSocket: CFStringRef;
pub extern const kCFURLFileResourceTypeUnknown: CFStringRef;
pub extern const kCFURLFileSizeKey: CFStringRef;
pub extern const kCFURLFileAllocatedSizeKey: CFStringRef;
pub extern const kCFURLTotalFileSizeKey: CFStringRef;
pub extern const kCFURLTotalFileAllocatedSizeKey: CFStringRef;
pub extern const kCFURLIsAliasFileKey: CFStringRef;
pub extern const kCFURLFileProtectionKey: CFStringRef;
pub extern const kCFURLFileProtectionNone: CFStringRef;
pub extern const kCFURLFileProtectionComplete: CFStringRef;
pub extern const kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
pub extern const kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
pub extern const kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
pub extern const kCFURLVolumeTotalCapacityKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
pub extern const kCFURLVolumeResourceCountKey: CFStringRef;
pub extern const kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
pub extern const kCFURLVolumeSupportsHardLinksKey: CFStringRef;
pub extern const kCFURLVolumeSupportsJournalingKey: CFStringRef;
pub extern const kCFURLVolumeIsJournalingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
pub extern const kCFURLVolumeIsBrowsableKey: CFStringRef;
pub extern const kCFURLVolumeMaximumFileSizeKey: CFStringRef;
pub extern const kCFURLVolumeIsEjectableKey: CFStringRef;
pub extern const kCFURLVolumeIsRemovableKey: CFStringRef;
pub extern const kCFURLVolumeIsInternalKey: CFStringRef;
pub extern const kCFURLVolumeIsAutomountedKey: CFStringRef;
pub extern const kCFURLVolumeIsLocalKey: CFStringRef;
pub extern const kCFURLVolumeIsReadOnlyKey: CFStringRef;
pub extern const kCFURLVolumeCreationDateKey: CFStringRef;
pub extern const kCFURLVolumeURLForRemountingKey: CFStringRef;
pub extern const kCFURLVolumeUUIDStringKey: CFStringRef;
pub extern const kCFURLVolumeNameKey: CFStringRef;
pub extern const kCFURLVolumeLocalizedNameKey: CFStringRef;
pub extern const kCFURLVolumeIsEncryptedKey: CFStringRef;
pub extern const kCFURLVolumeIsRootFileSystemKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCompressionKey: CFStringRef;
pub extern const kCFURLVolumeSupportsFileCloningKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
pub extern const kCFURLVolumeTypeNameKey: CFStringRef;
pub extern const kCFURLVolumeSubtypeKey: CFStringRef;
pub extern const kCFURLVolumeMountFromLocationKey: CFStringRef;
pub extern const kCFURLIsUbiquitousItemKey: CFStringRef;
pub extern const kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
pub extern const kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
pub extern const kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsExcludedFromSyncKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
pub const CFURLBookmarkCreationOptions = CFOptionFlags;
pub const kCFURLBookmarkCreationMinimalBookmarkMask: c_int = 512;
pub const kCFURLBookmarkCreationSuitableForBookmarkFile: c_int = 1024;
pub const kCFURLBookmarkCreationWithSecurityScope: c_int = 2048;
pub const kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess: c_int = 4096;
pub const kCFURLBookmarkCreationWithoutImplicitSecurityScope: c_int = 536870912;
pub const kCFURLBookmarkCreationPreferFileIDResolutionMask: c_int = 256;
const enum_unnamed_19 = c_uint;
pub const CFURLBookmarkResolutionOptions = CFOptionFlags;
pub const kCFURLBookmarkResolutionWithoutUIMask: c_int = 256;
pub const kCFURLBookmarkResolutionWithoutMountingMask: c_int = 512;
pub const kCFURLBookmarkResolutionWithSecurityScope: c_int = 1024;
pub const kCFURLBookmarkResolutionWithoutImplicitStartAccessing: c_int = 32768;
pub const kCFBookmarkResolutionWithoutUIMask: c_int = 256;
pub const kCFBookmarkResolutionWithoutMountingMask: c_int = 512;
const enum_unnamed_20 = c_uint;
pub const CFURLBookmarkFileCreationOptions = CFOptionFlags;
pub extern fn CFURLCreateBookmarkData(allocator: CFAllocatorRef, url: CFURLRef, options: CFURLBookmarkCreationOptions, resourcePropertiesToInclude: CFArrayRef, relativeToURL: CFURLRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn CFURLCreateByResolvingBookmarkData(allocator: CFAllocatorRef, bookmark: CFDataRef, options: CFURLBookmarkResolutionOptions, relativeToURL: CFURLRef, resourcePropertiesToInclude: CFArrayRef, isStale: [*c]Boolean, @"error": [*c]CFErrorRef) CFURLRef;
pub extern fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(allocator: CFAllocatorRef, resourcePropertiesToReturn: CFArrayRef, bookmark: CFDataRef) CFDictionaryRef;
pub extern fn CFURLCreateResourcePropertyForKeyFromBookmarkData(allocator: CFAllocatorRef, resourcePropertyKey: CFStringRef, bookmark: CFDataRef) CFTypeRef;
pub extern fn CFURLCreateBookmarkDataFromFile(allocator: CFAllocatorRef, fileURL: CFURLRef, errorRef: [*c]CFErrorRef) CFDataRef;
pub extern fn CFURLWriteBookmarkDataToFile(bookmarkRef: CFDataRef, fileURL: CFURLRef, options: CFURLBookmarkFileCreationOptions, errorRef: [*c]CFErrorRef) Boolean;
pub extern fn CFURLCreateBookmarkDataFromAliasRecord(allocatorRef: CFAllocatorRef, aliasRecordDataRef: CFDataRef) CFDataRef;
pub extern fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) Boolean;
pub extern fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef) void;
pub const CGDataProviderGetBytesCallback = ?*const fn (?*anyopaque, ?*anyopaque, usize) callconv(.C) usize;
pub const CGDataProviderSkipForwardCallback = ?*const fn (?*anyopaque, off_t) callconv(.C) off_t;
pub const CGDataProviderRewindCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const CGDataProviderReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGDataProviderSequentialCallbacks = extern struct {
    version: c_uint = @import("std").mem.zeroes(c_uint),
    getBytes: CGDataProviderGetBytesCallback = @import("std").mem.zeroes(CGDataProviderGetBytesCallback),
    skipForward: CGDataProviderSkipForwardCallback = @import("std").mem.zeroes(CGDataProviderSkipForwardCallback),
    rewind: CGDataProviderRewindCallback = @import("std").mem.zeroes(CGDataProviderRewindCallback),
    releaseInfo: CGDataProviderReleaseInfoCallback = @import("std").mem.zeroes(CGDataProviderReleaseInfoCallback),
};
pub const CGDataProviderSequentialCallbacks = struct_CGDataProviderSequentialCallbacks;
pub const CGDataProviderGetBytePointerCallback = ?*const fn (?*anyopaque) callconv(.C) ?*const anyopaque;
pub const CGDataProviderReleaseBytePointerCallback = ?*const fn (?*anyopaque, ?*const anyopaque) callconv(.C) void;
pub const CGDataProviderGetBytesAtPositionCallback = ?*const fn (?*anyopaque, ?*anyopaque, off_t, usize) callconv(.C) usize;
pub const struct_CGDataProviderDirectCallbacks = extern struct {
    version: c_uint = @import("std").mem.zeroes(c_uint),
    getBytePointer: CGDataProviderGetBytePointerCallback = @import("std").mem.zeroes(CGDataProviderGetBytePointerCallback),
    releaseBytePointer: CGDataProviderReleaseBytePointerCallback = @import("std").mem.zeroes(CGDataProviderReleaseBytePointerCallback),
    getBytesAtPosition: CGDataProviderGetBytesAtPositionCallback = @import("std").mem.zeroes(CGDataProviderGetBytesAtPositionCallback),
    releaseInfo: CGDataProviderReleaseInfoCallback = @import("std").mem.zeroes(CGDataProviderReleaseInfoCallback),
};
pub const CGDataProviderDirectCallbacks = struct_CGDataProviderDirectCallbacks;
pub extern fn CGDataProviderGetTypeID() CFTypeID;
pub extern fn CGDataProviderCreateSequential(info: ?*anyopaque, callbacks: [*c]const CGDataProviderSequentialCallbacks) CGDataProviderRef;
pub extern fn CGDataProviderCreateDirect(info: ?*anyopaque, size: off_t, callbacks: [*c]const CGDataProviderDirectCallbacks) CGDataProviderRef;
pub const CGDataProviderReleaseDataCallback = ?*const fn (?*anyopaque, ?*const anyopaque, usize) callconv(.C) void;
pub extern fn CGDataProviderCreateWithData(info: ?*anyopaque, data: ?*const anyopaque, size: usize, releaseData: CGDataProviderReleaseDataCallback) CGDataProviderRef;
pub extern fn CGDataProviderCreateWithCFData(data: CFDataRef) CGDataProviderRef;
pub extern fn CGDataProviderCreateWithURL(url: CFURLRef) CGDataProviderRef;
pub extern fn CGDataProviderCreateWithFilename(filename: [*c]const u8) CGDataProviderRef;
pub extern fn CGDataProviderRetain(provider: CGDataProviderRef) CGDataProviderRef;
pub extern fn CGDataProviderRelease(provider: CGDataProviderRef) void;
pub extern fn CGDataProviderCopyData(provider: CGDataProviderRef) CFDataRef;
pub extern fn CGDataProviderGetInfo(provider: CGDataProviderRef) ?*anyopaque;
pub const CGColorRenderingIntent = i32;
pub const kCGRenderingIntentDefault: c_int = 0;
pub const kCGRenderingIntentAbsoluteColorimetric: c_int = 1;
pub const kCGRenderingIntentRelativeColorimetric: c_int = 2;
pub const kCGRenderingIntentPerceptual: c_int = 3;
pub const kCGRenderingIntentSaturation: c_int = 4;
const enum_unnamed_21 = c_uint;
pub const CGColorSpaceModel = i32;
pub const kCGColorSpaceModelUnknown: c_int = -1;
pub const kCGColorSpaceModelMonochrome: c_int = 0;
pub const kCGColorSpaceModelRGB: c_int = 1;
pub const kCGColorSpaceModelCMYK: c_int = 2;
pub const kCGColorSpaceModelLab: c_int = 3;
pub const kCGColorSpaceModelDeviceN: c_int = 4;
pub const kCGColorSpaceModelIndexed: c_int = 5;
pub const kCGColorSpaceModelPattern: c_int = 6;
pub const kCGColorSpaceModelXYZ: c_int = 7;
const enum_unnamed_22 = c_int;
pub extern const kCGColorSpaceGenericGray: CFStringRef;
pub extern const kCGColorSpaceGenericRGB: CFStringRef;
pub extern const kCGColorSpaceGenericCMYK: CFStringRef;
pub extern const kCGColorSpaceDisplayP3: CFStringRef;
pub extern const kCGColorSpaceGenericRGBLinear: CFStringRef;
pub extern const kCGColorSpaceAdobeRGB1998: CFStringRef;
pub extern const kCGColorSpaceSRGB: CFStringRef;
pub extern const kCGColorSpaceGenericGrayGamma2_2: CFStringRef;
pub extern const kCGColorSpaceGenericXYZ: CFStringRef;
pub extern const kCGColorSpaceGenericLab: CFStringRef;
pub extern const kCGColorSpaceACESCGLinear: CFStringRef;
pub extern const kCGColorSpaceITUR_709: CFStringRef;
pub extern const kCGColorSpaceITUR_709_PQ: CFStringRef;
pub extern const kCGColorSpaceITUR_709_HLG: CFStringRef;
pub extern const kCGColorSpaceITUR_2020: CFStringRef;
pub extern const kCGColorSpaceITUR_2020_sRGBGamma: CFStringRef;
pub extern const kCGColorSpaceROMMRGB: CFStringRef;
pub extern const kCGColorSpaceDCIP3: CFStringRef;
pub extern const kCGColorSpaceLinearITUR_2020: CFStringRef;
pub extern const kCGColorSpaceExtendedITUR_2020: CFStringRef;
pub extern const kCGColorSpaceExtendedLinearITUR_2020: CFStringRef;
pub extern const kCGColorSpaceLinearDisplayP3: CFStringRef;
pub extern const kCGColorSpaceExtendedDisplayP3: CFStringRef;
pub extern const kCGColorSpaceExtendedLinearDisplayP3: CFStringRef;
pub extern const kCGColorSpaceITUR_2100_PQ: CFStringRef;
pub extern const kCGColorSpaceITUR_2100_HLG: CFStringRef;
pub extern const kCGColorSpaceDisplayP3_PQ: CFStringRef;
pub extern const kCGColorSpaceDisplayP3_HLG: CFStringRef;
pub extern const kCGColorSpaceITUR_2020_PQ: CFStringRef;
pub extern const kCGColorSpaceITUR_2020_HLG: CFStringRef;
pub extern const kCGColorSpaceDisplayP3_PQ_EOTF: CFStringRef;
pub extern const kCGColorSpaceITUR_2020_PQ_EOTF: CFStringRef;
pub extern const kCGColorSpaceExtendedSRGB: CFStringRef;
pub extern const kCGColorSpaceLinearSRGB: CFStringRef;
pub extern const kCGColorSpaceExtendedLinearSRGB: CFStringRef;
pub extern const kCGColorSpaceExtendedGray: CFStringRef;
pub extern const kCGColorSpaceLinearGray: CFStringRef;
pub extern const kCGColorSpaceExtendedLinearGray: CFStringRef;
pub extern fn CGColorSpaceCreateDeviceGray() CGColorSpaceRef;
pub extern fn CGColorSpaceCreateDeviceRGB() CGColorSpaceRef;
pub extern fn CGColorSpaceCreateDeviceCMYK() CGColorSpaceRef;
pub extern fn CGColorSpaceCreateCalibratedGray(whitePoint: [*c]const CGFloat, blackPoint: [*c]const CGFloat, gamma: CGFloat) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateCalibratedRGB(whitePoint: [*c]const CGFloat, blackPoint: [*c]const CGFloat, gamma: [*c]const CGFloat, matrix: [*c]const CGFloat) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateLab(whitePoint: [*c]const CGFloat, blackPoint: [*c]const CGFloat, range: [*c]const CGFloat) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateWithICCData(data: CFTypeRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateICCBased(nComponents: usize, range: [*c]const CGFloat, profile: CGDataProviderRef, alternate: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateIndexed(baseSpace: CGColorSpaceRef, lastIndex: usize, colorTable: [*c]const u8) CGColorSpaceRef;
pub extern fn CGColorSpaceCreatePattern(baseSpace: CGColorSpaceRef) CGColorSpaceRef;
pub const struct_ColorSyncProfile = opaque {};
pub const ColorSyncProfileRef = ?*const struct_ColorSyncProfile;
pub extern const kCGColorSpaceExtendedRange: CFStringRef;
pub extern fn CGColorSpaceCreateWithColorSyncProfile(ColorSyncProfileRef, options: CFDictionaryRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateWithName(name: CFStringRef) CGColorSpaceRef;
pub extern fn CGColorSpaceRetain(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceRelease(space: CGColorSpaceRef) void;
pub extern fn CGColorSpaceGetName(space: CGColorSpaceRef) CFStringRef;
pub extern fn CGColorSpaceCopyName(space: CGColorSpaceRef) CFStringRef;
pub extern fn CGColorSpaceGetTypeID() CFTypeID;
pub extern fn CGColorSpaceGetNumberOfComponents(space: CGColorSpaceRef) usize;
pub extern fn CGColorSpaceGetModel(space: CGColorSpaceRef) CGColorSpaceModel;
pub extern fn CGColorSpaceGetBaseColorSpace(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceGetColorTableCount(space: CGColorSpaceRef) usize;
pub extern fn CGColorSpaceGetColorTable(space: CGColorSpaceRef, table: [*c]u8) void;
pub extern fn CGColorSpaceCopyICCData(space: CGColorSpaceRef) CFDataRef;
pub extern fn CGColorSpaceIsWideGamutRGB(CGColorSpaceRef) bool;
pub extern fn CGColorSpaceIsHDR(CGColorSpaceRef) bool;
pub extern fn CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef) bool;
pub extern fn CGColorSpaceIsPQBased(s: CGColorSpaceRef) bool;
pub extern fn CGColorSpaceIsHLGBased(s: CGColorSpaceRef) bool;
pub extern fn CGColorSpaceSupportsOutput(space: CGColorSpaceRef) bool;
pub extern fn CGColorSpaceCopyPropertyList(space: CGColorSpaceRef) CFPropertyListRef;
pub extern fn CGColorSpaceCreateWithPropertyList(plist: CFPropertyListRef) CGColorSpaceRef;
pub extern fn CGColorSpaceUsesExtendedRange(space: CGColorSpaceRef) bool;
pub extern fn CGColorSpaceCreateLinearized(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateExtended(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateExtendedLinearized(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateCopyWithStandardRange(s: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateWithICCProfile(data: CFDataRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCopyICCProfile(space: CGColorSpaceRef) CFDataRef;
pub extern fn CGColorSpaceCreateWithPlatformColorSpace(ref: ?*const anyopaque) CGColorSpaceRef;
pub const struct_CGPattern = opaque {};
pub const CGPatternRef = ?*struct_CGPattern;
pub const CGPatternTiling = i32;
pub const kCGPatternTilingNoDistortion: c_int = 0;
pub const kCGPatternTilingConstantSpacingMinimalDistortion: c_int = 1;
pub const kCGPatternTilingConstantSpacing: c_int = 2;
const enum_unnamed_23 = c_uint;
pub const CGPatternDrawPatternCallback = ?*const fn (?*anyopaque, CGContextRef) callconv(.C) void;
pub const CGPatternReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGPatternCallbacks = extern struct {
    version: c_uint = @import("std").mem.zeroes(c_uint),
    drawPattern: CGPatternDrawPatternCallback = @import("std").mem.zeroes(CGPatternDrawPatternCallback),
    releaseInfo: CGPatternReleaseInfoCallback = @import("std").mem.zeroes(CGPatternReleaseInfoCallback),
};
pub const CGPatternCallbacks = struct_CGPatternCallbacks;
pub extern fn CGPatternGetTypeID() CFTypeID;
pub extern fn CGPatternCreate(info: ?*anyopaque, bounds: CGRect, matrix: CGAffineTransform, xStep: CGFloat, yStep: CGFloat, tiling: CGPatternTiling, isColored: bool, callbacks: [*c]const CGPatternCallbacks) CGPatternRef;
pub extern fn CGPatternRetain(pattern: CGPatternRef) CGPatternRef;
pub extern fn CGPatternRelease(pattern: CGPatternRef) void;
pub extern fn CGColorCreate(space: CGColorSpaceRef, components: [*c]const CGFloat) CGColorRef;
pub extern fn CGColorCreateGenericGray(gray: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateGenericRGB(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateGenericCMYK(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateGenericGrayGamma2_2(gray: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateSRGB(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorGetConstantColor(colorName: CFStringRef) CGColorRef;
pub extern fn CGColorCreateWithPattern(space: CGColorSpaceRef, pattern: CGPatternRef, components: [*c]const CGFloat) CGColorRef;
pub extern fn CGColorCreateCopy(color: CGColorRef) CGColorRef;
pub extern fn CGColorCreateCopyWithAlpha(color: CGColorRef, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef, intent: CGColorRenderingIntent, color: CGColorRef, options: CFDictionaryRef) CGColorRef;
pub extern fn CGColorRetain(color: CGColorRef) CGColorRef;
pub extern fn CGColorRelease(color: CGColorRef) void;
pub extern fn CGColorEqualToColor(color1: CGColorRef, color2: CGColorRef) bool;
pub extern fn CGColorGetNumberOfComponents(color: CGColorRef) usize;
pub extern fn CGColorGetComponents(color: CGColorRef) [*c]const CGFloat;
pub extern fn CGColorGetAlpha(color: CGColorRef) CGFloat;
pub extern fn CGColorGetColorSpace(color: CGColorRef) CGColorSpaceRef;
pub extern fn CGColorGetPattern(color: CGColorRef) CGPatternRef;
pub extern fn CGColorGetTypeID() CFTypeID;
pub extern const kCGColorWhite: CFStringRef;
pub extern const kCGColorBlack: CFStringRef;
pub extern const kCGColorClear: CFStringRef;
pub const struct_CGFont = opaque {};
pub const CGFontRef = ?*struct_CGFont;
pub const CGFontIndex = c_ushort;
pub const CGGlyph = CGFontIndex;
pub const CGFontPostScriptFormat = i32;
pub const kCGFontPostScriptFormatType1: c_int = 1;
pub const kCGFontPostScriptFormatType3: c_int = 3;
pub const kCGFontPostScriptFormatType42: c_int = 42;
const enum_unnamed_24 = c_uint;
pub const kCGFontIndexMax: CGFontIndex = @as(CGFontIndex, @bitCast(@as(c_short, @truncate((@as(c_int, 1) << @intCast(16)) - @as(c_int, 2)))));
pub const kCGFontIndexInvalid: CGFontIndex = @as(CGFontIndex, @bitCast(@as(c_short, @truncate((@as(c_int, 1) << @intCast(16)) - @as(c_int, 1)))));
pub const kCGGlyphMax: CGFontIndex = kCGFontIndexMax;
pub extern fn CGFontGetTypeID() CFTypeID;
pub extern fn CGFontCreateWithPlatformFont(platformFontReference: ?*anyopaque) CGFontRef;
pub extern fn CGFontCreateWithDataProvider(provider: CGDataProviderRef) CGFontRef;
pub extern fn CGFontCreateWithFontName(name: CFStringRef) CGFontRef;
pub extern fn CGFontCreateCopyWithVariations(font: CGFontRef, variations: CFDictionaryRef) CGFontRef;
pub extern fn CGFontRetain(font: CGFontRef) CGFontRef;
pub extern fn CGFontRelease(font: CGFontRef) void;
pub extern fn CGFontGetNumberOfGlyphs(font: CGFontRef) usize;
pub extern fn CGFontGetUnitsPerEm(font: CGFontRef) c_int;
pub extern fn CGFontCopyPostScriptName(font: CGFontRef) CFStringRef;
pub extern fn CGFontCopyFullName(font: CGFontRef) CFStringRef;
pub extern fn CGFontGetAscent(font: CGFontRef) c_int;
pub extern fn CGFontGetDescent(font: CGFontRef) c_int;
pub extern fn CGFontGetLeading(font: CGFontRef) c_int;
pub extern fn CGFontGetCapHeight(font: CGFontRef) c_int;
pub extern fn CGFontGetXHeight(font: CGFontRef) c_int;
pub extern fn CGFontGetFontBBox(font: CGFontRef) CGRect;
pub extern fn CGFontGetItalicAngle(font: CGFontRef) CGFloat;
pub extern fn CGFontGetStemV(font: CGFontRef) CGFloat;
pub extern fn CGFontCopyVariationAxes(font: CGFontRef) CFArrayRef;
pub extern fn CGFontCopyVariations(font: CGFontRef) CFDictionaryRef;
pub extern fn CGFontGetGlyphAdvances(font: CGFontRef, glyphs: [*c]const CGGlyph, count: usize, advances: [*c]c_int) bool;
pub extern fn CGFontGetGlyphBBoxes(font: CGFontRef, glyphs: [*c]const CGGlyph, count: usize, bboxes: [*c]CGRect) bool;
pub extern fn CGFontGetGlyphWithGlyphName(font: CGFontRef, name: CFStringRef) CGGlyph;
pub extern fn CGFontCopyGlyphNameForGlyph(font: CGFontRef, glyph: CGGlyph) CFStringRef;
pub extern fn CGFontCanCreatePostScriptSubset(font: CGFontRef, format: CGFontPostScriptFormat) bool;
pub extern fn CGFontCreatePostScriptSubset(font: CGFontRef, subsetName: CFStringRef, format: CGFontPostScriptFormat, glyphs: [*c]const CGGlyph, count: usize, encoding: [*c]const CGGlyph) CFDataRef;
pub extern fn CGFontCreatePostScriptEncoding(font: CGFontRef, encoding: [*c]const CGGlyph) CFDataRef;
pub extern fn CGFontCopyTableTags(font: CGFontRef) CFArrayRef;
pub extern fn CGFontCopyTableForTag(font: CGFontRef, tag: u32) CFDataRef;
pub extern const kCGFontVariationAxisName: CFStringRef;
pub extern const kCGFontVariationAxisMinValue: CFStringRef;
pub extern const kCGFontVariationAxisMaxValue: CFStringRef;
pub extern const kCGFontVariationAxisDefaultValue: CFStringRef;
pub const CGGlyphDeprecatedEnum = i32;
pub const CGGlyphMin: c_int = 0;
pub const CGGlyphMax: c_int = 1;
const enum_unnamed_25 = c_uint;
pub const struct_CGGradient = opaque {};
pub const CGGradientRef = ?*struct_CGGradient;
pub const CGGradientDrawingOptions = u32;
pub const kCGGradientDrawsBeforeStartLocation: c_int = 1;
pub const kCGGradientDrawsAfterEndLocation: c_int = 2;
const enum_unnamed_26 = c_uint;
pub extern fn CGGradientGetTypeID() CFTypeID;
pub extern fn CGGradientCreateWithColorComponents(space: CGColorSpaceRef, components: [*c]const CGFloat, locations: [*c]const CGFloat, count: usize) CGGradientRef;
pub extern fn CGGradientCreateWithColors(space: CGColorSpaceRef, colors: CFArrayRef, locations: [*c]const CGFloat) CGGradientRef;
pub extern fn CGGradientRetain(gradient: CGGradientRef) CGGradientRef;
pub extern fn CGGradientRelease(gradient: CGGradientRef) void;
pub const struct_CGImage = opaque {};
pub const CGImageRef = ?*struct_CGImage;
pub const CGImageAlphaInfo = u32;
pub const kCGImageAlphaNone: c_int = 0;
pub const kCGImageAlphaPremultipliedLast: c_int = 1;
pub const kCGImageAlphaPremultipliedFirst: c_int = 2;
pub const kCGImageAlphaLast: c_int = 3;
pub const kCGImageAlphaFirst: c_int = 4;
pub const kCGImageAlphaNoneSkipLast: c_int = 5;
pub const kCGImageAlphaNoneSkipFirst: c_int = 6;
pub const kCGImageAlphaOnly: c_int = 7;
const enum_unnamed_27 = c_uint;
pub const CGImageByteOrderInfo = u32;
pub const kCGImageByteOrderMask: c_int = 28672;
pub const kCGImageByteOrderDefault: c_int = 0;
pub const kCGImageByteOrder16Little: c_int = 4096;
pub const kCGImageByteOrder32Little: c_int = 8192;
pub const kCGImageByteOrder16Big: c_int = 12288;
pub const kCGImageByteOrder32Big: c_int = 16384;
const enum_unnamed_28 = c_uint;
pub const CGImagePixelFormatInfo = u32;
pub const kCGImagePixelFormatMask: c_int = 983040;
pub const kCGImagePixelFormatPacked: c_int = 0;
pub const kCGImagePixelFormatRGB555: c_int = 65536;
pub const kCGImagePixelFormatRGB565: c_int = 131072;
pub const kCGImagePixelFormatRGB101010: c_int = 196608;
pub const kCGImagePixelFormatRGBCIF10: c_int = 262144;
const enum_unnamed_29 = c_uint;
pub const CGBitmapInfo = u32;
pub const kCGBitmapAlphaInfoMask: c_int = 31;
pub const kCGBitmapFloatInfoMask: c_int = 3840;
pub const kCGBitmapFloatComponents: c_int = 256;
pub const kCGBitmapByteOrderMask: c_int = 28672;
pub const kCGBitmapByteOrderDefault: c_int = 0;
pub const kCGBitmapByteOrder16Little: c_int = 4096;
pub const kCGBitmapByteOrder32Little: c_int = 8192;
pub const kCGBitmapByteOrder16Big: c_int = 12288;
pub const kCGBitmapByteOrder32Big: c_int = 16384;
const enum_unnamed_30 = c_uint;
pub const kCGBitmapByteOrder16Host: CGBitmapInfo = @as(CGBitmapInfo, @bitCast(kCGBitmapByteOrder16Little));
pub const kCGBitmapByteOrder32Host: CGBitmapInfo = @as(CGBitmapInfo, @bitCast(kCGBitmapByteOrder32Little));
pub extern fn CGImageGetTypeID() CFTypeID;
pub extern fn CGImageCreate(width: usize, height: usize, bitsPerComponent: usize, bitsPerPixel: usize, bytesPerRow: usize, space: CGColorSpaceRef, bitmapInfo: CGBitmapInfo, provider: CGDataProviderRef, decode: [*c]const CGFloat, shouldInterpolate: bool, intent: CGColorRenderingIntent) CGImageRef;
pub extern fn CGImageMaskCreate(width: usize, height: usize, bitsPerComponent: usize, bitsPerPixel: usize, bytesPerRow: usize, provider: CGDataProviderRef, decode: [*c]const CGFloat, shouldInterpolate: bool) CGImageRef;
pub extern fn CGImageCreateCopy(image: CGImageRef) CGImageRef;
pub extern fn CGImageCreateWithJPEGDataProvider(source: CGDataProviderRef, decode: [*c]const CGFloat, shouldInterpolate: bool, intent: CGColorRenderingIntent) CGImageRef;
pub extern fn CGImageCreateWithPNGDataProvider(source: CGDataProviderRef, decode: [*c]const CGFloat, shouldInterpolate: bool, intent: CGColorRenderingIntent) CGImageRef;
pub extern fn CGImageCreateWithImageInRect(image: CGImageRef, rect: CGRect) CGImageRef;
pub extern fn CGImageCreateWithMask(image: CGImageRef, mask: CGImageRef) CGImageRef;
pub extern fn CGImageCreateWithMaskingColors(image: CGImageRef, components: [*c]const CGFloat) CGImageRef;
pub extern fn CGImageCreateCopyWithColorSpace(image: CGImageRef, space: CGColorSpaceRef) CGImageRef;
pub extern fn CGImageRetain(image: CGImageRef) CGImageRef;
pub extern fn CGImageRelease(image: CGImageRef) void;
pub extern fn CGImageIsMask(image: CGImageRef) bool;
pub extern fn CGImageGetWidth(image: CGImageRef) usize;
pub extern fn CGImageGetHeight(image: CGImageRef) usize;
pub extern fn CGImageGetBitsPerComponent(image: CGImageRef) usize;
pub extern fn CGImageGetBitsPerPixel(image: CGImageRef) usize;
pub extern fn CGImageGetBytesPerRow(image: CGImageRef) usize;
pub extern fn CGImageGetColorSpace(image: CGImageRef) CGColorSpaceRef;
pub extern fn CGImageGetAlphaInfo(image: CGImageRef) CGImageAlphaInfo;
pub extern fn CGImageGetDataProvider(image: CGImageRef) CGDataProviderRef;
pub extern fn CGImageGetDecode(image: CGImageRef) [*c]const CGFloat;
pub extern fn CGImageGetShouldInterpolate(image: CGImageRef) bool;
pub extern fn CGImageGetRenderingIntent(image: CGImageRef) CGColorRenderingIntent;
pub extern fn CGImageGetBitmapInfo(image: CGImageRef) CGBitmapInfo;
pub extern fn CGImageGetByteOrderInfo(image: CGImageRef) CGImageByteOrderInfo;
pub extern fn CGImageGetPixelFormatInfo(image: CGImageRef) CGImagePixelFormatInfo;
pub extern fn CGImageGetUTType(image: CGImageRef) CFStringRef;
pub const struct_CGPath = opaque {};
pub const CGMutablePathRef = ?*struct_CGPath;
pub const CGPathRef = ?*const struct_CGPath;
pub const CGLineJoin = i32;
pub const kCGLineJoinMiter: c_int = 0;
pub const kCGLineJoinRound: c_int = 1;
pub const kCGLineJoinBevel: c_int = 2;
const enum_unnamed_31 = c_uint;
pub const CGLineCap = i32;
pub const kCGLineCapButt: c_int = 0;
pub const kCGLineCapRound: c_int = 1;
pub const kCGLineCapSquare: c_int = 2;
const enum_unnamed_32 = c_uint;
pub extern fn CGPathGetTypeID() CFTypeID;
pub extern fn CGPathCreateMutable() CGMutablePathRef;
pub extern fn CGPathCreateCopy(path: CGPathRef) CGPathRef;
pub extern fn CGPathCreateCopyByTransformingPath(path: CGPathRef, transform: [*c]const CGAffineTransform) CGPathRef;
pub extern fn CGPathCreateMutableCopy(path: CGPathRef) CGMutablePathRef;
pub extern fn CGPathCreateMutableCopyByTransformingPath(path: CGPathRef, transform: [*c]const CGAffineTransform) CGMutablePathRef;
pub extern fn CGPathCreateWithRect(rect: CGRect, transform: [*c]const CGAffineTransform) CGPathRef;
pub extern fn CGPathCreateWithEllipseInRect(rect: CGRect, transform: [*c]const CGAffineTransform) CGPathRef;
pub extern fn CGPathCreateWithRoundedRect(rect: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: [*c]const CGAffineTransform) CGPathRef;
pub extern fn CGPathAddRoundedRect(path: CGMutablePathRef, transform: [*c]const CGAffineTransform, rect: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat) void;
pub extern fn CGPathCreateCopyByDashingPath(path: CGPathRef, transform: [*c]const CGAffineTransform, phase: CGFloat, lengths: [*c]const CGFloat, count: usize) CGPathRef;
pub extern fn CGPathCreateCopyByStrokingPath(path: CGPathRef, transform: [*c]const CGAffineTransform, lineWidth: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: CGFloat) CGPathRef;
pub extern fn CGPathRetain(path: CGPathRef) CGPathRef;
pub extern fn CGPathRelease(path: CGPathRef) void;
pub extern fn CGPathEqualToPath(path1: CGPathRef, path2: CGPathRef) bool;
pub extern fn CGPathMoveToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, x: CGFloat, y: CGFloat) void;
pub extern fn CGPathAddLineToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, x: CGFloat, y: CGFloat) void;
pub extern fn CGPathAddQuadCurveToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, cpx: CGFloat, cpy: CGFloat, x: CGFloat, y: CGFloat) void;
pub extern fn CGPathAddCurveToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, cp1x: CGFloat, cp1y: CGFloat, cp2x: CGFloat, cp2y: CGFloat, x: CGFloat, y: CGFloat) void;
pub extern fn CGPathCloseSubpath(path: CGMutablePathRef) void;
pub extern fn CGPathAddRect(path: CGMutablePathRef, m: [*c]const CGAffineTransform, rect: CGRect) void;
pub extern fn CGPathAddRects(path: CGMutablePathRef, m: [*c]const CGAffineTransform, rects: [*c]const CGRect, count: usize) void;
pub extern fn CGPathAddLines(path: CGMutablePathRef, m: [*c]const CGAffineTransform, points: [*c]const CGPoint, count: usize) void;
pub extern fn CGPathAddEllipseInRect(path: CGMutablePathRef, m: [*c]const CGAffineTransform, rect: CGRect) void;
pub extern fn CGPathAddRelativeArc(path: CGMutablePathRef, matrix: [*c]const CGAffineTransform, x: CGFloat, y: CGFloat, radius: CGFloat, startAngle: CGFloat, delta: CGFloat) void;
pub extern fn CGPathAddArc(path: CGMutablePathRef, m: [*c]const CGAffineTransform, x: CGFloat, y: CGFloat, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: bool) void;
pub extern fn CGPathAddArcToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, x1: CGFloat, y1: CGFloat, x2: CGFloat, y2: CGFloat, radius: CGFloat) void;
pub extern fn CGPathAddPath(path1: CGMutablePathRef, m: [*c]const CGAffineTransform, path2: CGPathRef) void;
pub extern fn CGPathIsEmpty(path: CGPathRef) bool;
pub extern fn CGPathIsRect(path: CGPathRef, rect: [*c]CGRect) bool;
pub extern fn CGPathGetCurrentPoint(path: CGPathRef) CGPoint;
pub extern fn CGPathGetBoundingBox(path: CGPathRef) CGRect;
pub extern fn CGPathGetPathBoundingBox(path: CGPathRef) CGRect;
pub extern fn CGPathContainsPoint(path: CGPathRef, m: [*c]const CGAffineTransform, point: CGPoint, eoFill: bool) bool;
pub const CGPathElementType = i32;
pub const kCGPathElementMoveToPoint: c_int = 0;
pub const kCGPathElementAddLineToPoint: c_int = 1;
pub const kCGPathElementAddQuadCurveToPoint: c_int = 2;
pub const kCGPathElementAddCurveToPoint: c_int = 3;
pub const kCGPathElementCloseSubpath: c_int = 4;
const enum_unnamed_33 = c_uint;
pub const struct_CGPathElement = extern struct {
    type: CGPathElementType = @import("std").mem.zeroes(CGPathElementType),
    points: [*c]CGPoint = @import("std").mem.zeroes([*c]CGPoint),
};
pub const CGPathElement = struct_CGPathElement;
pub const CGPathApplierFunction = ?*const fn (?*anyopaque, [*c]const CGPathElement) callconv(.C) void;
pub extern fn CGPathApply(path: CGPathRef, info: ?*anyopaque, function: CGPathApplierFunction) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPath.h:392:16: warning: unsupported type: 'BlockPointer'
pub const CGPathApplyBlock = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPath.h:392:16
pub extern fn CGPathApplyWithBlock(path: CGPathRef, block: CGPathApplyBlock) void;
pub extern fn CGPathCreateCopyByNormalizing(path: CGPathRef, evenOddFillRule: bool) CGPathRef;
pub extern fn CGPathCreateCopyByUnioningPath(path: CGPathRef, maskPath: CGPathRef, evenOddFillRule: bool) CGPathRef;
pub extern fn CGPathCreateCopyByIntersectingPath(path: CGPathRef, maskPath: CGPathRef, evenOddFillRule: bool) CGPathRef;
pub extern fn CGPathCreateCopyBySubtractingPath(path: CGPathRef, maskPath: CGPathRef, evenOddFillRule: bool) CGPathRef;
pub extern fn CGPathCreateCopyBySymmetricDifferenceOfPath(path: CGPathRef, maskPath: CGPathRef, evenOddFillRule: bool) CGPathRef;
pub extern fn CGPathCreateCopyOfLineBySubtractingPath(path: CGPathRef, maskPath: CGPathRef, evenOddFillRule: bool) CGPathRef;
pub extern fn CGPathCreateCopyOfLineByIntersectingPath(path: CGPathRef, maskPath: CGPathRef, evenOddFillRule: bool) CGPathRef;
pub extern fn CGPathCreateSeparateComponents(path: CGPathRef, evenOddFillRule: bool) CFArrayRef;
pub extern fn CGPathCreateCopyByFlattening(path: CGPathRef, flatteningThreshold: CGFloat) CGPathRef;
pub extern fn CGPathIntersectsPath(path1: CGPathRef, path2: CGPathRef, evenOddFillRule: bool) bool;
pub const struct_CGPDFDocument = opaque {};
pub const CGPDFDocumentRef = ?*struct_CGPDFDocument;
pub const struct_CGPDFPage = opaque {};
pub const CGPDFPageRef = ?*struct_CGPDFPage;
pub const struct_CGPDFDictionary = opaque {};
pub const CGPDFDictionaryRef = ?*struct_CGPDFDictionary;
pub const struct_CGPDFArray = opaque {};
pub const CGPDFArrayRef = ?*struct_CGPDFArray;
pub const CGPDFBoolean = u8;
pub const CGPDFInteger = c_long;
pub const CGPDFReal = CGFloat;
pub const struct_CGPDFObject = opaque {};
pub const CGPDFObjectRef = ?*struct_CGPDFObject;
pub const CGPDFObjectType = i32;
pub const kCGPDFObjectTypeNull: c_int = 1;
pub const kCGPDFObjectTypeBoolean: c_int = 2;
pub const kCGPDFObjectTypeInteger: c_int = 3;
pub const kCGPDFObjectTypeReal: c_int = 4;
pub const kCGPDFObjectTypeName: c_int = 5;
pub const kCGPDFObjectTypeString: c_int = 6;
pub const kCGPDFObjectTypeArray: c_int = 7;
pub const kCGPDFObjectTypeDictionary: c_int = 8;
pub const kCGPDFObjectTypeStream: c_int = 9;
const enum_unnamed_34 = c_uint;
pub extern fn CGPDFObjectGetType(object: CGPDFObjectRef) CGPDFObjectType;
pub extern fn CGPDFObjectGetValue(object: CGPDFObjectRef, @"type": CGPDFObjectType, value: ?*anyopaque) bool;
pub const struct_CGPDFStream = opaque {};
pub const CGPDFStreamRef = ?*struct_CGPDFStream;
pub const CGPDFDataFormat = i32;
pub const CGPDFDataFormatRaw: c_int = 0;
pub const CGPDFDataFormatJPEGEncoded: c_int = 1;
pub const CGPDFDataFormatJPEG2000: c_int = 2;
const enum_unnamed_35 = c_uint;
pub extern fn CGPDFStreamGetDictionary(stream: CGPDFStreamRef) CGPDFDictionaryRef;
pub extern fn CGPDFStreamCopyData(stream: CGPDFStreamRef, format: [*c]CGPDFDataFormat) CFDataRef;
pub const struct_CGPDFString = opaque {};
pub const CGPDFStringRef = ?*struct_CGPDFString;
pub const CFTimeInterval = f64;
pub const CFAbsoluteTime = CFTimeInterval;
pub extern fn CFAbsoluteTimeGetCurrent() CFAbsoluteTime;
pub extern const kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
pub extern const kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
pub const struct___CFDate = opaque {};
pub const CFDateRef = ?*const struct___CFDate;
pub extern fn CFDateGetTypeID() CFTypeID;
pub extern fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) CFDateRef;
pub extern fn CFDateGetAbsoluteTime(theDate: CFDateRef) CFAbsoluteTime;
pub extern fn CFDateGetTimeIntervalSinceDate(theDate: CFDateRef, otherDate: CFDateRef) CFTimeInterval;
pub extern fn CFDateCompare(theDate: CFDateRef, otherDate: CFDateRef, context: ?*anyopaque) CFComparisonResult;
pub const struct___CFTimeZone = opaque {};
pub const CFTimeZoneRef = ?*const struct___CFTimeZone;
pub const CFGregorianDate = extern struct {
    year: SInt32 = @import("std").mem.zeroes(SInt32),
    month: SInt8 = @import("std").mem.zeroes(SInt8),
    day: SInt8 = @import("std").mem.zeroes(SInt8),
    hour: SInt8 = @import("std").mem.zeroes(SInt8),
    minute: SInt8 = @import("std").mem.zeroes(SInt8),
    second: f64 = @import("std").mem.zeroes(f64),
};
pub const CFGregorianUnits = extern struct {
    years: SInt32 = @import("std").mem.zeroes(SInt32),
    months: SInt32 = @import("std").mem.zeroes(SInt32),
    days: SInt32 = @import("std").mem.zeroes(SInt32),
    hours: SInt32 = @import("std").mem.zeroes(SInt32),
    minutes: SInt32 = @import("std").mem.zeroes(SInt32),
    seconds: f64 = @import("std").mem.zeroes(f64),
};
pub const CFGregorianUnitFlags = CFOptionFlags;
pub const kCFGregorianUnitsYears: c_int = 1;
pub const kCFGregorianUnitsMonths: c_int = 2;
pub const kCFGregorianUnitsDays: c_int = 4;
pub const kCFGregorianUnitsHours: c_int = 8;
pub const kCFGregorianUnitsMinutes: c_int = 16;
pub const kCFGregorianUnitsSeconds: c_int = 32;
pub const kCFGregorianAllUnits: c_int = 16777215;
const enum_unnamed_36 = c_uint;
pub extern fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) Boolean;
pub extern fn CFGregorianDateGetAbsoluteTime(gdate: CFGregorianDate, tz: CFTimeZoneRef) CFAbsoluteTime;
pub extern fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef) CFGregorianDate;
pub extern fn CFAbsoluteTimeAddGregorianUnits(at: CFAbsoluteTime, tz: CFTimeZoneRef, units: CFGregorianUnits) CFAbsoluteTime;
pub extern fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(at1: CFAbsoluteTime, at2: CFAbsoluteTime, tz: CFTimeZoneRef, unitFlags: CFOptionFlags) CFGregorianUnits;
pub extern fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub extern fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub extern fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub extern fn CGPDFStringGetLength(string: CGPDFStringRef) usize;
pub extern fn CGPDFStringGetBytePtr(string: CGPDFStringRef) [*c]const u8;
pub extern fn CGPDFStringCopyTextString(string: CGPDFStringRef) CFStringRef;
pub extern fn CGPDFStringCopyDate(string: CGPDFStringRef) CFDateRef;
pub extern fn CGPDFArrayGetCount(array: CGPDFArrayRef) usize;
pub extern fn CGPDFArrayGetObject(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFObjectRef) bool;
pub extern fn CGPDFArrayGetNull(array: CGPDFArrayRef, index: usize) bool;
pub extern fn CGPDFArrayGetBoolean(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFBoolean) bool;
pub extern fn CGPDFArrayGetInteger(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFInteger) bool;
pub extern fn CGPDFArrayGetNumber(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFReal) bool;
pub extern fn CGPDFArrayGetName(array: CGPDFArrayRef, index: usize, value: [*c][*c]const u8) bool;
pub extern fn CGPDFArrayGetString(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFStringRef) bool;
pub extern fn CGPDFArrayGetArray(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFArrayRef) bool;
pub extern fn CGPDFArrayGetDictionary(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFDictionaryRef) bool;
pub extern fn CGPDFArrayGetStream(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFStreamRef) bool; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPDFArray.h:103:16: warning: unsupported type: 'BlockPointer'
pub const CGPDFArrayApplierBlock = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPDFArray.h:103:16
pub extern fn CGPDFArrayApplyBlock(array: CGPDFArrayRef, block: CGPDFArrayApplierBlock, info: ?*anyopaque) void;
pub extern fn CGPDFDictionaryGetCount(dict: CGPDFDictionaryRef) usize;
pub extern fn CGPDFDictionaryGetObject(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFObjectRef) bool;
pub extern fn CGPDFDictionaryGetBoolean(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFBoolean) bool;
pub extern fn CGPDFDictionaryGetInteger(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFInteger) bool;
pub extern fn CGPDFDictionaryGetNumber(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFReal) bool;
pub extern fn CGPDFDictionaryGetName(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c][*c]const u8) bool;
pub extern fn CGPDFDictionaryGetString(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFStringRef) bool;
pub extern fn CGPDFDictionaryGetArray(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFArrayRef) bool;
pub extern fn CGPDFDictionaryGetDictionary(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFDictionaryRef) bool;
pub extern fn CGPDFDictionaryGetStream(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFStreamRef) bool;
pub const CGPDFDictionaryApplierFunction = ?*const fn ([*c]const u8, CGPDFObjectRef, ?*anyopaque) callconv(.C) void;
pub extern fn CGPDFDictionaryApplyFunction(dict: CGPDFDictionaryRef, function: CGPDFDictionaryApplierFunction, info: ?*anyopaque) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPDFDictionary.h:116:16: warning: unsupported type: 'BlockPointer'
pub const CGPDFDictionaryApplierBlock = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPDFDictionary.h:116:16
pub extern fn CGPDFDictionaryApplyBlock(dict: CGPDFDictionaryRef, block: CGPDFDictionaryApplierBlock, info: ?*anyopaque) void;
pub const CGPDFBox = i32;
pub const kCGPDFMediaBox: c_int = 0;
pub const kCGPDFCropBox: c_int = 1;
pub const kCGPDFBleedBox: c_int = 2;
pub const kCGPDFTrimBox: c_int = 3;
pub const kCGPDFArtBox: c_int = 4;
const enum_unnamed_37 = c_uint;
pub extern fn CGPDFPageRetain(page: CGPDFPageRef) CGPDFPageRef;
pub extern fn CGPDFPageRelease(page: CGPDFPageRef) void;
pub extern fn CGPDFPageGetDocument(page: CGPDFPageRef) CGPDFDocumentRef;
pub extern fn CGPDFPageGetPageNumber(page: CGPDFPageRef) usize;
pub extern fn CGPDFPageGetBoxRect(page: CGPDFPageRef, box: CGPDFBox) CGRect;
pub extern fn CGPDFPageGetRotationAngle(page: CGPDFPageRef) c_int;
pub extern fn CGPDFPageGetDrawingTransform(page: CGPDFPageRef, box: CGPDFBox, rect: CGRect, rotate: c_int, preserveAspectRatio: bool) CGAffineTransform;
pub extern fn CGPDFPageGetDictionary(page: CGPDFPageRef) CGPDFDictionaryRef;
pub extern fn CGPDFPageGetTypeID() CFTypeID;
pub const CGPDFAccessPermissions = u32;
pub const kCGPDFAllowsLowQualityPrinting: c_int = 1;
pub const kCGPDFAllowsHighQualityPrinting: c_int = 2;
pub const kCGPDFAllowsDocumentChanges: c_int = 4;
pub const kCGPDFAllowsDocumentAssembly: c_int = 8;
pub const kCGPDFAllowsContentCopying: c_int = 16;
pub const kCGPDFAllowsContentAccessibility: c_int = 32;
pub const kCGPDFAllowsCommenting: c_int = 64;
pub const kCGPDFAllowsFormFieldEntry: c_int = 128;
const enum_unnamed_38 = c_uint;
pub extern const kCGPDFOutlineTitle: CFStringRef;
pub extern const kCGPDFOutlineChildren: CFStringRef;
pub extern const kCGPDFOutlineDestination: CFStringRef;
pub extern const kCGPDFOutlineDestinationRect: CFStringRef;
pub extern fn CGPDFDocumentCreateWithProvider(provider: CGDataProviderRef) CGPDFDocumentRef;
pub extern fn CGPDFDocumentCreateWithURL(url: CFURLRef) CGPDFDocumentRef;
pub extern fn CGPDFDocumentRetain(document: CGPDFDocumentRef) CGPDFDocumentRef;
pub extern fn CGPDFDocumentRelease(document: CGPDFDocumentRef) void;
pub extern fn CGPDFDocumentGetVersion(document: CGPDFDocumentRef, majorVersion: [*c]c_int, minorVersion: [*c]c_int) void;
pub extern fn CGPDFDocumentIsEncrypted(document: CGPDFDocumentRef) bool;
pub extern fn CGPDFDocumentUnlockWithPassword(document: CGPDFDocumentRef, password: [*c]const u8) bool;
pub extern fn CGPDFDocumentIsUnlocked(document: CGPDFDocumentRef) bool;
pub extern fn CGPDFDocumentAllowsPrinting(document: CGPDFDocumentRef) bool;
pub extern fn CGPDFDocumentAllowsCopying(document: CGPDFDocumentRef) bool;
pub extern fn CGPDFDocumentGetNumberOfPages(document: CGPDFDocumentRef) usize;
pub extern fn CGPDFDocumentGetPage(document: CGPDFDocumentRef, pageNumber: usize) CGPDFPageRef;
pub extern fn CGPDFDocumentGetCatalog(document: CGPDFDocumentRef) CGPDFDictionaryRef;
pub extern fn CGPDFDocumentGetInfo(document: CGPDFDocumentRef) CGPDFDictionaryRef;
pub extern fn CGPDFDocumentGetID(document: CGPDFDocumentRef) CGPDFArrayRef;
pub extern fn CGPDFDocumentGetTypeID() CFTypeID;
pub extern fn CGPDFDocumentGetOutline(document: CGPDFDocumentRef) CFDictionaryRef;
pub extern fn CGPDFDocumentGetAccessPermissions(document: CGPDFDocumentRef) CGPDFAccessPermissions;
pub extern fn CGPDFDocumentGetMediaBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetCropBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetBleedBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetTrimBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetArtBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetRotationAngle(document: CGPDFDocumentRef, page: c_int) c_int;
pub const struct_CGShading = opaque {};
pub const CGShadingRef = ?*struct_CGShading;
pub const struct_CGFunction = opaque {};
pub const CGFunctionRef = ?*struct_CGFunction;
pub const CGFunctionEvaluateCallback = ?*const fn (?*anyopaque, [*c]const CGFloat, [*c]CGFloat) callconv(.C) void;
pub const CGFunctionReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGFunctionCallbacks = extern struct {
    version: c_uint = @import("std").mem.zeroes(c_uint),
    evaluate: CGFunctionEvaluateCallback = @import("std").mem.zeroes(CGFunctionEvaluateCallback),
    releaseInfo: CGFunctionReleaseInfoCallback = @import("std").mem.zeroes(CGFunctionReleaseInfoCallback),
};
pub const CGFunctionCallbacks = struct_CGFunctionCallbacks;
pub extern fn CGFunctionGetTypeID() CFTypeID;
pub extern fn CGFunctionCreate(info: ?*anyopaque, domainDimension: usize, domain: [*c]const CGFloat, rangeDimension: usize, range: [*c]const CGFloat, callbacks: [*c]const CGFunctionCallbacks) CGFunctionRef;
pub extern fn CGFunctionRetain(function: CGFunctionRef) CGFunctionRef;
pub extern fn CGFunctionRelease(function: CGFunctionRef) void;
pub extern fn CGShadingGetTypeID() CFTypeID;
pub extern fn CGShadingCreateAxial(space: CGColorSpaceRef, start: CGPoint, end: CGPoint, function: CGFunctionRef, extendStart: bool, extendEnd: bool) CGShadingRef;
pub extern fn CGShadingCreateRadial(space: CGColorSpaceRef, start: CGPoint, startRadius: CGFloat, end: CGPoint, endRadius: CGFloat, function: CGFunctionRef, extendStart: bool, extendEnd: bool) CGShadingRef;
pub extern fn CGShadingRetain(shading: CGShadingRef) CGShadingRef;
pub extern fn CGShadingRelease(shading: CGShadingRef) void;
pub const CGPathDrawingMode = i32;
pub const kCGPathFill: c_int = 0;
pub const kCGPathEOFill: c_int = 1;
pub const kCGPathStroke: c_int = 2;
pub const kCGPathFillStroke: c_int = 3;
pub const kCGPathEOFillStroke: c_int = 4;
const enum_unnamed_39 = c_uint;
pub const CGTextDrawingMode = i32;
pub const kCGTextFill: c_int = 0;
pub const kCGTextStroke: c_int = 1;
pub const kCGTextFillStroke: c_int = 2;
pub const kCGTextInvisible: c_int = 3;
pub const kCGTextFillClip: c_int = 4;
pub const kCGTextStrokeClip: c_int = 5;
pub const kCGTextFillStrokeClip: c_int = 6;
pub const kCGTextClip: c_int = 7;
const enum_unnamed_40 = c_uint;
pub const CGTextEncoding = i32;
pub const kCGEncodingFontSpecific: c_int = 0;
pub const kCGEncodingMacRoman: c_int = 1;
const enum_unnamed_41 = c_uint;
pub const CGInterpolationQuality = i32;
pub const kCGInterpolationDefault: c_int = 0;
pub const kCGInterpolationNone: c_int = 1;
pub const kCGInterpolationLow: c_int = 2;
pub const kCGInterpolationMedium: c_int = 4;
pub const kCGInterpolationHigh: c_int = 3;
const enum_unnamed_42 = c_uint;
pub const CGBlendMode = i32;
pub const kCGBlendModeNormal: c_int = 0;
pub const kCGBlendModeMultiply: c_int = 1;
pub const kCGBlendModeScreen: c_int = 2;
pub const kCGBlendModeOverlay: c_int = 3;
pub const kCGBlendModeDarken: c_int = 4;
pub const kCGBlendModeLighten: c_int = 5;
pub const kCGBlendModeColorDodge: c_int = 6;
pub const kCGBlendModeColorBurn: c_int = 7;
pub const kCGBlendModeSoftLight: c_int = 8;
pub const kCGBlendModeHardLight: c_int = 9;
pub const kCGBlendModeDifference: c_int = 10;
pub const kCGBlendModeExclusion: c_int = 11;
pub const kCGBlendModeHue: c_int = 12;
pub const kCGBlendModeSaturation: c_int = 13;
pub const kCGBlendModeColor: c_int = 14;
pub const kCGBlendModeLuminosity: c_int = 15;
pub const kCGBlendModeClear: c_int = 16;
pub const kCGBlendModeCopy: c_int = 17;
pub const kCGBlendModeSourceIn: c_int = 18;
pub const kCGBlendModeSourceOut: c_int = 19;
pub const kCGBlendModeSourceAtop: c_int = 20;
pub const kCGBlendModeDestinationOver: c_int = 21;
pub const kCGBlendModeDestinationIn: c_int = 22;
pub const kCGBlendModeDestinationOut: c_int = 23;
pub const kCGBlendModeDestinationAtop: c_int = 24;
pub const kCGBlendModeXOR: c_int = 25;
pub const kCGBlendModePlusDarker: c_int = 26;
pub const kCGBlendModePlusLighter: c_int = 27;
const enum_unnamed_43 = c_uint;
pub extern fn CGContextGetTypeID() CFTypeID;
pub extern fn CGContextSaveGState(c: CGContextRef) void;
pub extern fn CGContextRestoreGState(c: CGContextRef) void;
pub extern fn CGContextScaleCTM(c: CGContextRef, sx: CGFloat, sy: CGFloat) void;
pub extern fn CGContextTranslateCTM(c: CGContextRef, tx: CGFloat, ty: CGFloat) void;
pub extern fn CGContextRotateCTM(c: CGContextRef, angle: CGFloat) void;
pub extern fn CGContextConcatCTM(c: CGContextRef, transform: CGAffineTransform) void;
pub extern fn CGContextGetCTM(c: CGContextRef) CGAffineTransform;
pub extern fn CGContextSetLineWidth(c: CGContextRef, width: CGFloat) void;
pub extern fn CGContextSetLineCap(c: CGContextRef, cap: CGLineCap) void;
pub extern fn CGContextSetLineJoin(c: CGContextRef, join: CGLineJoin) void;
pub extern fn CGContextSetMiterLimit(c: CGContextRef, limit: CGFloat) void;
pub extern fn CGContextSetLineDash(c: CGContextRef, phase: CGFloat, lengths: [*c]const CGFloat, count: usize) void;
pub extern fn CGContextSetFlatness(c: CGContextRef, flatness: CGFloat) void;
pub extern fn CGContextSetAlpha(c: CGContextRef, alpha: CGFloat) void;
pub extern fn CGContextSetBlendMode(c: CGContextRef, mode: CGBlendMode) void;
pub extern fn CGContextBeginPath(c: CGContextRef) void;
pub extern fn CGContextMoveToPoint(c: CGContextRef, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextAddLineToPoint(c: CGContextRef, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextAddCurveToPoint(c: CGContextRef, cp1x: CGFloat, cp1y: CGFloat, cp2x: CGFloat, cp2y: CGFloat, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextAddQuadCurveToPoint(c: CGContextRef, cpx: CGFloat, cpy: CGFloat, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextClosePath(c: CGContextRef) void;
pub extern fn CGContextAddRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextAddRects(c: CGContextRef, rects: [*c]const CGRect, count: usize) void;
pub extern fn CGContextAddLines(c: CGContextRef, points: [*c]const CGPoint, count: usize) void;
pub extern fn CGContextAddEllipseInRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextAddArc(c: CGContextRef, x: CGFloat, y: CGFloat, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: c_int) void;
pub extern fn CGContextAddArcToPoint(c: CGContextRef, x1: CGFloat, y1: CGFloat, x2: CGFloat, y2: CGFloat, radius: CGFloat) void;
pub extern fn CGContextAddPath(c: CGContextRef, path: CGPathRef) void;
pub extern fn CGContextReplacePathWithStrokedPath(c: CGContextRef) void;
pub extern fn CGContextIsPathEmpty(c: CGContextRef) bool;
pub extern fn CGContextGetPathCurrentPoint(c: CGContextRef) CGPoint;
pub extern fn CGContextGetPathBoundingBox(c: CGContextRef) CGRect;
pub extern fn CGContextCopyPath(c: CGContextRef) CGPathRef;
pub extern fn CGContextPathContainsPoint(c: CGContextRef, point: CGPoint, mode: CGPathDrawingMode) bool;
pub extern fn CGContextDrawPath(c: CGContextRef, mode: CGPathDrawingMode) void;
pub extern fn CGContextFillPath(c: CGContextRef) void;
pub extern fn CGContextEOFillPath(c: CGContextRef) void;
pub extern fn CGContextStrokePath(c: CGContextRef) void;
pub extern fn CGContextFillRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextFillRects(c: CGContextRef, rects: [*c]const CGRect, count: usize) void;
pub extern fn CGContextStrokeRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextStrokeRectWithWidth(c: CGContextRef, rect: CGRect, width: CGFloat) void;
pub extern fn CGContextClearRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextFillEllipseInRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextStrokeEllipseInRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextStrokeLineSegments(c: CGContextRef, points: [*c]const CGPoint, count: usize) void;
pub extern fn CGContextClip(c: CGContextRef) void;
pub extern fn CGContextEOClip(c: CGContextRef) void;
pub extern fn CGContextResetClip(c: CGContextRef) void;
pub extern fn CGContextClipToMask(c: CGContextRef, rect: CGRect, mask: CGImageRef) void;
pub extern fn CGContextGetClipBoundingBox(c: CGContextRef) CGRect;
pub extern fn CGContextClipToRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextClipToRects(c: CGContextRef, rects: [*c]const CGRect, count: usize) void;
pub extern fn CGContextSetFillColorWithColor(c: CGContextRef, color: CGColorRef) void;
pub extern fn CGContextSetStrokeColorWithColor(c: CGContextRef, color: CGColorRef) void;
pub extern fn CGContextSetFillColorSpace(c: CGContextRef, space: CGColorSpaceRef) void;
pub extern fn CGContextSetStrokeColorSpace(c: CGContextRef, space: CGColorSpaceRef) void;
pub extern fn CGContextSetFillColor(c: CGContextRef, components: [*c]const CGFloat) void;
pub extern fn CGContextSetStrokeColor(c: CGContextRef, components: [*c]const CGFloat) void;
pub extern fn CGContextSetFillPattern(c: CGContextRef, pattern: CGPatternRef, components: [*c]const CGFloat) void;
pub extern fn CGContextSetStrokePattern(c: CGContextRef, pattern: CGPatternRef, components: [*c]const CGFloat) void;
pub extern fn CGContextSetPatternPhase(c: CGContextRef, phase: CGSize) void;
pub extern fn CGContextSetGrayFillColor(c: CGContextRef, gray: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetGrayStrokeColor(c: CGContextRef, gray: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetRGBFillColor(c: CGContextRef, red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetRGBStrokeColor(c: CGContextRef, red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetCMYKFillColor(c: CGContextRef, cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetCMYKStrokeColor(c: CGContextRef, cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetRenderingIntent(c: CGContextRef, intent: CGColorRenderingIntent) void;
pub extern fn CGContextDrawImage(c: CGContextRef, rect: CGRect, image: CGImageRef) void;
pub extern fn CGContextDrawTiledImage(c: CGContextRef, rect: CGRect, image: CGImageRef) void;
pub extern fn CGContextGetInterpolationQuality(c: CGContextRef) CGInterpolationQuality;
pub extern fn CGContextSetInterpolationQuality(c: CGContextRef, quality: CGInterpolationQuality) void;
pub extern fn CGContextSetShadowWithColor(c: CGContextRef, offset: CGSize, blur: CGFloat, color: CGColorRef) void;
pub extern fn CGContextSetShadow(c: CGContextRef, offset: CGSize, blur: CGFloat) void;
pub extern fn CGContextDrawLinearGradient(c: CGContextRef, gradient: CGGradientRef, startPoint: CGPoint, endPoint: CGPoint, options: CGGradientDrawingOptions) void;
pub extern fn CGContextDrawRadialGradient(c: CGContextRef, gradient: CGGradientRef, startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat, options: CGGradientDrawingOptions) void;
pub extern fn CGContextDrawShading(c: CGContextRef, shading: CGShadingRef) void;
pub extern fn CGContextSetCharacterSpacing(c: CGContextRef, spacing: CGFloat) void;
pub extern fn CGContextSetTextPosition(c: CGContextRef, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextGetTextPosition(c: CGContextRef) CGPoint;
pub extern fn CGContextSetTextMatrix(c: CGContextRef, t: CGAffineTransform) void;
pub extern fn CGContextGetTextMatrix(c: CGContextRef) CGAffineTransform;
pub extern fn CGContextSetTextDrawingMode(c: CGContextRef, mode: CGTextDrawingMode) void;
pub extern fn CGContextSetFont(c: CGContextRef, font: CGFontRef) void;
pub extern fn CGContextSetFontSize(c: CGContextRef, size: CGFloat) void;
pub extern fn CGContextShowGlyphsAtPositions(c: CGContextRef, glyphs: [*c]const CGGlyph, Lpositions: [*c]const CGPoint, count: usize) void;
pub extern fn CGContextDrawPDFPage(c: CGContextRef, page: CGPDFPageRef) void;
pub extern fn CGContextBeginPage(c: CGContextRef, mediaBox: [*c]const CGRect) void;
pub extern fn CGContextEndPage(c: CGContextRef) void;
pub extern fn CGContextRetain(c: CGContextRef) CGContextRef;
pub extern fn CGContextRelease(c: CGContextRef) void;
pub extern fn CGContextFlush(c: CGContextRef) void;
pub extern fn CGContextSynchronize(c: CGContextRef) void;
pub extern fn CGContextSetShouldAntialias(c: CGContextRef, shouldAntialias: bool) void;
pub extern fn CGContextSetAllowsAntialiasing(c: CGContextRef, allowsAntialiasing: bool) void;
pub extern fn CGContextSetShouldSmoothFonts(c: CGContextRef, shouldSmoothFonts: bool) void;
pub extern fn CGContextSetAllowsFontSmoothing(c: CGContextRef, allowsFontSmoothing: bool) void;
pub extern fn CGContextSetShouldSubpixelPositionFonts(c: CGContextRef, shouldSubpixelPositionFonts: bool) void;
pub extern fn CGContextSetAllowsFontSubpixelPositioning(c: CGContextRef, allowsFontSubpixelPositioning: bool) void;
pub extern fn CGContextSetShouldSubpixelQuantizeFonts(c: CGContextRef, shouldSubpixelQuantizeFonts: bool) void;
pub extern fn CGContextSetAllowsFontSubpixelQuantization(c: CGContextRef, allowsFontSubpixelQuantization: bool) void;
pub extern fn CGContextBeginTransparencyLayer(c: CGContextRef, auxiliaryInfo: CFDictionaryRef) void;
pub extern fn CGContextBeginTransparencyLayerWithRect(c: CGContextRef, rect: CGRect, auxInfo: CFDictionaryRef) void;
pub extern fn CGContextEndTransparencyLayer(c: CGContextRef) void;
pub extern fn CGContextGetUserSpaceToDeviceSpaceTransform(c: CGContextRef) CGAffineTransform;
pub extern fn CGContextConvertPointToDeviceSpace(c: CGContextRef, point: CGPoint) CGPoint;
pub extern fn CGContextConvertPointToUserSpace(c: CGContextRef, point: CGPoint) CGPoint;
pub extern fn CGContextConvertSizeToDeviceSpace(c: CGContextRef, size: CGSize) CGSize;
pub extern fn CGContextConvertSizeToUserSpace(c: CGContextRef, size: CGSize) CGSize;
pub extern fn CGContextConvertRectToDeviceSpace(c: CGContextRef, rect: CGRect) CGRect;
pub extern fn CGContextConvertRectToUserSpace(c: CGContextRef, rect: CGRect) CGRect;
pub extern fn CGContextSelectFont(c: CGContextRef, name: [*c]const u8, size: CGFloat, textEncoding: CGTextEncoding) void;
pub extern fn CGContextShowText(c: CGContextRef, string: [*c]const u8, length: usize) void;
pub extern fn CGContextShowTextAtPoint(c: CGContextRef, x: CGFloat, y: CGFloat, string: [*c]const u8, length: usize) void;
pub extern fn CGContextShowGlyphs(c: CGContextRef, g: [*c]const CGGlyph, count: usize) void;
pub extern fn CGContextShowGlyphsAtPoint(c: CGContextRef, x: CGFloat, y: CGFloat, glyphs: [*c]const CGGlyph, count: usize) void;
pub extern fn CGContextShowGlyphsWithAdvances(c: CGContextRef, glyphs: [*c]const CGGlyph, advances: [*c]const CGSize, count: usize) void;
pub extern fn CGContextDrawPDFDocument(c: CGContextRef, rect: CGRect, document: CGPDFDocumentRef, page: c_int) void;
pub const CGBitmapContextReleaseDataCallback = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub extern fn CGBitmapContextCreateWithData(data: ?*anyopaque, width: usize, height: usize, bitsPerComponent: usize, bytesPerRow: usize, space: CGColorSpaceRef, bitmapInfo: u32, releaseCallback: CGBitmapContextReleaseDataCallback, releaseInfo: ?*anyopaque) CGContextRef;
pub extern fn CGBitmapContextCreate(data: ?*anyopaque, width: usize, height: usize, bitsPerComponent: usize, bytesPerRow: usize, space: CGColorSpaceRef, bitmapInfo: u32) CGContextRef;
pub extern fn CGBitmapContextGetData(context: CGContextRef) ?*anyopaque;
pub extern fn CGBitmapContextGetWidth(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetHeight(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetBitsPerComponent(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetBitsPerPixel(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetBytesPerRow(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetColorSpace(context: CGContextRef) CGColorSpaceRef;
pub extern fn CGBitmapContextGetAlphaInfo(context: CGContextRef) CGImageAlphaInfo;
pub extern fn CGBitmapContextGetBitmapInfo(context: CGContextRef) CGBitmapInfo;
pub extern fn CGBitmapContextCreateImage(context: CGContextRef) CGImageRef;
pub const struct_CGColorConversionInfo = opaque {};
pub const CGColorConversionInfoRef = ?*const struct_CGColorConversionInfo;
pub extern fn CGColorConversionInfoGetTypeID() CFTypeID;
pub const CGColorConversionInfoTransformType = u32;
pub const kCGColorConversionTransformFromSpace: c_int = 0;
pub const kCGColorConversionTransformToSpace: c_int = 1;
pub const kCGColorConversionTransformApplySpace: c_int = 2;
const enum_unnamed_44 = c_uint;
pub extern fn CGColorConversionInfoCreate(src: CGColorSpaceRef, dst: CGColorSpaceRef) CGColorConversionInfoRef;
pub extern fn CGColorConversionInfoCreateWithOptions(src: CGColorSpaceRef, dst: CGColorSpaceRef, options: CFDictionaryRef) CGColorConversionInfoRef;
pub extern fn CGColorConversionInfoCreateFromList(options: CFDictionaryRef, CGColorSpaceRef, CGColorConversionInfoTransformType, CGColorRenderingIntent, ...) CGColorConversionInfoRef;
pub extern fn CGColorConversionInfoCreateFromListWithArguments(options: CFDictionaryRef, CGColorSpaceRef, CGColorConversionInfoTransformType, CGColorRenderingIntent, va_list) CGColorConversionInfoRef;
pub extern const kCGColorConversionBlackPointCompensation: CFStringRef;
pub extern const kCGColorConversionTRCSize: CFStringRef;
pub const __darwin_nl_item = c_int;
pub const __darwin_wctrans_t = c_int;
pub const __darwin_wctype_t = __uint32_t;
pub const ct_rune_t = __darwin_ct_rune_t;
pub const rune_t = __darwin_rune_t;
pub const wint_t = __darwin_wint_t;
pub const _RuneEntry = extern struct {
    __min: __darwin_rune_t = @import("std").mem.zeroes(__darwin_rune_t),
    __max: __darwin_rune_t = @import("std").mem.zeroes(__darwin_rune_t),
    __map: __darwin_rune_t = @import("std").mem.zeroes(__darwin_rune_t),
    __types: [*c]__uint32_t = @import("std").mem.zeroes([*c]__uint32_t),
};
pub const _RuneRange = extern struct {
    __nranges: c_int = @import("std").mem.zeroes(c_int),
    __ranges: [*c]_RuneEntry = @import("std").mem.zeroes([*c]_RuneEntry),
};
pub const _RuneCharClass = extern struct {
    __name: [14]u8 = @import("std").mem.zeroes([14]u8),
    __mask: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const _RuneLocale = extern struct {
    __magic: [8]u8 = @import("std").mem.zeroes([8]u8),
    __encoding: [32]u8 = @import("std").mem.zeroes([32]u8),
    __sgetrune: ?*const fn ([*c]const u8, __darwin_size_t, [*c][*c]const u8) callconv(.C) __darwin_rune_t = @import("std").mem.zeroes(?*const fn ([*c]const u8, __darwin_size_t, [*c][*c]const u8) callconv(.C) __darwin_rune_t),
    __sputrune: ?*const fn (__darwin_rune_t, [*c]u8, __darwin_size_t, [*c][*c]u8) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (__darwin_rune_t, [*c]u8, __darwin_size_t, [*c][*c]u8) callconv(.C) c_int),
    __invalid_rune: __darwin_rune_t = @import("std").mem.zeroes(__darwin_rune_t),
    __runetype: [256]__uint32_t = @import("std").mem.zeroes([256]__uint32_t),
    __maplower: [256]__darwin_rune_t = @import("std").mem.zeroes([256]__darwin_rune_t),
    __mapupper: [256]__darwin_rune_t = @import("std").mem.zeroes([256]__darwin_rune_t),
    __runetype_ext: _RuneRange = @import("std").mem.zeroes(_RuneRange),
    __maplower_ext: _RuneRange = @import("std").mem.zeroes(_RuneRange),
    __mapupper_ext: _RuneRange = @import("std").mem.zeroes(_RuneRange),
    __variable: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    __variable_len: c_int = @import("std").mem.zeroes(c_int),
    __ncharclasses: c_int = @import("std").mem.zeroes(c_int),
    __charclasses: [*c]_RuneCharClass = @import("std").mem.zeroes([*c]_RuneCharClass),
};
pub extern var _DefaultRuneLocale: _RuneLocale;
pub extern var _CurrentRuneLocale: [*c]_RuneLocale;
pub extern fn ___runetype(__darwin_ct_rune_t) c_ulong;
pub extern fn ___tolower(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub extern fn ___toupper(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub fn isascii(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return @intFromBool((_c & ~@as(c_int, 127)) == @as(c_int, 0));
}
pub extern fn __maskrune(__darwin_ct_rune_t, c_ulong) c_int;
pub fn __istype(arg__c: __darwin_ct_rune_t, arg__f: c_ulong) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    var _f = arg__f;
    _ = &_f;
    return if (isascii(_c) != 0) @intFromBool(!!((@as(c_ulong, @bitCast(@as(c_ulong, _DefaultRuneLocale.__runetype[@as(c_uint, @intCast(_c))]))) & _f) != 0)) else @intFromBool(!!(__maskrune(_c, _f) != 0));
}
pub fn __isctype(arg__c: __darwin_ct_rune_t, arg__f: c_ulong) callconv(.C) __darwin_ct_rune_t {
    var _c = arg__c;
    _ = &_c;
    var _f = arg__f;
    _ = &_f;
    return if ((_c < @as(c_int, 0)) or (_c >= (@as(c_int, 1) << @intCast(8)))) @as(c_int, 0) else @intFromBool(!!((@as(c_ulong, @bitCast(@as(c_ulong, _DefaultRuneLocale.__runetype[@as(c_uint, @intCast(_c))]))) & _f) != 0));
}
pub extern fn __toupper(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub extern fn __tolower(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub fn __wcwidth(arg__c: __darwin_ct_rune_t) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    var _x: c_uint = undefined;
    _ = &_x;
    if (_c == @as(c_int, 0)) return @as(c_int, 0);
    _x = @as(c_uint, @bitCast(__maskrune(_c, @as(c_ulong, @bitCast(@as(c_long, 3758096384) | @as(c_long, 262144))))));
    if ((@as(c_long, @bitCast(@as(c_ulong, _x))) & @as(c_long, 3758096384)) != @as(c_long, @bitCast(@as(c_long, @as(c_int, 0))))) return @as(c_int, @bitCast(@as(c_int, @truncate((@as(c_long, @bitCast(@as(c_ulong, _x))) & @as(c_long, 3758096384)) >> @intCast(30)))));
    return if ((@as(c_long, @bitCast(@as(c_ulong, _x))) & @as(c_long, 262144)) != @as(c_long, @bitCast(@as(c_long, @as(c_int, 0))))) @as(c_int, 1) else -@as(c_int, 1);
}
pub fn isalnum(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 256) | @as(c_long, 1024))));
}
pub fn isalpha(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 256))));
}
pub fn isblank(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 131072))));
}
pub fn iscntrl(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 512))));
}
pub fn isdigit(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __isctype(_c, @as(c_ulong, @bitCast(@as(c_long, 1024))));
}
pub fn isgraph(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 2048))));
}
pub fn islower(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 4096))));
}
pub fn isprint(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 262144))));
}
pub fn ispunct(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 8192))));
}
pub fn isspace(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 16384))));
}
pub fn isupper(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 32768))));
}
pub fn isxdigit(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __isctype(_c, @as(c_ulong, @bitCast(@as(c_long, 65536))));
}
pub fn toascii(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return _c & @as(c_int, 127);
}
pub fn tolower(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __tolower(_c);
}
pub fn toupper(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __toupper(_c);
}
pub fn digittoint(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __maskrune(_c, @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 15)))));
}
pub fn ishexnumber(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 65536))));
}
pub fn isideogram(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 524288))));
}
pub fn isnumber(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 1024))));
}
pub fn isphonogram(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 2097152))));
}
pub fn isrune(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 4294967280))));
}
pub fn isspecial(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    _ = &_c;
    return __istype(_c, @as(c_ulong, @bitCast(@as(c_long, 1048576))));
}
pub extern fn __error() [*c]c_int;
pub const struct_lconv = extern struct {
    decimal_point: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    thousands_sep: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    grouping: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    int_curr_symbol: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    currency_symbol: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    mon_decimal_point: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    mon_thousands_sep: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    mon_grouping: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    positive_sign: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    negative_sign: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    int_frac_digits: u8 = @import("std").mem.zeroes(u8),
    frac_digits: u8 = @import("std").mem.zeroes(u8),
    p_cs_precedes: u8 = @import("std").mem.zeroes(u8),
    p_sep_by_space: u8 = @import("std").mem.zeroes(u8),
    n_cs_precedes: u8 = @import("std").mem.zeroes(u8),
    n_sep_by_space: u8 = @import("std").mem.zeroes(u8),
    p_sign_posn: u8 = @import("std").mem.zeroes(u8),
    n_sign_posn: u8 = @import("std").mem.zeroes(u8),
    int_p_cs_precedes: u8 = @import("std").mem.zeroes(u8),
    int_n_cs_precedes: u8 = @import("std").mem.zeroes(u8),
    int_p_sep_by_space: u8 = @import("std").mem.zeroes(u8),
    int_n_sep_by_space: u8 = @import("std").mem.zeroes(u8),
    int_p_sign_posn: u8 = @import("std").mem.zeroes(u8),
    int_n_sign_posn: u8 = @import("std").mem.zeroes(u8),
};
pub extern fn localeconv() [*c]struct_lconv;
pub extern fn setlocale(c_int, [*c]const u8) [*c]u8;
pub const float_t = f32;
pub const double_t = f64;
pub extern fn __math_errhandling() c_int;
pub extern fn __fpclassifyf(f32) c_int;
pub extern fn __fpclassifyd(f64) c_int;
pub extern fn __fpclassifyl(c_longdouble) c_int;
pub inline fn __inline_isfinitef(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool((__x == __x) and (__builtin_fabsf(__x) != __builtin_inff()));
} // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:194:49: warning: TODO implement function '__builtin_inf' in std.zig.c_builtins
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:193:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isfinited(arg___x: f64) c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:197:26: warning: TODO implement function '__builtin_fabsl' in std.zig.c_builtins
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:196:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isfinitel(arg___x: c_longdouble) c_int;
pub inline fn __inline_isinff(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool(__builtin_fabsf(__x) == __builtin_inff());
} // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:203:35: warning: TODO implement function '__builtin_inf' in std.zig.c_builtins
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:202:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isinfd(arg___x: f64) c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:206:12: warning: TODO implement function '__builtin_fabsl' in std.zig.c_builtins
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:205:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isinfl(arg___x: c_longdouble) c_int;
pub inline fn __inline_isnanf(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool(__x != __x);
}
pub inline fn __inline_isnand(arg___x: f64) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool(__x != __x);
}
pub inline fn __inline_isnanl(arg___x: c_longdouble) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool(__x != __x);
}
pub inline fn __inline_isnormalf(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool((__inline_isfinitef(__x) != 0) and (__builtin_fabsf(__x) >= 0.000000000000000000000000000000000000011754943508222875));
}
pub inline fn __inline_isnormald(arg___x: f64) c_int {
    var __x = arg___x;
    _ = &__x;
    return @intFromBool((__inline_isfinited(__x) != 0) and (__builtin_fabs(__x) >= 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014));
} // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:250:39: warning: TODO implement function '__builtin_fabsl' in std.zig.c_builtins
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:249:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isnormall(arg___x: c_longdouble) c_int;
pub inline fn __inline_signbitf(arg___x: f32) c_int {
    var __x = arg___x;
    _ = &__x;
    const union_unnamed_45 = extern union {
        __f: f32,
        __u: c_uint,
    };
    _ = &union_unnamed_45;
    var __u: union_unnamed_45 = undefined;
    _ = &__u;
    __u.__f = __x;
    return @as(c_int, @bitCast(__u.__u >> @intCast(31)));
}
pub inline fn __inline_signbitd(arg___x: f64) c_int {
    var __x = arg___x;
    _ = &__x;
    const union_unnamed_46 = extern union {
        __f: f64,
        __u: c_ulonglong,
    };
    _ = &union_unnamed_46;
    var __u: union_unnamed_46 = undefined;
    _ = &__u;
    __u.__f = __x;
    return @as(c_int, @bitCast(@as(c_uint, @truncate(__u.__u >> @intCast(63)))));
}
pub inline fn __inline_signbitl(arg___x: c_longdouble) c_int {
    var __x = arg___x;
    _ = &__x;
    const union_unnamed_47 = extern union {
        __f: c_longdouble,
        __u: c_ulonglong,
    };
    _ = &union_unnamed_47;
    var __u: union_unnamed_47 = undefined;
    _ = &__u;
    __u.__f = __x;
    return @as(c_int, @bitCast(@as(c_uint, @truncate(__u.__u >> @intCast(63)))));
}
pub extern fn acosf(f32) f32;
pub extern fn acos(f64) f64;
pub extern fn acosl(c_longdouble) c_longdouble;
pub extern fn asinf(f32) f32;
pub extern fn asin(f64) f64;
pub extern fn asinl(c_longdouble) c_longdouble;
pub extern fn atanf(f32) f32;
pub extern fn atan(f64) f64;
pub extern fn atanl(c_longdouble) c_longdouble;
pub extern fn atan2f(f32, f32) f32;
pub extern fn atan2(f64, f64) f64;
pub extern fn atan2l(c_longdouble, c_longdouble) c_longdouble;
pub extern fn cosf(f32) f32;
pub extern fn cos(f64) f64;
pub extern fn cosl(c_longdouble) c_longdouble;
pub extern fn sinf(f32) f32;
pub extern fn sin(f64) f64;
pub extern fn sinl(c_longdouble) c_longdouble;
pub extern fn tanf(f32) f32;
pub extern fn tan(f64) f64;
pub extern fn tanl(c_longdouble) c_longdouble;
pub extern fn acoshf(f32) f32;
pub extern fn acosh(f64) f64;
pub extern fn acoshl(c_longdouble) c_longdouble;
pub extern fn asinhf(f32) f32;
pub extern fn asinh(f64) f64;
pub extern fn asinhl(c_longdouble) c_longdouble;
pub extern fn atanhf(f32) f32;
pub extern fn atanh(f64) f64;
pub extern fn atanhl(c_longdouble) c_longdouble;
pub extern fn coshf(f32) f32;
pub extern fn cosh(f64) f64;
pub extern fn coshl(c_longdouble) c_longdouble;
pub extern fn sinhf(f32) f32;
pub extern fn sinh(f64) f64;
pub extern fn sinhl(c_longdouble) c_longdouble;
pub extern fn tanhf(f32) f32;
pub extern fn tanh(f64) f64;
pub extern fn tanhl(c_longdouble) c_longdouble;
pub extern fn expf(f32) f32;
pub extern fn exp(f64) f64;
pub extern fn expl(c_longdouble) c_longdouble;
pub extern fn exp2f(f32) f32;
pub extern fn exp2(f64) f64;
pub extern fn exp2l(c_longdouble) c_longdouble;
pub extern fn expm1f(f32) f32;
pub extern fn expm1(f64) f64;
pub extern fn expm1l(c_longdouble) c_longdouble;
pub extern fn logf(f32) f32;
pub extern fn log(f64) f64;
pub extern fn logl(c_longdouble) c_longdouble;
pub extern fn log10f(f32) f32;
pub extern fn log10(f64) f64;
pub extern fn log10l(c_longdouble) c_longdouble;
pub extern fn log2f(f32) f32;
pub extern fn log2(f64) f64;
pub extern fn log2l(c_longdouble) c_longdouble;
pub extern fn log1pf(f32) f32;
pub extern fn log1p(f64) f64;
pub extern fn log1pl(c_longdouble) c_longdouble;
pub extern fn logbf(f32) f32;
pub extern fn logb(f64) f64;
pub extern fn logbl(c_longdouble) c_longdouble;
pub extern fn modff(f32, [*c]f32) f32;
pub extern fn modf(f64, [*c]f64) f64;
pub extern fn modfl(c_longdouble, [*c]c_longdouble) c_longdouble;
pub extern fn ldexpf(f32, c_int) f32;
pub extern fn ldexp(f64, c_int) f64;
pub extern fn ldexpl(c_longdouble, c_int) c_longdouble;
pub extern fn frexpf(f32, [*c]c_int) f32;
pub extern fn frexp(f64, [*c]c_int) f64;
pub extern fn frexpl(c_longdouble, [*c]c_int) c_longdouble;
pub extern fn ilogbf(f32) c_int;
pub extern fn ilogb(f64) c_int;
pub extern fn ilogbl(c_longdouble) c_int;
pub extern fn scalbnf(f32, c_int) f32;
pub extern fn scalbn(f64, c_int) f64;
pub extern fn scalbnl(c_longdouble, c_int) c_longdouble;
pub extern fn scalblnf(f32, c_long) f32;
pub extern fn scalbln(f64, c_long) f64;
pub extern fn scalblnl(c_longdouble, c_long) c_longdouble;
pub extern fn fabsf(f32) f32;
pub extern fn fabs(f64) f64;
pub extern fn fabsl(c_longdouble) c_longdouble;
pub extern fn cbrtf(f32) f32;
pub extern fn cbrt(f64) f64;
pub extern fn cbrtl(c_longdouble) c_longdouble;
pub extern fn hypotf(f32, f32) f32;
pub extern fn hypot(f64, f64) f64;
pub extern fn hypotl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn powf(f32, f32) f32;
pub extern fn pow(f64, f64) f64;
pub extern fn powl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn sqrtf(f32) f32;
pub extern fn sqrt(f64) f64;
pub extern fn sqrtl(c_longdouble) c_longdouble;
pub extern fn erff(f32) f32;
pub extern fn erf(f64) f64;
pub extern fn erfl(c_longdouble) c_longdouble;
pub extern fn erfcf(f32) f32;
pub extern fn erfc(f64) f64;
pub extern fn erfcl(c_longdouble) c_longdouble;
pub extern fn lgammaf(f32) f32;
pub extern fn lgamma(f64) f64;
pub extern fn lgammal(c_longdouble) c_longdouble;
pub extern fn tgammaf(f32) f32;
pub extern fn tgamma(f64) f64;
pub extern fn tgammal(c_longdouble) c_longdouble;
pub extern fn ceilf(f32) f32;
pub extern fn ceil(f64) f64;
pub extern fn ceill(c_longdouble) c_longdouble;
pub extern fn floorf(f32) f32;
pub extern fn floor(f64) f64;
pub extern fn floorl(c_longdouble) c_longdouble;
pub extern fn nearbyintf(f32) f32;
pub extern fn nearbyint(f64) f64;
pub extern fn nearbyintl(c_longdouble) c_longdouble;
pub extern fn rintf(f32) f32;
pub extern fn rint(f64) f64;
pub extern fn rintl(c_longdouble) c_longdouble;
pub extern fn lrintf(f32) c_long;
pub extern fn lrint(f64) c_long;
pub extern fn lrintl(c_longdouble) c_long;
pub extern fn roundf(f32) f32;
pub extern fn round(f64) f64;
pub extern fn roundl(c_longdouble) c_longdouble;
pub extern fn lroundf(f32) c_long;
pub extern fn lround(f64) c_long;
pub extern fn lroundl(c_longdouble) c_long;
pub extern fn llrintf(f32) c_longlong;
pub extern fn llrint(f64) c_longlong;
pub extern fn llrintl(c_longdouble) c_longlong;
pub extern fn llroundf(f32) c_longlong;
pub extern fn llround(f64) c_longlong;
pub extern fn llroundl(c_longdouble) c_longlong;
pub extern fn truncf(f32) f32;
pub extern fn trunc(f64) f64;
pub extern fn truncl(c_longdouble) c_longdouble;
pub extern fn fmodf(f32, f32) f32;
pub extern fn fmod(f64, f64) f64;
pub extern fn fmodl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remainderf(f32, f32) f32;
pub extern fn remainder(f64, f64) f64;
pub extern fn remainderl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remquof(f32, f32, [*c]c_int) f32;
pub extern fn remquo(f64, f64, [*c]c_int) f64;
pub extern fn remquol(c_longdouble, c_longdouble, [*c]c_int) c_longdouble;
pub extern fn copysignf(f32, f32) f32;
pub extern fn copysign(f64, f64) f64;
pub extern fn copysignl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nanf([*c]const u8) f32;
pub extern fn nan([*c]const u8) f64;
pub extern fn nanl([*c]const u8) c_longdouble;
pub extern fn nextafterf(f32, f32) f32;
pub extern fn nextafter(f64, f64) f64;
pub extern fn nextafterl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nexttoward(f64, c_longdouble) f64;
pub extern fn nexttowardf(f32, c_longdouble) f32;
pub extern fn nexttowardl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fdimf(f32, f32) f32;
pub extern fn fdim(f64, f64) f64;
pub extern fn fdiml(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fmaxf(f32, f32) f32;
pub extern fn fmax(f64, f64) f64;
pub extern fn fmaxl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fminf(f32, f32) f32;
pub extern fn fmin(f64, f64) f64;
pub extern fn fminl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fmaf(f32, f32, f32) f32;
pub extern fn fma(f64, f64, f64) f64;
pub extern fn fmal(c_longdouble, c_longdouble, c_longdouble) c_longdouble;
pub extern fn __exp10f(f32) f32;
pub extern fn __exp10(f64) f64;
pub const struct___float2 = extern struct {
    __sinval: f32 = @import("std").mem.zeroes(f32),
    __cosval: f32 = @import("std").mem.zeroes(f32),
};
pub inline fn __sincosf(arg___x: f32, arg___sinp: [*c]f32, arg___cosp: [*c]f32) void {
    var __x = arg___x;
    _ = &__x;
    var __sinp = arg___sinp;
    _ = &__sinp;
    var __cosp = arg___cosp;
    _ = &__cosp;
    const __stret: struct___float2 = __sincosf_stret(__x);
    _ = &__stret;
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub const struct___double2 = extern struct {
    __sinval: f64 = @import("std").mem.zeroes(f64),
    __cosval: f64 = @import("std").mem.zeroes(f64),
};
pub inline fn __sincos(arg___x: f64, arg___sinp: [*c]f64, arg___cosp: [*c]f64) void {
    var __x = arg___x;
    _ = &__x;
    var __sinp = arg___sinp;
    _ = &__sinp;
    var __cosp = arg___cosp;
    _ = &__cosp;
    const __stret: struct___double2 = __sincos_stret(__x);
    _ = &__stret;
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub extern fn __cospif(f32) f32;
pub extern fn __cospi(f64) f64;
pub extern fn __sinpif(f32) f32;
pub extern fn __sinpi(f64) f64;
pub extern fn __tanpif(f32) f32;
pub extern fn __tanpi(f64) f64;
pub inline fn __sincospif(arg___x: f32, arg___sinp: [*c]f32, arg___cosp: [*c]f32) void {
    var __x = arg___x;
    _ = &__x;
    var __sinp = arg___sinp;
    _ = &__sinp;
    var __cosp = arg___cosp;
    _ = &__cosp;
    const __stret: struct___float2 = __sincospif_stret(__x);
    _ = &__stret;
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub inline fn __sincospi(arg___x: f64, arg___sinp: [*c]f64, arg___cosp: [*c]f64) void {
    var __x = arg___x;
    _ = &__x;
    var __sinp = arg___sinp;
    _ = &__sinp;
    var __cosp = arg___cosp;
    _ = &__cosp;
    const __stret: struct___double2 = __sincospi_stret(__x);
    _ = &__stret;
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub extern fn __sincosf_stret(f32) struct___float2;
pub extern fn __sincos_stret(f64) struct___double2;
pub extern fn __sincospif_stret(f32) struct___float2;
pub extern fn __sincospi_stret(f64) struct___double2;
pub extern fn j0(f64) f64;
pub extern fn j1(f64) f64;
pub extern fn jn(c_int, f64) f64;
pub extern fn y0(f64) f64;
pub extern fn y1(f64) f64;
pub extern fn yn(c_int, f64) f64;
pub extern fn scalb(f64, f64) f64;
pub extern var signgam: c_int;
pub const struct_exception = extern struct {
    type: c_int = @import("std").mem.zeroes(c_int),
    name: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    arg1: f64 = @import("std").mem.zeroes(f64),
    arg2: f64 = @import("std").mem.zeroes(f64),
    retval: f64 = @import("std").mem.zeroes(f64),
};
pub const jmp_buf = [48]c_int;
pub const sigjmp_buf = [49]c_int;
pub extern fn setjmp([*c]c_int) c_int;
pub extern fn longjmp([*c]c_int, c_int) noreturn;
pub extern fn _setjmp([*c]c_int) c_int;
pub extern fn _longjmp([*c]c_int, c_int) noreturn;
pub extern fn sigsetjmp([*c]c_int, c_int) c_int;
pub extern fn siglongjmp([*c]c_int, c_int) noreturn;
pub extern fn longjmperror() void;
pub const sig_atomic_t = c_int;
pub const struct___darwin_arm_exception_state = extern struct {
    __exception: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __fsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __far: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_exception_state64 = extern struct {
    __far: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __esr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __exception: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_thread_state = extern struct {
    __r: [13]__uint32_t = @import("std").mem.zeroes([13]__uint32_t),
    __sp: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __lr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __pc: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __cpsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_thread_state64 = extern struct {
    __x: [29]__uint64_t = @import("std").mem.zeroes([29]__uint64_t),
    __fp: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __lr: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __sp: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __pc: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __cpsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __pad: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_vfp_state = extern struct {
    __r: [64]__uint32_t = @import("std").mem.zeroes([64]__uint32_t),
    __fpscr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const __uint128_t = u128;
pub const struct___darwin_arm_neon_state64 = extern struct {
    __v: [32]__uint128_t = @import("std").mem.zeroes([32]__uint128_t),
    __fpsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __fpcr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___darwin_arm_neon_state = extern struct {
    __v: [16]__uint128_t = @import("std").mem.zeroes([16]__uint128_t),
    __fpsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __fpcr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
};
pub const struct___arm_pagein_state = extern struct {
    __pagein_error: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct___arm_legacy_debug_state = extern struct {
    __bvr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __bcr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __wvr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __wcr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
};
pub const struct___darwin_arm_debug_state32 = extern struct {
    __bvr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __bcr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __wvr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __wcr: [16]__uint32_t = @import("std").mem.zeroes([16]__uint32_t),
    __mdscr_el1: __uint64_t = @import("std").mem.zeroes(__uint64_t),
};
pub const struct___darwin_arm_debug_state64 = extern struct {
    __bvr: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
    __bcr: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
    __wvr: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
    __wcr: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
    __mdscr_el1: __uint64_t = @import("std").mem.zeroes(__uint64_t),
};
pub const struct___darwin_arm_cpmu_state64 = extern struct {
    __ctrs: [16]__uint64_t = @import("std").mem.zeroes([16]__uint64_t),
};
pub const struct___darwin_mcontext32 = extern struct {
    __es: struct___darwin_arm_exception_state = @import("std").mem.zeroes(struct___darwin_arm_exception_state),
    __ss: struct___darwin_arm_thread_state = @import("std").mem.zeroes(struct___darwin_arm_thread_state),
    __fs: struct___darwin_arm_vfp_state = @import("std").mem.zeroes(struct___darwin_arm_vfp_state),
};
pub const struct___darwin_mcontext64 = extern struct {
    __es: struct___darwin_arm_exception_state64 = @import("std").mem.zeroes(struct___darwin_arm_exception_state64),
    __ss: struct___darwin_arm_thread_state64 = @import("std").mem.zeroes(struct___darwin_arm_thread_state64),
    __ns: struct___darwin_arm_neon_state64 = @import("std").mem.zeroes(struct___darwin_arm_neon_state64),
};
pub const mcontext_t = [*c]struct___darwin_mcontext64;
pub const struct___darwin_sigaltstack = extern struct {
    ss_sp: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ss_size: __darwin_size_t = @import("std").mem.zeroes(__darwin_size_t),
    ss_flags: c_int = @import("std").mem.zeroes(c_int),
};
pub const stack_t = struct___darwin_sigaltstack;
pub const struct___darwin_ucontext = extern struct {
    uc_onstack: c_int = @import("std").mem.zeroes(c_int),
    uc_sigmask: __darwin_sigset_t = @import("std").mem.zeroes(__darwin_sigset_t),
    uc_stack: struct___darwin_sigaltstack = @import("std").mem.zeroes(struct___darwin_sigaltstack),
    uc_link: [*c]struct___darwin_ucontext = @import("std").mem.zeroes([*c]struct___darwin_ucontext),
    uc_mcsize: __darwin_size_t = @import("std").mem.zeroes(__darwin_size_t),
    uc_mcontext: [*c]struct___darwin_mcontext64 = @import("std").mem.zeroes([*c]struct___darwin_mcontext64),
};
pub const ucontext_t = struct___darwin_ucontext;
pub const sigset_t = __darwin_sigset_t;
pub const union_sigval = extern union {
    sival_int: c_int,
    sival_ptr: ?*anyopaque,
};
pub const struct_sigevent = extern struct {
    sigev_notify: c_int = @import("std").mem.zeroes(c_int),
    sigev_signo: c_int = @import("std").mem.zeroes(c_int),
    sigev_value: union_sigval = @import("std").mem.zeroes(union_sigval),
    sigev_notify_function: ?*const fn (union_sigval) callconv(.C) void = @import("std").mem.zeroes(?*const fn (union_sigval) callconv(.C) void),
    sigev_notify_attributes: [*c]pthread_attr_t = @import("std").mem.zeroes([*c]pthread_attr_t),
};
pub const struct___siginfo = extern struct {
    si_signo: c_int = @import("std").mem.zeroes(c_int),
    si_errno: c_int = @import("std").mem.zeroes(c_int),
    si_code: c_int = @import("std").mem.zeroes(c_int),
    si_pid: pid_t = @import("std").mem.zeroes(pid_t),
    si_uid: uid_t = @import("std").mem.zeroes(uid_t),
    si_status: c_int = @import("std").mem.zeroes(c_int),
    si_addr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    si_value: union_sigval = @import("std").mem.zeroes(union_sigval),
    si_band: c_long = @import("std").mem.zeroes(c_long),
    __pad: [7]c_ulong = @import("std").mem.zeroes([7]c_ulong),
};
pub const siginfo_t = struct___siginfo;
pub const union___sigaction_u = extern union {
    __sa_handler: ?*const fn (c_int) callconv(.C) void,
    __sa_sigaction: ?*const fn (c_int, [*c]struct___siginfo, ?*anyopaque) callconv(.C) void,
};
pub const struct___sigaction = extern struct {
    __sigaction_u: union___sigaction_u = @import("std").mem.zeroes(union___sigaction_u),
    sa_tramp: ?*const fn (?*anyopaque, c_int, c_int, [*c]siginfo_t, ?*anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, c_int, c_int, [*c]siginfo_t, ?*anyopaque) callconv(.C) void),
    sa_mask: sigset_t = @import("std").mem.zeroes(sigset_t),
    sa_flags: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_sigaction = extern struct {
    __sigaction_u: union___sigaction_u = @import("std").mem.zeroes(union___sigaction_u),
    sa_mask: sigset_t = @import("std").mem.zeroes(sigset_t),
    sa_flags: c_int = @import("std").mem.zeroes(c_int),
};
pub const sig_t = ?*const fn (c_int) callconv(.C) void;
pub const struct_sigvec = extern struct {
    sv_handler: ?*const fn (c_int) callconv(.C) void = @import("std").mem.zeroes(?*const fn (c_int) callconv(.C) void),
    sv_mask: c_int = @import("std").mem.zeroes(c_int),
    sv_flags: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_sigstack = extern struct {
    ss_sp: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    ss_onstack: c_int = @import("std").mem.zeroes(c_int),
};
pub extern fn signal(c_int, ?*const fn (c_int) callconv(.C) void) ?*const fn (c_int) callconv(.C) void;
pub extern const sys_signame: [32][*c]const u8;
pub extern const sys_siglist: [32][*c]const u8;
pub extern fn raise(c_int) c_int;
pub extern fn bsd_signal(c_int, ?*const fn (c_int) callconv(.C) void) ?*const fn (c_int) callconv(.C) void;
pub extern fn kill(pid_t, c_int) c_int;
pub extern fn killpg(pid_t, c_int) c_int;
pub extern fn pthread_kill(pthread_t, c_int) c_int;
pub extern fn pthread_sigmask(c_int, [*c]const sigset_t, [*c]sigset_t) c_int;
pub extern fn sigaction(c_int, noalias [*c]const struct_sigaction, noalias [*c]struct_sigaction) c_int;
pub extern fn sigaddset([*c]sigset_t, c_int) c_int;
pub extern fn sigaltstack(noalias [*c]const stack_t, noalias [*c]stack_t) c_int;
pub extern fn sigdelset([*c]sigset_t, c_int) c_int;
pub extern fn sigemptyset([*c]sigset_t) c_int;
pub extern fn sigfillset([*c]sigset_t) c_int;
pub extern fn sighold(c_int) c_int;
pub extern fn sigignore(c_int) c_int;
pub extern fn siginterrupt(c_int, c_int) c_int;
pub extern fn sigismember([*c]const sigset_t, c_int) c_int;
pub extern fn sigpause(c_int) c_int;
pub extern fn sigpending([*c]sigset_t) c_int;
pub extern fn sigprocmask(c_int, noalias [*c]const sigset_t, noalias [*c]sigset_t) c_int;
pub extern fn sigrelse(c_int) c_int;
pub extern fn sigset(c_int, ?*const fn (c_int) callconv(.C) void) ?*const fn (c_int) callconv(.C) void;
pub extern fn sigsuspend([*c]const sigset_t) c_int;
pub extern fn sigwait(noalias [*c]const sigset_t, noalias [*c]c_int) c_int;
pub extern fn psignal(c_uint, [*c]const u8) void;
pub extern fn sigblock(c_int) c_int;
pub extern fn sigsetmask(c_int) c_int;
pub extern fn sigvec(c_int, [*c]struct_sigvec, [*c]struct_sigvec) c_int;
pub inline fn __sigbits(arg___signo: c_int) c_int {
    var __signo = arg___signo;
    _ = &__signo;
    return if (__signo > @as(c_int, 32)) @as(c_int, 0) else @as(c_int, 1) << @intCast(__signo - @as(c_int, 1));
}
pub extern fn renameat(c_int, [*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn renamex_np([*c]const u8, [*c]const u8, c_uint) c_int;
pub extern fn renameatx_np(c_int, [*c]const u8, c_int, [*c]const u8, c_uint) c_int;
pub const fpos_t = __darwin_off_t;
pub const struct___sbuf = extern struct {
    _base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _size: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct___sFILEX = opaque {};
pub const struct___sFILE = extern struct {
    _p: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _r: c_int = @import("std").mem.zeroes(c_int),
    _w: c_int = @import("std").mem.zeroes(c_int),
    _flags: c_short = @import("std").mem.zeroes(c_short),
    _file: c_short = @import("std").mem.zeroes(c_short),
    _bf: struct___sbuf = @import("std").mem.zeroes(struct___sbuf),
    _lbfsize: c_int = @import("std").mem.zeroes(c_int),
    _cookie: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    _close: ?*const fn (?*anyopaque) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) c_int),
    _read: ?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int),
    _seek: ?*const fn (?*anyopaque, fpos_t, c_int) callconv(.C) fpos_t = @import("std").mem.zeroes(?*const fn (?*anyopaque, fpos_t, c_int) callconv(.C) fpos_t),
    _write: ?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.C) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.C) c_int),
    _ub: struct___sbuf = @import("std").mem.zeroes(struct___sbuf),
    _extra: ?*struct___sFILEX = @import("std").mem.zeroes(?*struct___sFILEX),
    _ur: c_int = @import("std").mem.zeroes(c_int),
    _ubuf: [3]u8 = @import("std").mem.zeroes([3]u8),
    _nbuf: [1]u8 = @import("std").mem.zeroes([1]u8),
    _lb: struct___sbuf = @import("std").mem.zeroes(struct___sbuf),
    _blksize: c_int = @import("std").mem.zeroes(c_int),
    _offset: fpos_t = @import("std").mem.zeroes(fpos_t),
};
pub const FILE = struct___sFILE;
pub extern var __stdinp: [*c]FILE;
pub extern var __stdoutp: [*c]FILE;
pub extern var __stderrp: [*c]FILE;
pub extern fn clearerr([*c]FILE) void;
pub extern fn fclose([*c]FILE) c_int;
pub extern fn feof([*c]FILE) c_int;
pub extern fn ferror([*c]FILE) c_int;
pub extern fn fflush([*c]FILE) c_int;
pub extern fn fgetc([*c]FILE) c_int;
pub extern fn fgetpos(noalias [*c]FILE, [*c]fpos_t) c_int;
pub extern fn fgets(noalias [*c]u8, c_int, [*c]FILE) [*c]u8;
pub extern fn fopen(__filename: [*c]const u8, __mode: [*c]const u8) [*c]FILE;
pub extern fn fprintf([*c]FILE, [*c]const u8, ...) c_int;
pub extern fn fputc(c_int, [*c]FILE) c_int;
pub extern fn fputs(noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn fread(__ptr: ?*anyopaque, __size: c_ulong, __nitems: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn freopen(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn fscanf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn fseek([*c]FILE, c_long, c_int) c_int;
pub extern fn fsetpos([*c]FILE, [*c]const fpos_t) c_int;
pub extern fn ftell([*c]FILE) c_long;
pub extern fn fwrite(__ptr: ?*const anyopaque, __size: c_ulong, __nitems: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn getc([*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn gets([*c]u8) [*c]u8;
pub extern fn perror([*c]const u8) void;
pub extern fn printf([*c]const u8, ...) c_int;
pub extern fn putc(c_int, [*c]FILE) c_int;
pub extern fn putchar(c_int) c_int;
pub extern fn puts([*c]const u8) c_int;
pub extern fn remove([*c]const u8) c_int;
pub extern fn rename(__old: [*c]const u8, __new: [*c]const u8) c_int;
pub extern fn rewind([*c]FILE) void;
pub extern fn scanf(noalias [*c]const u8, ...) c_int;
pub extern fn setbuf(noalias [*c]FILE, noalias [*c]u8) void;
pub extern fn setvbuf(noalias [*c]FILE, noalias [*c]u8, c_int, usize) c_int;
pub extern fn sprintf([*c]u8, [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn ungetc(c_int, [*c]FILE) c_int;
pub extern fn vfprintf([*c]FILE, [*c]const u8, __builtin_va_list) c_int;
pub extern fn vprintf([*c]const u8, __builtin_va_list) c_int;
pub extern fn vsprintf([*c]u8, [*c]const u8, __builtin_va_list) c_int;
pub extern fn ctermid([*c]u8) [*c]u8;
pub extern fn fdopen(c_int, [*c]const u8) [*c]FILE;
pub extern fn fileno([*c]FILE) c_int;
pub extern fn pclose([*c]FILE) c_int;
pub extern fn popen([*c]const u8, [*c]const u8) [*c]FILE;
pub extern fn __srget([*c]FILE) c_int;
pub extern fn __svfscanf([*c]FILE, [*c]const u8, va_list) c_int;
pub extern fn __swbuf(c_int, [*c]FILE) c_int;
pub inline fn __sputc(arg__c: c_int, arg__p: [*c]FILE) c_int {
    var _c = arg__c;
    _ = &_c;
    var _p = arg__p;
    _ = &_p;
    if (((blk: {
        const ref = &_p.*._w;
        ref.* -= 1;
        break :blk ref.*;
    }) >= @as(c_int, 0)) or ((_p.*._w >= _p.*._lbfsize) and (@as(c_int, @bitCast(@as(c_uint, @as(u8, @bitCast(@as(i8, @truncate(_c))))))) != @as(c_int, '\n')))) return @as(c_int, @bitCast(@as(c_uint, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(_c))));
        (blk_1: {
            const ref = &_p.*._p;
            const tmp_2 = ref.*;
            ref.* += 1;
            break :blk_1 tmp_2;
        }).* = tmp;
        break :blk tmp;
    }))) else return __swbuf(_c, _p);
    return 0;
}
pub extern fn flockfile([*c]FILE) void;
pub extern fn ftrylockfile([*c]FILE) c_int;
pub extern fn funlockfile([*c]FILE) void;
pub extern fn getc_unlocked([*c]FILE) c_int;
pub extern fn getchar_unlocked() c_int;
pub extern fn putc_unlocked(c_int, [*c]FILE) c_int;
pub extern fn putchar_unlocked(c_int) c_int;
pub extern fn getw([*c]FILE) c_int;
pub extern fn putw(c_int, [*c]FILE) c_int;
pub extern fn tempnam(__dir: [*c]const u8, __prefix: [*c]const u8) [*c]u8;
pub extern fn fseeko(__stream: [*c]FILE, __offset: off_t, __whence: c_int) c_int;
pub extern fn ftello(__stream: [*c]FILE) off_t;
pub extern fn snprintf(__str: [*c]u8, __size: c_ulong, __format: [*c]const u8, ...) c_int;
pub extern fn vfscanf(noalias __stream: [*c]FILE, noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn vscanf(noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn vsnprintf(__str: [*c]u8, __size: c_ulong, __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn vsscanf(noalias __str: [*c]const u8, noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn dprintf(c_int, noalias [*c]const u8, ...) c_int;
pub extern fn vdprintf(c_int, noalias [*c]const u8, va_list) c_int;
pub extern fn getdelim(noalias __linep: [*c][*c]u8, noalias __linecapp: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) isize;
pub extern fn getline(noalias __linep: [*c][*c]u8, noalias __linecapp: [*c]usize, noalias __stream: [*c]FILE) isize;
pub extern fn fmemopen(noalias __buf: ?*anyopaque, __size: usize, noalias __mode: [*c]const u8) [*c]FILE;
pub extern fn open_memstream(__bufp: [*c][*c]u8, __sizep: [*c]usize) [*c]FILE;
pub extern const sys_nerr: c_int;
pub const sys_errlist: [*c]const [*c]const u8 = @extern([*c]const [*c]const u8, .{
    .name = "sys_errlist",
});
pub extern fn asprintf(noalias [*c][*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn ctermid_r([*c]u8) [*c]u8;
pub extern fn fgetln([*c]FILE, [*c]usize) [*c]u8;
pub extern fn fmtcheck([*c]const u8, [*c]const u8) [*c]const u8;
pub extern fn fpurge([*c]FILE) c_int;
pub extern fn setbuffer([*c]FILE, [*c]u8, c_int) void;
pub extern fn setlinebuf([*c]FILE) c_int;
pub extern fn vasprintf(noalias [*c][*c]u8, noalias [*c]const u8, va_list) c_int;
pub extern fn funopen(?*const anyopaque, ?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int, ?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.C) c_int, ?*const fn (?*anyopaque, fpos_t, c_int) callconv(.C) fpos_t, ?*const fn (?*anyopaque) callconv(.C) c_int) [*c]FILE;
pub extern fn __sprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __snprintf_chk(noalias [*c]u8, usize, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __vsprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, va_list) c_int;
pub extern fn __vsnprintf_chk(noalias [*c]u8, usize, c_int, usize, noalias [*c]const u8, va_list) c_int;
pub const P_ALL: c_int = 0;
pub const P_PID: c_int = 1;
pub const P_PGID: c_int = 2;
pub const idtype_t = c_uint;
pub const struct_timeval = extern struct {
    tv_sec: __darwin_time_t = @import("std").mem.zeroes(__darwin_time_t),
    tv_usec: __darwin_suseconds_t = @import("std").mem.zeroes(__darwin_suseconds_t),
};
pub const rlim_t = __uint64_t;
pub const struct_rusage = extern struct {
    ru_utime: struct_timeval = @import("std").mem.zeroes(struct_timeval),
    ru_stime: struct_timeval = @import("std").mem.zeroes(struct_timeval),
    ru_maxrss: c_long = @import("std").mem.zeroes(c_long),
    ru_ixrss: c_long = @import("std").mem.zeroes(c_long),
    ru_idrss: c_long = @import("std").mem.zeroes(c_long),
    ru_isrss: c_long = @import("std").mem.zeroes(c_long),
    ru_minflt: c_long = @import("std").mem.zeroes(c_long),
    ru_majflt: c_long = @import("std").mem.zeroes(c_long),
    ru_nswap: c_long = @import("std").mem.zeroes(c_long),
    ru_inblock: c_long = @import("std").mem.zeroes(c_long),
    ru_oublock: c_long = @import("std").mem.zeroes(c_long),
    ru_msgsnd: c_long = @import("std").mem.zeroes(c_long),
    ru_msgrcv: c_long = @import("std").mem.zeroes(c_long),
    ru_nsignals: c_long = @import("std").mem.zeroes(c_long),
    ru_nvcsw: c_long = @import("std").mem.zeroes(c_long),
    ru_nivcsw: c_long = @import("std").mem.zeroes(c_long),
};
pub const rusage_info_t = ?*anyopaque;
pub const struct_rusage_info_v0 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v1 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v2 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v3 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_default: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_maintenance: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_background: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_utility: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_legacy: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_initiated: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_interactive: u64 = @import("std").mem.zeroes(u64),
    ri_billed_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_system_time: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v4 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_default: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_maintenance: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_background: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_utility: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_legacy: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_initiated: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_interactive: u64 = @import("std").mem.zeroes(u64),
    ri_billed_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_logical_writes: u64 = @import("std").mem.zeroes(u64),
    ri_lifetime_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_instructions: u64 = @import("std").mem.zeroes(u64),
    ri_cycles: u64 = @import("std").mem.zeroes(u64),
    ri_billed_energy: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_energy: u64 = @import("std").mem.zeroes(u64),
    ri_interval_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_runnable_time: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v5 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_default: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_maintenance: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_background: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_utility: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_legacy: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_initiated: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_interactive: u64 = @import("std").mem.zeroes(u64),
    ri_billed_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_logical_writes: u64 = @import("std").mem.zeroes(u64),
    ri_lifetime_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_instructions: u64 = @import("std").mem.zeroes(u64),
    ri_cycles: u64 = @import("std").mem.zeroes(u64),
    ri_billed_energy: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_energy: u64 = @import("std").mem.zeroes(u64),
    ri_interval_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_runnable_time: u64 = @import("std").mem.zeroes(u64),
    ri_flags: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_rusage_info_v6 = extern struct {
    ri_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    ri_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_wired_size: u64 = @import("std").mem.zeroes(u64),
    ri_resident_size: u64 = @import("std").mem.zeroes(u64),
    ri_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_proc_start_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_proc_exit_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_child_user_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_child_pkg_idle_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_interrupt_wkups: u64 = @import("std").mem.zeroes(u64),
    ri_child_pageins: u64 = @import("std").mem.zeroes(u64),
    ri_child_elapsed_abstime: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_bytesread: u64 = @import("std").mem.zeroes(u64),
    ri_diskio_byteswritten: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_default: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_maintenance: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_background: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_utility: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_legacy: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_initiated: u64 = @import("std").mem.zeroes(u64),
    ri_cpu_time_qos_user_interactive: u64 = @import("std").mem.zeroes(u64),
    ri_billed_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_system_time: u64 = @import("std").mem.zeroes(u64),
    ri_logical_writes: u64 = @import("std").mem.zeroes(u64),
    ri_lifetime_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_instructions: u64 = @import("std").mem.zeroes(u64),
    ri_cycles: u64 = @import("std").mem.zeroes(u64),
    ri_billed_energy: u64 = @import("std").mem.zeroes(u64),
    ri_serviced_energy: u64 = @import("std").mem.zeroes(u64),
    ri_interval_max_phys_footprint: u64 = @import("std").mem.zeroes(u64),
    ri_runnable_time: u64 = @import("std").mem.zeroes(u64),
    ri_flags: u64 = @import("std").mem.zeroes(u64),
    ri_user_ptime: u64 = @import("std").mem.zeroes(u64),
    ri_system_ptime: u64 = @import("std").mem.zeroes(u64),
    ri_pinstructions: u64 = @import("std").mem.zeroes(u64),
    ri_pcycles: u64 = @import("std").mem.zeroes(u64),
    ri_energy_nj: u64 = @import("std").mem.zeroes(u64),
    ri_penergy_nj: u64 = @import("std").mem.zeroes(u64),
    ri_reserved: [14]u64 = @import("std").mem.zeroes([14]u64),
};
pub const rusage_info_current = struct_rusage_info_v6;
pub const struct_rlimit = extern struct {
    rlim_cur: rlim_t = @import("std").mem.zeroes(rlim_t),
    rlim_max: rlim_t = @import("std").mem.zeroes(rlim_t),
};
pub const struct_proc_rlimit_control_wakeupmon = extern struct {
    wm_flags: u32 = @import("std").mem.zeroes(u32),
    wm_rate: i32 = @import("std").mem.zeroes(i32),
};
pub extern fn getpriority(c_int, id_t) c_int;
pub extern fn getiopolicy_np(c_int, c_int) c_int;
pub extern fn getrlimit(c_int, [*c]struct_rlimit) c_int;
pub extern fn getrusage(c_int, [*c]struct_rusage) c_int;
pub extern fn setpriority(c_int, id_t, c_int) c_int;
pub extern fn setiopolicy_np(c_int, c_int, c_int) c_int;
pub extern fn setrlimit(c_int, [*c]const struct_rlimit) c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/wait.h:201:19: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_48 = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/wait.h:220:19: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_49 = opaque {};
pub const union_wait = extern union {
    w_status: c_int,
    w_T: struct_unnamed_48,
    w_S: struct_unnamed_49,
};
pub extern fn wait([*c]c_int) pid_t;
pub extern fn waitpid(pid_t, [*c]c_int, c_int) pid_t;
pub extern fn waitid(idtype_t, id_t, [*c]siginfo_t, c_int) c_int;
pub extern fn wait3([*c]c_int, c_int, [*c]struct_rusage) pid_t;
pub extern fn wait4(pid_t, [*c]c_int, c_int, [*c]struct_rusage) pid_t;
pub extern fn alloca(c_ulong) ?*anyopaque;
pub const div_t = extern struct {
    quot: c_int = @import("std").mem.zeroes(c_int),
    rem: c_int = @import("std").mem.zeroes(c_int),
};
pub const ldiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub const lldiv_t = extern struct {
    quot: c_longlong = @import("std").mem.zeroes(c_longlong),
    rem: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub extern var __mb_cur_max: c_int;
pub extern fn malloc(__size: c_ulong) ?*anyopaque;
pub extern fn calloc(__count: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn free(?*anyopaque) void;
pub extern fn realloc(__ptr: ?*anyopaque, __size: c_ulong) ?*anyopaque;
pub extern fn valloc(usize) ?*anyopaque;
pub extern fn aligned_alloc(__alignment: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn posix_memalign(__memptr: [*c]?*anyopaque, __alignment: usize, __size: usize) c_int;
pub extern fn abort() noreturn;
pub extern fn abs(c_int) c_int;
pub extern fn atexit(?*const fn () callconv(.C) void) c_int;
pub extern fn atof([*c]const u8) f64;
pub extern fn atoi([*c]const u8) c_int;
pub extern fn atol([*c]const u8) c_long;
pub extern fn atoll([*c]const u8) c_longlong;
pub extern fn bsearch(__key: ?*const anyopaque, __base: ?*const anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) ?*anyopaque;
pub extern fn div(c_int, c_int) div_t;
pub extern fn exit(c_int) noreturn;
pub extern fn getenv([*c]const u8) [*c]u8;
pub extern fn labs(c_long) c_long;
pub extern fn ldiv(c_long, c_long) ldiv_t;
pub extern fn llabs(c_longlong) c_longlong;
pub extern fn lldiv(c_longlong, c_longlong) lldiv_t;
pub extern fn mblen(__s: [*c]const u8, __n: usize) c_int;
pub extern fn mbstowcs(noalias [*c]wchar_t, noalias [*c]const u8, usize) usize;
pub extern fn mbtowc(noalias [*c]wchar_t, noalias [*c]const u8, usize) c_int;
pub extern fn qsort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void;
pub extern fn rand() c_int;
pub extern fn srand(c_uint) void;
pub extern fn strtod([*c]const u8, [*c][*c]u8) f64;
pub extern fn strtof([*c]const u8, [*c][*c]u8) f32;
pub extern fn strtol(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtold([*c]const u8, [*c][*c]u8) c_longdouble;
pub extern fn strtoll(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoul(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn strtoull(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn system([*c]const u8) c_int;
pub extern fn wcstombs(noalias [*c]u8, noalias [*c]const wchar_t, usize) usize;
pub extern fn wctomb([*c]u8, wchar_t) c_int;
pub extern fn _Exit(c_int) noreturn;
pub extern fn a64l([*c]const u8) c_long;
pub extern fn drand48() f64;
pub extern fn ecvt(f64, c_int, noalias [*c]c_int, noalias [*c]c_int) [*c]u8;
pub extern fn erand48([*c]c_ushort) f64;
pub extern fn fcvt(f64, c_int, noalias [*c]c_int, noalias [*c]c_int) [*c]u8;
pub extern fn gcvt(f64, c_int, [*c]u8) [*c]u8;
pub extern fn getsubopt([*c][*c]u8, [*c]const [*c]u8, [*c][*c]u8) c_int;
pub extern fn grantpt(c_int) c_int;
pub extern fn initstate(c_uint, [*c]u8, usize) [*c]u8;
pub extern fn jrand48([*c]c_ushort) c_long;
pub extern fn l64a(c_long) [*c]u8;
pub extern fn lcong48([*c]c_ushort) void;
pub extern fn lrand48() c_long;
pub extern fn mktemp([*c]u8) [*c]u8;
pub extern fn mkstemp([*c]u8) c_int;
pub extern fn mrand48() c_long;
pub extern fn nrand48([*c]c_ushort) c_long;
pub extern fn posix_openpt(c_int) c_int;
pub extern fn ptsname(c_int) [*c]u8;
pub extern fn ptsname_r(fildes: c_int, buffer: [*c]u8, buflen: usize) c_int;
pub extern fn putenv([*c]u8) c_int;
pub extern fn random() c_long;
pub extern fn rand_r([*c]c_uint) c_int;
pub extern fn realpath(noalias [*c]const u8, noalias [*c]u8) [*c]u8;
pub extern fn seed48([*c]c_ushort) [*c]c_ushort;
pub extern fn setenv(__name: [*c]const u8, __value: [*c]const u8, __overwrite: c_int) c_int;
pub extern fn setkey([*c]const u8) void;
pub extern fn setstate([*c]const u8) [*c]u8;
pub extern fn srand48(c_long) void;
pub extern fn srandom(c_uint) void;
pub extern fn unlockpt(c_int) c_int;
pub extern fn unsetenv([*c]const u8) c_int;
pub extern fn arc4random() u32;
pub extern fn arc4random_addrandom([*c]u8, c_int) void;
pub extern fn arc4random_buf(__buf: ?*anyopaque, __nbytes: usize) void;
pub extern fn arc4random_stir() void;
pub extern fn arc4random_uniform(__upper_bound: u32) u32; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:271:6: warning: unsupported type: 'BlockPointer'
pub const atexit_b = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:271:6
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:280:7: warning: unsupported type: 'BlockPointer'
pub const bsearch_b = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:280:7
pub extern fn cgetcap([*c]u8, [*c]const u8, c_int) [*c]u8;
pub extern fn cgetclose() c_int;
pub extern fn cgetent([*c][*c]u8, [*c][*c]u8, [*c]const u8) c_int;
pub extern fn cgetfirst([*c][*c]u8, [*c][*c]u8) c_int;
pub extern fn cgetmatch([*c]const u8, [*c]const u8) c_int;
pub extern fn cgetnext([*c][*c]u8, [*c][*c]u8) c_int;
pub extern fn cgetnum([*c]u8, [*c]const u8, [*c]c_long) c_int;
pub extern fn cgetset([*c]const u8) c_int;
pub extern fn cgetstr([*c]u8, [*c]const u8, [*c][*c]u8) c_int;
pub extern fn cgetustr([*c]u8, [*c]const u8, [*c][*c]u8) c_int;
pub extern fn daemon(c_int, c_int) c_int;
pub extern fn devname(dev_t, mode_t) [*c]u8;
pub extern fn devname_r(dev_t, mode_t, buf: [*c]u8, len: c_int) [*c]u8;
pub extern fn getbsize([*c]c_int, [*c]c_long) [*c]u8;
pub extern fn getloadavg([*c]f64, c_int) c_int;
pub extern fn getprogname() [*c]const u8;
pub extern fn setprogname([*c]const u8) void;
pub extern fn heapsort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:317:6: warning: unsupported type: 'BlockPointer'
pub const heapsort_b = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:317:6
pub extern fn mergesort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:324:6: warning: unsupported type: 'BlockPointer'
pub const mergesort_b = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:324:6
pub extern fn psort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:332:7: warning: unsupported type: 'BlockPointer'
pub const psort_b = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:332:7
pub extern fn psort_r(__base: ?*anyopaque, __nel: usize, __width: usize, ?*anyopaque, __compar: ?*const fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:340:7: warning: unsupported type: 'BlockPointer'
pub const qsort_b = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:340:7
pub extern fn qsort_r(__base: ?*anyopaque, __nel: usize, __width: usize, ?*anyopaque, __compar: ?*const fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void;
pub extern fn radixsort(__base: [*c][*c]const u8, __nel: c_int, __table: [*c]const u8, __endbyte: c_uint) c_int;
pub extern fn rpmatch([*c]const u8) c_int;
pub extern fn sradixsort(__base: [*c][*c]const u8, __nel: c_int, __table: [*c]const u8, __endbyte: c_uint) c_int;
pub extern fn sranddev() void;
pub extern fn srandomdev() void;
pub extern fn reallocf(__ptr: ?*anyopaque, __size: usize) ?*anyopaque;
pub extern fn strtonum(__numstr: [*c]const u8, __minval: c_longlong, __maxval: c_longlong, __errstrp: [*c][*c]const u8) c_longlong;
pub extern fn strtoq(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtouq(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern var suboptarg: [*c]u8;
pub extern fn memchr(__s: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn memcmp(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn memcpy(__dst: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn memmove(__dst: ?*anyopaque, __src: ?*const anyopaque, __len: c_ulong) ?*anyopaque;
pub extern fn memset(__b: ?*anyopaque, __c: c_int, __len: c_ulong) ?*anyopaque;
pub extern fn strcat(__s1: [*c]u8, __s2: [*c]const u8) [*c]u8;
pub extern fn strchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strcmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strcoll(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strcpy(__dst: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strcspn(__s: [*c]const u8, __charset: [*c]const u8) c_ulong;
pub extern fn strerror(__errnum: c_int) [*c]u8;
pub extern fn strlen(__s: [*c]const u8) c_ulong;
pub extern fn strncat(__s1: [*c]u8, __s2: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strncmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strncpy(__dst: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strpbrk(__s: [*c]const u8, __charset: [*c]const u8) [*c]u8;
pub extern fn strrchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strspn(__s: [*c]const u8, __charset: [*c]const u8) c_ulong;
pub extern fn strstr(__big: [*c]const u8, __little: [*c]const u8) [*c]u8;
pub extern fn strtok(__str: [*c]u8, __sep: [*c]const u8) [*c]u8;
pub extern fn strxfrm(__s1: [*c]u8, __s2: [*c]const u8, __n: c_ulong) c_ulong;
pub extern fn strtok_r(__str: [*c]u8, __sep: [*c]const u8, __lasts: [*c][*c]u8) [*c]u8;
pub extern fn strerror_r(__errnum: c_int, __strerrbuf: [*c]u8, __buflen: usize) c_int;
pub extern fn strdup(__s1: [*c]const u8) [*c]u8;
pub extern fn memccpy(__dst: ?*anyopaque, __src: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn stpcpy(__dst: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn stpncpy(__dst: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strndup(__s1: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strnlen(__s1: [*c]const u8, __n: usize) usize;
pub extern fn strsignal(__sig: c_int) [*c]u8;
pub extern fn memset_s(__s: ?*anyopaque, __smax: rsize_t, __c: c_int, __n: rsize_t) errno_t;
pub extern fn memmem(__big: ?*const anyopaque, __big_len: usize, __little: ?*const anyopaque, __little_len: usize) ?*anyopaque;
pub extern fn memset_pattern4(__b: ?*anyopaque, __pattern4: ?*const anyopaque, __len: usize) void;
pub extern fn memset_pattern8(__b: ?*anyopaque, __pattern8: ?*const anyopaque, __len: usize) void;
pub extern fn memset_pattern16(__b: ?*anyopaque, __pattern16: ?*const anyopaque, __len: usize) void;
pub extern fn strcasestr(__big: [*c]const u8, __little: [*c]const u8) [*c]u8;
pub extern fn strnstr(__big: [*c]const u8, __little: [*c]const u8, __len: usize) [*c]u8;
pub extern fn strlcat(__dst: [*c]u8, __source: [*c]const u8, __size: c_ulong) c_ulong;
pub extern fn strlcpy(__dst: [*c]u8, __source: [*c]const u8, __size: c_ulong) c_ulong;
pub extern fn strmode(__mode: c_int, __bp: [*c]u8) void;
pub extern fn strsep(__stringp: [*c][*c]u8, __delim: [*c]const u8) [*c]u8;
pub extern fn swab(noalias ?*const anyopaque, noalias ?*anyopaque, isize) void;
pub extern fn timingsafe_bcmp(__b1: ?*const anyopaque, __b2: ?*const anyopaque, __len: usize) c_int;
pub extern fn strsignal_r(__sig: c_int, __strsignalbuf: [*c]u8, __buflen: usize) c_int;
pub extern fn bcmp(?*const anyopaque, ?*const anyopaque, c_ulong) c_int;
pub extern fn bcopy(?*const anyopaque, ?*anyopaque, usize) void;
pub extern fn bzero(?*anyopaque, c_ulong) void;
pub extern fn index([*c]const u8, c_int) [*c]u8;
pub extern fn rindex([*c]const u8, c_int) [*c]u8;
pub extern fn ffs(c_int) c_int;
pub extern fn strcasecmp([*c]const u8, [*c]const u8) c_int;
pub extern fn strncasecmp([*c]const u8, [*c]const u8, c_ulong) c_int;
pub extern fn ffsl(c_long) c_int;
pub extern fn ffsll(c_longlong) c_int;
pub extern fn fls(c_int) c_int;
pub extern fn flsl(c_long) c_int;
pub extern fn flsll(c_longlong) c_int;
pub const struct_timespec = extern struct {
    tv_sec: __darwin_time_t = @import("std").mem.zeroes(__darwin_time_t),
    tv_nsec: c_long = @import("std").mem.zeroes(c_long),
};
pub const struct_tm = extern struct {
    tm_sec: c_int = @import("std").mem.zeroes(c_int),
    tm_min: c_int = @import("std").mem.zeroes(c_int),
    tm_hour: c_int = @import("std").mem.zeroes(c_int),
    tm_mday: c_int = @import("std").mem.zeroes(c_int),
    tm_mon: c_int = @import("std").mem.zeroes(c_int),
    tm_year: c_int = @import("std").mem.zeroes(c_int),
    tm_wday: c_int = @import("std").mem.zeroes(c_int),
    tm_yday: c_int = @import("std").mem.zeroes(c_int),
    tm_isdst: c_int = @import("std").mem.zeroes(c_int),
    tm_gmtoff: c_long = @import("std").mem.zeroes(c_long),
    tm_zone: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const tzname: [*c][*c]u8 = @extern([*c][*c]u8, .{
    .name = "tzname",
});
pub extern var getdate_err: c_int;
pub extern var timezone: c_long;
pub extern var daylight: c_int;
pub extern fn asctime([*c]const struct_tm) [*c]u8;
pub extern fn clock() clock_t;
pub extern fn ctime([*c]const time_t) [*c]u8;
pub extern fn difftime(time_t, time_t) f64;
pub extern fn getdate([*c]const u8) [*c]struct_tm;
pub extern fn gmtime([*c]const time_t) [*c]struct_tm;
pub extern fn localtime([*c]const time_t) [*c]struct_tm;
pub extern fn mktime([*c]struct_tm) time_t;
pub extern fn strftime(noalias [*c]u8, usize, noalias [*c]const u8, noalias [*c]const struct_tm) usize;
pub extern fn strptime(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]struct_tm) [*c]u8;
pub extern fn time([*c]time_t) time_t;
pub extern fn tzset() void;
pub extern fn asctime_r(noalias [*c]const struct_tm, noalias [*c]u8) [*c]u8;
pub extern fn ctime_r([*c]const time_t, [*c]u8) [*c]u8;
pub extern fn gmtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn localtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn posix2time(time_t) time_t;
pub extern fn tzsetwall() void;
pub extern fn time2posix(time_t) time_t;
pub extern fn timelocal([*c]struct_tm) time_t;
pub extern fn timegm([*c]struct_tm) time_t;
pub extern fn nanosleep(__rqtp: [*c]const struct_timespec, __rmtp: [*c]struct_timespec) c_int;
pub const _CLOCK_REALTIME: c_int = 0;
pub const _CLOCK_MONOTONIC: c_int = 6;
pub const _CLOCK_MONOTONIC_RAW: c_int = 4;
pub const _CLOCK_MONOTONIC_RAW_APPROX: c_int = 5;
pub const _CLOCK_UPTIME_RAW: c_int = 8;
pub const _CLOCK_UPTIME_RAW_APPROX: c_int = 9;
pub const _CLOCK_PROCESS_CPUTIME_ID: c_int = 12;
pub const _CLOCK_THREAD_CPUTIME_ID: c_int = 16;
pub const clockid_t = c_uint;
pub extern fn clock_getres(__clock_id: clockid_t, __res: [*c]struct_timespec) c_int;
pub extern fn clock_gettime(__clock_id: clockid_t, __tp: [*c]struct_timespec) c_int;
pub extern fn clock_gettime_nsec_np(__clock_id: clockid_t) __uint64_t;
pub extern fn clock_settime(__clock_id: clockid_t, __tp: [*c]const struct_timespec) c_int;
pub extern fn timespec_get(ts: [*c]struct_timespec, base: c_int) c_int;
pub extern fn imaxabs(j: intmax_t) intmax_t;
pub const imaxdiv_t = extern struct {
    quot: intmax_t = @import("std").mem.zeroes(intmax_t),
    rem: intmax_t = @import("std").mem.zeroes(intmax_t),
};
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) intmax_t;
pub extern fn strtoumax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) intmax_t;
pub extern fn wcstoumax(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) uintmax_t;
pub const CFBagRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFBagReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void;
pub const CFBagCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFBagEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean;
pub const CFBagHashCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFHashCode;
pub const CFBagCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFBagRetainCallBack = @import("std").mem.zeroes(CFBagRetainCallBack),
    release: CFBagReleaseCallBack = @import("std").mem.zeroes(CFBagReleaseCallBack),
    copyDescription: CFBagCopyDescriptionCallBack = @import("std").mem.zeroes(CFBagCopyDescriptionCallBack),
    equal: CFBagEqualCallBack = @import("std").mem.zeroes(CFBagEqualCallBack),
    hash: CFBagHashCallBack = @import("std").mem.zeroes(CFBagHashCallBack),
};
pub extern const kCFTypeBagCallBacks: CFBagCallBacks;
pub extern const kCFCopyStringBagCallBacks: CFBagCallBacks;
pub const CFBagApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFBag = opaque {};
pub const CFBagRef = ?*const struct___CFBag;
pub const CFMutableBagRef = ?*struct___CFBag;
pub extern fn CFBagGetTypeID() CFTypeID;
pub extern fn CFBagCreate(allocator: CFAllocatorRef, values: [*c]?*const anyopaque, numValues: CFIndex, callBacks: [*c]const CFBagCallBacks) CFBagRef;
pub extern fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) CFBagRef;
pub extern fn CFBagCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFBagCallBacks) CFMutableBagRef;
pub extern fn CFBagCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theBag: CFBagRef) CFMutableBagRef;
pub extern fn CFBagGetCount(theBag: CFBagRef) CFIndex;
pub extern fn CFBagGetCountOfValue(theBag: CFBagRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFBagContainsValue(theBag: CFBagRef, value: ?*const anyopaque) Boolean;
pub extern fn CFBagGetValue(theBag: CFBagRef, value: ?*const anyopaque) ?*const anyopaque;
pub extern fn CFBagGetValueIfPresent(theBag: CFBagRef, candidate: ?*const anyopaque, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFBagGetValues(theBag: CFBagRef, values: [*c]?*const anyopaque) void;
pub extern fn CFBagApplyFunction(theBag: CFBagRef, applier: CFBagApplierFunction, context: ?*anyopaque) void;
pub extern fn CFBagAddValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagReplaceValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagSetValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagRemoveValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagRemoveAllValues(theBag: CFMutableBagRef) void;
pub const CFBinaryHeapCompareContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFStringRef),
};
pub const CFBinaryHeapCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque),
    release: ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFStringRef),
    compare: ?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.C) CFComparisonResult = @import("std").mem.zeroes(?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.C) CFComparisonResult),
};
pub extern const kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
pub const CFBinaryHeapApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFBinaryHeap = opaque {};
pub const CFBinaryHeapRef = ?*struct___CFBinaryHeap;
pub extern fn CFBinaryHeapGetTypeID() CFTypeID;
pub extern fn CFBinaryHeapCreate(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFBinaryHeapCallBacks, compareContext: [*c]const CFBinaryHeapCompareContext) CFBinaryHeapRef;
pub extern fn CFBinaryHeapCreateCopy(allocator: CFAllocatorRef, capacity: CFIndex, heap: CFBinaryHeapRef) CFBinaryHeapRef;
pub extern fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) CFIndex;
pub extern fn CFBinaryHeapGetCountOfValue(heap: CFBinaryHeapRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFBinaryHeapContainsValue(heap: CFBinaryHeapRef, value: ?*const anyopaque) Boolean;
pub extern fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) ?*const anyopaque;
pub extern fn CFBinaryHeapGetMinimumIfPresent(heap: CFBinaryHeapRef, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: [*c]?*const anyopaque) void;
pub extern fn CFBinaryHeapApplyFunction(heap: CFBinaryHeapRef, applier: CFBinaryHeapApplierFunction, context: ?*anyopaque) void;
pub extern fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: ?*const anyopaque) void;
pub extern fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef) void;
pub extern fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef) void;
pub const CFBit = UInt32;
pub const struct___CFBitVector = opaque {};
pub const CFBitVectorRef = ?*const struct___CFBitVector;
pub const CFMutableBitVectorRef = ?*struct___CFBitVector;
pub extern fn CFBitVectorGetTypeID() CFTypeID;
pub extern fn CFBitVectorCreate(allocator: CFAllocatorRef, bytes: [*c]const UInt8, numBits: CFIndex) CFBitVectorRef;
pub extern fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) CFBitVectorRef;
pub extern fn CFBitVectorCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) CFMutableBitVectorRef;
pub extern fn CFBitVectorCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, bv: CFBitVectorRef) CFMutableBitVectorRef;
pub extern fn CFBitVectorGetCount(bv: CFBitVectorRef) CFIndex;
pub extern fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) Boolean;
pub extern fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) CFBit;
pub extern fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: [*c]UInt8) void;
pub extern fn CFBitVectorGetFirstIndexOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorGetLastIndexOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex) void;
pub extern fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex) void;
pub extern fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange) void;
pub extern fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit) void;
pub extern fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit) void;
pub extern fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit) void;
pub const OSUnknownByteOrder: c_int = 0;
pub const OSLittleEndian: c_int = 1;
pub const OSBigEndian: c_int = 2;
const enum_unnamed_50 = c_uint;
pub fn OSHostByteOrder() callconv(.C) i32 {
    return OSLittleEndian;
}
pub fn _OSReadInt16(arg_base: ?*const volatile anyopaque, arg_byteOffset: usize) callconv(.C) u16 {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    return @as([*c]volatile u16, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).*;
}
pub fn _OSReadInt32(arg_base: ?*const volatile anyopaque, arg_byteOffset: usize) callconv(.C) u32 {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    return @as([*c]volatile u32, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).*;
}
pub fn _OSReadInt64(arg_base: ?*const volatile anyopaque, arg_byteOffset: usize) callconv(.C) u64 {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    return @as([*c]volatile u64, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).*;
}
pub fn _OSWriteInt16(arg_base: ?*volatile anyopaque, arg_byteOffset: usize, arg_data: u16) callconv(.C) void {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    var data = arg_data;
    _ = &data;
    @as([*c]volatile u16, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).* = data;
}
pub fn _OSWriteInt32(arg_base: ?*volatile anyopaque, arg_byteOffset: usize, arg_data: u32) callconv(.C) void {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    var data = arg_data;
    _ = &data;
    @as([*c]volatile u32, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).* = data;
}
pub fn _OSWriteInt64(arg_base: ?*volatile anyopaque, arg_byteOffset: usize, arg_data: u64) callconv(.C) void {
    var base = arg_base;
    _ = &base;
    var byteOffset = arg_byteOffset;
    _ = &byteOffset;
    var data = arg_data;
    _ = &data;
    @as([*c]volatile u64, @ptrFromInt(@as(usize, @intCast(@intFromPtr(base))) +% byteOffset)).* = data;
}
pub const CFByteOrderUnknown: c_int = 0;
pub const CFByteOrderLittleEndian: c_int = 1;
pub const CFByteOrderBigEndian: c_int = 2;
pub const enum___CFByteOrder = c_uint;
pub const CFByteOrder = CFIndex;
pub inline fn CFByteOrderGetCurrent() CFByteOrder {
    var byteOrder: i32 = OSHostByteOrder();
    _ = &byteOrder;
    while (true) {
        switch (byteOrder) {
            @as(c_int, 1) => return @as(CFByteOrder, @bitCast(@as(c_long, CFByteOrderLittleEndian))),
            @as(c_int, 2) => return @as(CFByteOrder, @bitCast(@as(c_long, CFByteOrderBigEndian))),
            else => break,
        }
        break;
    }
    return @as(CFByteOrder, @bitCast(@as(c_long, CFByteOrderUnknown)));
}
pub inline fn CFSwapInt16(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate(if (__builtin_constant_p(arg) != 0) @as(c_int, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(@as(c_ushort, @truncate(((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 65280)) >> @intCast(8)) | ((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 255)) << @intCast(8))))))))) else @as(c_int, @bitCast(@as(c_uint, _OSSwapInt16(arg))))))));
}
pub inline fn CFSwapInt32(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint32_t, @bitCast(((((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 4278190080)) >> @intCast(24)) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 16711680)) >> @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 65280)) << @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 255)) << @intCast(24)))) else _OSSwapInt32(arg);
}
pub inline fn CFSwapInt64(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint64_t, @bitCast(((((((((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(56)) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 71776119061217280)) >> @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 280375465082880)) >> @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 1095216660480)) >> @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 4278190080)) << @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 16711680)) << @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 65280)) << @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 255)) << @intCast(56)))) else _OSSwapInt64(arg);
}
pub inline fn CFSwapInt16BigToHost(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate(if (__builtin_constant_p(arg) != 0) @as(c_int, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(@as(c_ushort, @truncate(((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 65280)) >> @intCast(8)) | ((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 255)) << @intCast(8))))))))) else @as(c_int, @bitCast(@as(c_uint, _OSSwapInt16(arg))))))));
}
pub inline fn CFSwapInt32BigToHost(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint32_t, @bitCast(((((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 4278190080)) >> @intCast(24)) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 16711680)) >> @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 65280)) << @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 255)) << @intCast(24)))) else _OSSwapInt32(arg);
}
pub inline fn CFSwapInt64BigToHost(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint64_t, @bitCast(((((((((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(56)) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 71776119061217280)) >> @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 280375465082880)) >> @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 1095216660480)) >> @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 4278190080)) << @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 16711680)) << @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 65280)) << @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 255)) << @intCast(56)))) else _OSSwapInt64(arg);
}
pub inline fn CFSwapInt16HostToBig(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate(if (__builtin_constant_p(arg) != 0) @as(c_int, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(@as(c_ushort, @truncate(((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 65280)) >> @intCast(8)) | ((@as(c_uint, @bitCast(@as(c_uint, @as(__uint16_t, @bitCast(arg))))) & @as(c_uint, 255)) << @intCast(8))))))))) else @as(c_int, @bitCast(@as(c_uint, _OSSwapInt16(arg))))))));
}
pub inline fn CFSwapInt32HostToBig(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint32_t, @bitCast(((((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 4278190080)) >> @intCast(24)) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 16711680)) >> @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 65280)) << @intCast(8))) | ((@as(__uint32_t, @bitCast(arg)) & @as(c_uint, 255)) << @intCast(24)))) else _OSSwapInt32(arg);
}
pub inline fn CFSwapInt64HostToBig(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return if (__builtin_constant_p(arg) != 0) @as(__uint64_t, @bitCast(((((((((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(56)) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 71776119061217280)) >> @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 280375465082880)) >> @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 1095216660480)) >> @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 4278190080)) << @intCast(8))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 16711680)) << @intCast(24))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 65280)) << @intCast(40))) | ((@as(__uint64_t, @bitCast(arg)) & @as(c_ulonglong, 255)) << @intCast(56)))) else _OSSwapInt64(arg);
}
pub inline fn CFSwapInt16LittleToHost(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt32LittleToHost(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt64LittleToHost(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt16HostToLittle(arg_arg: u16) u16 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt32HostToLittle(arg_arg: u32) u32 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub inline fn CFSwapInt64HostToLittle(arg_arg: u64) u64 {
    var arg = arg_arg;
    _ = &arg;
    return arg;
}
pub const CFSwappedFloat32 = extern struct {
    v: u32 = @import("std").mem.zeroes(u32),
};
pub const CFSwappedFloat64 = extern struct {
    v: u64 = @import("std").mem.zeroes(u64),
};
pub inline fn CFConvertFloat32HostToSwapped(arg_arg: Float32) CFSwappedFloat32 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: Float32,
        sv: CFSwappedFloat32,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.v = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertFloat32SwappedToHost(arg_arg: CFSwappedFloat32) Float32 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: Float32,
        sv: CFSwappedFloat32,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.sv = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.v;
}
pub inline fn CFConvertFloat64HostToSwapped(arg_arg: Float64) CFSwappedFloat64 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: Float64,
        sv: CFSwappedFloat64,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.v = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertFloat64SwappedToHost(arg_arg: CFSwappedFloat64) Float64 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: Float64,
        sv: CFSwappedFloat64,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.sv = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.v;
}
pub inline fn CFConvertFloatHostToSwapped(arg_arg: f32) CFSwappedFloat32 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: f32,
        sv: CFSwappedFloat32,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.v = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertFloatSwappedToHost(arg_arg: CFSwappedFloat32) f32 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: f32,
        sv: CFSwappedFloat32,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.sv = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.v;
}
pub inline fn CFConvertDoubleHostToSwapped(arg_arg: f64) CFSwappedFloat64 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: f64,
        sv: CFSwappedFloat64,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.v = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertDoubleSwappedToHost(arg_arg: CFSwappedFloat64) f64 {
    var arg = arg_arg;
    _ = &arg;
    const union_CFSwap = extern union {
        v: f64,
        sv: CFSwappedFloat64,
    };
    _ = &union_CFSwap;
    var result: union_CFSwap = undefined;
    _ = &result;
    result.sv = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.v;
}
pub extern fn CFTimeZoneGetTypeID() CFTypeID;
pub extern fn CFTimeZoneCopySystem() CFTimeZoneRef;
pub extern fn CFTimeZoneResetSystem() void;
pub extern fn CFTimeZoneCopyDefault() CFTimeZoneRef;
pub extern fn CFTimeZoneSetDefault(tz: CFTimeZoneRef) void;
pub extern fn CFTimeZoneCopyKnownNames() CFArrayRef;
pub extern fn CFTimeZoneCopyAbbreviationDictionary() CFDictionaryRef;
pub extern fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef) void;
pub extern fn CFTimeZoneCreate(allocator: CFAllocatorRef, name: CFStringRef, data: CFDataRef) CFTimeZoneRef;
pub extern fn CFTimeZoneCreateWithTimeIntervalFromGMT(allocator: CFAllocatorRef, ti: CFTimeInterval) CFTimeZoneRef;
pub extern fn CFTimeZoneCreateWithName(allocator: CFAllocatorRef, name: CFStringRef, tryAbbrev: Boolean) CFTimeZoneRef;
pub extern fn CFTimeZoneGetName(tz: CFTimeZoneRef) CFStringRef;
pub extern fn CFTimeZoneGetData(tz: CFTimeZoneRef) CFDataRef;
pub extern fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFTimeInterval;
pub extern fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFStringRef;
pub extern fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) Boolean;
pub extern fn CFTimeZoneGetDaylightSavingTimeOffset(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFTimeInterval;
pub extern fn CFTimeZoneGetNextDaylightSavingTimeTransition(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFAbsoluteTime;
pub const CFTimeZoneNameStyle = CFIndex;
pub const kCFTimeZoneNameStyleStandard: c_int = 0;
pub const kCFTimeZoneNameStyleShortStandard: c_int = 1;
pub const kCFTimeZoneNameStyleDaylightSaving: c_int = 2;
pub const kCFTimeZoneNameStyleShortDaylightSaving: c_int = 3;
pub const kCFTimeZoneNameStyleGeneric: c_int = 4;
pub const kCFTimeZoneNameStyleShortGeneric: c_int = 5;
const enum_unnamed_51 = c_uint;
pub extern fn CFTimeZoneCopyLocalizedName(tz: CFTimeZoneRef, style: CFTimeZoneNameStyle, locale: CFLocaleRef) CFStringRef;
pub extern const kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
pub const struct___CFCalendar = opaque {};
pub const CFCalendarRef = ?*struct___CFCalendar;
pub extern fn CFCalendarGetTypeID() CFTypeID;
pub extern fn CFCalendarCopyCurrent() CFCalendarRef;
pub extern fn CFCalendarCreateWithIdentifier(allocator: CFAllocatorRef, identifier: CFCalendarIdentifier) CFCalendarRef;
pub extern fn CFCalendarGetIdentifier(calendar: CFCalendarRef) CFCalendarIdentifier;
pub extern fn CFCalendarCopyLocale(calendar: CFCalendarRef) CFLocaleRef;
pub extern fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef) void;
pub extern fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) CFTimeZoneRef;
pub extern fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef) void;
pub extern fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) CFIndex;
pub extern fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex) void;
pub extern fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) CFIndex;
pub extern fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex) void;
pub const CFCalendarUnit = CFOptionFlags;
pub const kCFCalendarUnitEra: c_int = 2;
pub const kCFCalendarUnitYear: c_int = 4;
pub const kCFCalendarUnitMonth: c_int = 8;
pub const kCFCalendarUnitDay: c_int = 16;
pub const kCFCalendarUnitHour: c_int = 32;
pub const kCFCalendarUnitMinute: c_int = 64;
pub const kCFCalendarUnitSecond: c_int = 128;
pub const kCFCalendarUnitWeek: c_int = 256;
pub const kCFCalendarUnitWeekday: c_int = 512;
pub const kCFCalendarUnitWeekdayOrdinal: c_int = 1024;
pub const kCFCalendarUnitQuarter: c_int = 2048;
pub const kCFCalendarUnitWeekOfMonth: c_int = 4096;
pub const kCFCalendarUnitWeekOfYear: c_int = 8192;
pub const kCFCalendarUnitYearForWeekOfYear: c_int = 16384;
const enum_unnamed_52 = c_uint;
pub extern fn CFCalendarGetMinimumRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit) CFRange;
pub extern fn CFCalendarGetMaximumRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit) CFRange;
pub extern fn CFCalendarGetRangeOfUnit(calendar: CFCalendarRef, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: CFAbsoluteTime) CFRange;
pub extern fn CFCalendarGetOrdinalityOfUnit(calendar: CFCalendarRef, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: CFAbsoluteTime) CFIndex;
pub extern fn CFCalendarGetTimeRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit, at: CFAbsoluteTime, startp: [*c]CFAbsoluteTime, tip: [*c]CFTimeInterval) Boolean;
pub extern fn CFCalendarComposeAbsoluteTime(calendar: CFCalendarRef, at: [*c]CFAbsoluteTime, componentDesc: [*c]const u8, ...) Boolean;
pub extern fn CFCalendarDecomposeAbsoluteTime(calendar: CFCalendarRef, at: CFAbsoluteTime, componentDesc: [*c]const u8, ...) Boolean;
pub const kCFCalendarComponentsWrap: c_int = 1;
const enum_unnamed_53 = c_uint;
pub extern fn CFCalendarAddComponents(calendar: CFCalendarRef, at: [*c]CFAbsoluteTime, options: CFOptionFlags, componentDesc: [*c]const u8, ...) Boolean;
pub extern fn CFCalendarGetComponentDifference(calendar: CFCalendarRef, startingAT: CFAbsoluteTime, resultAT: CFAbsoluteTime, options: CFOptionFlags, componentDesc: [*c]const u8, ...) Boolean;
pub const CFDateFormatterKey = CFStringRef;
pub const struct___CFDateFormatter = opaque {};
pub const CFDateFormatterRef = ?*struct___CFDateFormatter;
pub extern fn CFDateFormatterCreateDateFormatFromTemplate(allocator: CFAllocatorRef, tmplate: CFStringRef, options: CFOptionFlags, locale: CFLocaleRef) CFStringRef;
pub extern fn CFDateFormatterGetTypeID() CFTypeID;
pub const CFDateFormatterStyle = CFIndex;
pub const kCFDateFormatterNoStyle: c_int = 0;
pub const kCFDateFormatterShortStyle: c_int = 1;
pub const kCFDateFormatterMediumStyle: c_int = 2;
pub const kCFDateFormatterLongStyle: c_int = 3;
pub const kCFDateFormatterFullStyle: c_int = 4;
const enum_unnamed_54 = c_uint;
pub const CFISO8601DateFormatOptions = CFOptionFlags;
pub const kCFISO8601DateFormatWithYear: c_int = 1;
pub const kCFISO8601DateFormatWithMonth: c_int = 2;
pub const kCFISO8601DateFormatWithWeekOfYear: c_int = 4;
pub const kCFISO8601DateFormatWithDay: c_int = 16;
pub const kCFISO8601DateFormatWithTime: c_int = 32;
pub const kCFISO8601DateFormatWithTimeZone: c_int = 64;
pub const kCFISO8601DateFormatWithSpaceBetweenDateAndTime: c_int = 128;
pub const kCFISO8601DateFormatWithDashSeparatorInDate: c_int = 256;
pub const kCFISO8601DateFormatWithColonSeparatorInTime: c_int = 512;
pub const kCFISO8601DateFormatWithColonSeparatorInTimeZone: c_int = 1024;
pub const kCFISO8601DateFormatWithFractionalSeconds: c_int = 2048;
pub const kCFISO8601DateFormatWithFullDate: c_int = 275;
pub const kCFISO8601DateFormatWithFullTime: c_int = 1632;
pub const kCFISO8601DateFormatWithInternetDateTime: c_int = 1907;
const enum_unnamed_55 = c_uint;
pub extern fn CFDateFormatterCreateISO8601Formatter(allocator: CFAllocatorRef, formatOptions: CFISO8601DateFormatOptions) CFDateFormatterRef;
pub extern fn CFDateFormatterCreate(allocator: CFAllocatorRef, locale: CFLocaleRef, dateStyle: CFDateFormatterStyle, timeStyle: CFDateFormatterStyle) CFDateFormatterRef;
pub extern fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) CFLocaleRef;
pub extern fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) CFDateFormatterStyle;
pub extern fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) CFDateFormatterStyle;
pub extern fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) CFStringRef;
pub extern fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef) void;
pub extern fn CFDateFormatterCreateStringWithDate(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, date: CFDateRef) CFStringRef;
pub extern fn CFDateFormatterCreateStringWithAbsoluteTime(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, at: CFAbsoluteTime) CFStringRef;
pub extern fn CFDateFormatterCreateDateFromString(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, string: CFStringRef, rangep: [*c]CFRange) CFDateRef;
pub extern fn CFDateFormatterGetAbsoluteTimeFromString(formatter: CFDateFormatterRef, string: CFStringRef, rangep: [*c]CFRange, atp: [*c]CFAbsoluteTime) Boolean;
pub extern fn CFDateFormatterSetProperty(formatter: CFDateFormatterRef, key: CFStringRef, value: CFTypeRef) void;
pub extern fn CFDateFormatterCopyProperty(formatter: CFDateFormatterRef, key: CFDateFormatterKey) CFTypeRef;
pub extern const kCFDateFormatterIsLenient: CFDateFormatterKey;
pub extern const kCFDateFormatterTimeZone: CFDateFormatterKey;
pub extern const kCFDateFormatterCalendarName: CFDateFormatterKey;
pub extern const kCFDateFormatterDefaultFormat: CFDateFormatterKey;
pub extern const kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
pub extern const kCFDateFormatterDefaultDate: CFDateFormatterKey;
pub extern const kCFDateFormatterCalendar: CFDateFormatterKey;
pub extern const kCFDateFormatterEraSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterAMSymbol: CFDateFormatterKey;
pub extern const kCFDateFormatterPMSymbol: CFDateFormatterKey;
pub extern const kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
pub extern const kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
pub const struct___CFBoolean = opaque {};
pub const CFBooleanRef = ?*const struct___CFBoolean;
pub extern const kCFBooleanTrue: CFBooleanRef;
pub extern const kCFBooleanFalse: CFBooleanRef;
pub extern fn CFBooleanGetTypeID() CFTypeID;
pub extern fn CFBooleanGetValue(boolean: CFBooleanRef) Boolean;
pub const CFNumberType = CFIndex;
pub const kCFNumberSInt8Type: c_int = 1;
pub const kCFNumberSInt16Type: c_int = 2;
pub const kCFNumberSInt32Type: c_int = 3;
pub const kCFNumberSInt64Type: c_int = 4;
pub const kCFNumberFloat32Type: c_int = 5;
pub const kCFNumberFloat64Type: c_int = 6;
pub const kCFNumberCharType: c_int = 7;
pub const kCFNumberShortType: c_int = 8;
pub const kCFNumberIntType: c_int = 9;
pub const kCFNumberLongType: c_int = 10;
pub const kCFNumberLongLongType: c_int = 11;
pub const kCFNumberFloatType: c_int = 12;
pub const kCFNumberDoubleType: c_int = 13;
pub const kCFNumberCFIndexType: c_int = 14;
pub const kCFNumberNSIntegerType: c_int = 15;
pub const kCFNumberCGFloatType: c_int = 16;
pub const kCFNumberMaxType: c_int = 16;
const enum_unnamed_56 = c_uint;
pub const struct___CFNumber = opaque {};
pub const CFNumberRef = ?*const struct___CFNumber;
pub extern const kCFNumberPositiveInfinity: CFNumberRef;
pub extern const kCFNumberNegativeInfinity: CFNumberRef;
pub extern const kCFNumberNaN: CFNumberRef;
pub extern fn CFNumberGetTypeID() CFTypeID;
pub extern fn CFNumberCreate(allocator: CFAllocatorRef, theType: CFNumberType, valuePtr: ?*const anyopaque) CFNumberRef;
pub extern fn CFNumberGetType(number: CFNumberRef) CFNumberType;
pub extern fn CFNumberGetByteSize(number: CFNumberRef) CFIndex;
pub extern fn CFNumberIsFloatType(number: CFNumberRef) Boolean;
pub extern fn CFNumberGetValue(number: CFNumberRef, theType: CFNumberType, valuePtr: ?*anyopaque) Boolean;
pub extern fn CFNumberCompare(number: CFNumberRef, otherNumber: CFNumberRef, context: ?*anyopaque) CFComparisonResult;
pub const CFNumberFormatterKey = CFStringRef;
pub const struct___CFNumberFormatter = opaque {};
pub const CFNumberFormatterRef = ?*struct___CFNumberFormatter;
pub extern fn CFNumberFormatterGetTypeID() CFTypeID;
pub const CFNumberFormatterStyle = CFIndex;
pub const kCFNumberFormatterNoStyle: c_int = 0;
pub const kCFNumberFormatterDecimalStyle: c_int = 1;
pub const kCFNumberFormatterCurrencyStyle: c_int = 2;
pub const kCFNumberFormatterPercentStyle: c_int = 3;
pub const kCFNumberFormatterScientificStyle: c_int = 4;
pub const kCFNumberFormatterSpellOutStyle: c_int = 5;
pub const kCFNumberFormatterOrdinalStyle: c_int = 6;
pub const kCFNumberFormatterCurrencyISOCodeStyle: c_int = 8;
pub const kCFNumberFormatterCurrencyPluralStyle: c_int = 9;
pub const kCFNumberFormatterCurrencyAccountingStyle: c_int = 10;
const enum_unnamed_57 = c_uint;
pub extern fn CFNumberFormatterCreate(allocator: CFAllocatorRef, locale: CFLocaleRef, style: CFNumberFormatterStyle) CFNumberFormatterRef;
pub extern fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) CFLocaleRef;
pub extern fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) CFNumberFormatterStyle;
pub extern fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) CFStringRef;
pub extern fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef) void;
pub extern fn CFNumberFormatterCreateStringWithNumber(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, number: CFNumberRef) CFStringRef;
pub extern fn CFNumberFormatterCreateStringWithValue(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, numberType: CFNumberType, valuePtr: ?*const anyopaque) CFStringRef;
pub const CFNumberFormatterOptionFlags = CFOptionFlags;
pub const kCFNumberFormatterParseIntegersOnly: c_int = 1;
const enum_unnamed_58 = c_uint;
pub extern fn CFNumberFormatterCreateNumberFromString(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, string: CFStringRef, rangep: [*c]CFRange, options: CFOptionFlags) CFNumberRef;
pub extern fn CFNumberFormatterGetValueFromString(formatter: CFNumberFormatterRef, string: CFStringRef, rangep: [*c]CFRange, numberType: CFNumberType, valuePtr: ?*anyopaque) Boolean;
pub extern fn CFNumberFormatterSetProperty(formatter: CFNumberFormatterRef, key: CFNumberFormatterKey, value: CFTypeRef) void;
pub extern fn CFNumberFormatterCopyProperty(formatter: CFNumberFormatterRef, key: CFNumberFormatterKey) CFTypeRef;
pub extern const kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
pub extern const kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinusSign: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPlusSign: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
pub extern const kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
pub extern const kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
pub extern const kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
pub extern const kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
pub extern const kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMultiplier: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterIsLenient: CFNumberFormatterKey;
pub extern const kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
pub const CFNumberFormatterRoundingMode = CFIndex;
pub const kCFNumberFormatterRoundCeiling: c_int = 0;
pub const kCFNumberFormatterRoundFloor: c_int = 1;
pub const kCFNumberFormatterRoundDown: c_int = 2;
pub const kCFNumberFormatterRoundUp: c_int = 3;
pub const kCFNumberFormatterRoundHalfEven: c_int = 4;
pub const kCFNumberFormatterRoundHalfDown: c_int = 5;
pub const kCFNumberFormatterRoundHalfUp: c_int = 6;
const enum_unnamed_59 = c_uint;
pub const CFNumberFormatterPadPosition = CFIndex;
pub const kCFNumberFormatterPadBeforePrefix: c_int = 0;
pub const kCFNumberFormatterPadAfterPrefix: c_int = 1;
pub const kCFNumberFormatterPadBeforeSuffix: c_int = 2;
pub const kCFNumberFormatterPadAfterSuffix: c_int = 3;
const enum_unnamed_60 = c_uint;
pub extern fn CFNumberFormatterGetDecimalInfoForCurrencyCode(currencyCode: CFStringRef, defaultFractionDigits: [*c]i32, roundingIncrement: [*c]f64) Boolean;
pub extern const kCFPreferencesAnyApplication: CFStringRef;
pub extern const kCFPreferencesCurrentApplication: CFStringRef;
pub extern const kCFPreferencesAnyHost: CFStringRef;
pub extern const kCFPreferencesCurrentHost: CFStringRef;
pub extern const kCFPreferencesAnyUser: CFStringRef;
pub extern const kCFPreferencesCurrentUser: CFStringRef;
pub extern fn CFPreferencesCopyAppValue(key: CFStringRef, applicationID: CFStringRef) CFPropertyListRef;
pub extern fn CFPreferencesGetAppBooleanValue(key: CFStringRef, applicationID: CFStringRef, keyExistsAndHasValidFormat: [*c]Boolean) Boolean;
pub extern fn CFPreferencesGetAppIntegerValue(key: CFStringRef, applicationID: CFStringRef, keyExistsAndHasValidFormat: [*c]Boolean) CFIndex;
pub extern fn CFPreferencesSetAppValue(key: CFStringRef, value: CFPropertyListRef, applicationID: CFStringRef) void;
pub extern fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef) void;
pub extern fn CFPreferencesRemoveSuitePreferencesFromApp(applicationID: CFStringRef, suiteID: CFStringRef) void;
pub extern fn CFPreferencesAppSynchronize(applicationID: CFStringRef) Boolean;
pub extern fn CFPreferencesCopyValue(key: CFStringRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFPropertyListRef;
pub extern fn CFPreferencesCopyMultiple(keysToFetch: CFArrayRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFDictionaryRef;
pub extern fn CFPreferencesSetValue(key: CFStringRef, value: CFPropertyListRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) void;
pub extern fn CFPreferencesSetMultiple(keysToSet: CFDictionaryRef, keysToRemove: CFArrayRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) void;
pub extern fn CFPreferencesSynchronize(applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) Boolean;
pub extern fn CFPreferencesCopyApplicationList(userName: CFStringRef, hostName: CFStringRef) CFArrayRef;
pub extern fn CFPreferencesCopyKeyList(applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFArrayRef;
pub extern fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) Boolean;
pub const boolean_t = c_int;
pub const natural_t = __darwin_natural_t;
pub const integer_t = c_int;
pub const vm_offset_t = usize;
pub const vm_size_t = usize;
pub const mach_vm_address_t = u64;
pub const mach_vm_offset_t = u64;
pub const mach_vm_size_t = u64;
pub const vm_map_offset_t = u64;
pub const vm_map_address_t = u64;
pub const vm_map_size_t = u64;
pub const vm32_offset_t = u32;
pub const vm32_address_t = u32;
pub const vm32_size_t = u32;
pub const mach_port_context_t = vm_offset_t;
pub const mach_port_name_t = natural_t;
pub const mach_port_name_array_t = [*c]mach_port_name_t;
pub const mach_port_t = __darwin_mach_port_t;
pub const mach_port_array_t = [*c]mach_port_t;
pub const mach_port_right_t = natural_t;
pub const mach_port_type_t = natural_t;
pub const mach_port_type_array_t = [*c]mach_port_type_t;
pub const mach_port_urefs_t = natural_t;
pub const mach_port_delta_t = integer_t;
pub const mach_port_seqno_t = natural_t;
pub const mach_port_mscount_t = natural_t;
pub const mach_port_msgcount_t = natural_t;
pub const mach_port_rights_t = natural_t;
pub const mach_port_srights_t = c_uint;
pub const struct_mach_port_status = extern struct {
    mps_pset: mach_port_rights_t = @import("std").mem.zeroes(mach_port_rights_t),
    mps_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    mps_mscount: mach_port_mscount_t = @import("std").mem.zeroes(mach_port_mscount_t),
    mps_qlimit: mach_port_msgcount_t = @import("std").mem.zeroes(mach_port_msgcount_t),
    mps_msgcount: mach_port_msgcount_t = @import("std").mem.zeroes(mach_port_msgcount_t),
    mps_sorights: mach_port_rights_t = @import("std").mem.zeroes(mach_port_rights_t),
    mps_srights: boolean_t = @import("std").mem.zeroes(boolean_t),
    mps_pdrequest: boolean_t = @import("std").mem.zeroes(boolean_t),
    mps_nsrequest: boolean_t = @import("std").mem.zeroes(boolean_t),
    mps_flags: natural_t = @import("std").mem.zeroes(natural_t),
};
pub const mach_port_status_t = struct_mach_port_status;
pub const struct_mach_port_limits = extern struct {
    mpl_qlimit: mach_port_msgcount_t = @import("std").mem.zeroes(mach_port_msgcount_t),
};
pub const mach_port_limits_t = struct_mach_port_limits;
pub const struct_mach_port_info_ext = extern struct {
    mpie_status: mach_port_status_t = @import("std").mem.zeroes(mach_port_status_t),
    mpie_boost_cnt: mach_port_msgcount_t = @import("std").mem.zeroes(mach_port_msgcount_t),
    reserved: [6]u32 = @import("std").mem.zeroes([6]u32),
};
pub const mach_port_info_ext_t = struct_mach_port_info_ext;
pub const struct_mach_port_guard_info = extern struct {
    mpgi_guard: u64 = @import("std").mem.zeroes(u64),
};
pub const mach_port_guard_info_t = struct_mach_port_guard_info;
pub const mach_port_info_t = [*c]integer_t;
pub const mach_port_flavor_t = c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/port.h:327:26: warning: struct demoted to opaque type - has bitfield
pub const struct_mach_port_qos = opaque {};
pub const mach_port_qos_t = struct_mach_port_qos;
pub const struct_mach_service_port_info = extern struct {
    mspi_string_name: [255]u8 = @import("std").mem.zeroes([255]u8),
    mspi_domain_type: u8 = @import("std").mem.zeroes(u8),
};
pub const mach_service_port_info_data_t = struct_mach_service_port_info;
pub const mach_service_port_info_t = [*c]struct_mach_service_port_info;
const union_unnamed_61 = extern union {
    reserved: [2]u64,
    work_interval_port: mach_port_name_t,
    service_port_info: mach_service_port_info_t,
    service_port_name: mach_port_name_t,
};
pub const struct_mach_port_options = extern struct {
    flags: u32 = @import("std").mem.zeroes(u32),
    mpl: mach_port_limits_t = @import("std").mem.zeroes(mach_port_limits_t),
    unnamed_0: union_unnamed_61 = @import("std").mem.zeroes(union_unnamed_61),
};
pub const mach_port_options_t = struct_mach_port_options;
pub const mach_port_options_ptr_t = [*c]mach_port_options_t;
pub const kGUARD_EXC_DESTROY: c_int = 1;
pub const kGUARD_EXC_MOD_REFS: c_int = 2;
pub const kGUARD_EXC_INVALID_OPTIONS: c_int = 3;
pub const kGUARD_EXC_SET_CONTEXT: c_int = 4;
pub const kGUARD_EXC_THREAD_SET_STATE: c_int = 5;
pub const kGUARD_EXC_UNGUARDED: c_int = 8;
pub const kGUARD_EXC_INCORRECT_GUARD: c_int = 16;
pub const kGUARD_EXC_IMMOVABLE: c_int = 32;
pub const kGUARD_EXC_STRICT_REPLY: c_int = 64;
pub const kGUARD_EXC_MSG_FILTERED: c_int = 128;
pub const kGUARD_EXC_INVALID_RIGHT: c_int = 256;
pub const kGUARD_EXC_INVALID_NAME: c_int = 512;
pub const kGUARD_EXC_INVALID_VALUE: c_int = 1024;
pub const kGUARD_EXC_INVALID_ARGUMENT: c_int = 2048;
pub const kGUARD_EXC_RIGHT_EXISTS: c_int = 4096;
pub const kGUARD_EXC_KERN_NO_SPACE: c_int = 8192;
pub const kGUARD_EXC_KERN_FAILURE: c_int = 16384;
pub const kGUARD_EXC_KERN_RESOURCE: c_int = 32768;
pub const kGUARD_EXC_SEND_INVALID_REPLY: c_int = 65536;
pub const kGUARD_EXC_SEND_INVALID_VOUCHER: c_int = 131072;
pub const kGUARD_EXC_SEND_INVALID_RIGHT: c_int = 262144;
pub const kGUARD_EXC_RCV_INVALID_NAME: c_int = 524288;
pub const kGUARD_EXC_RCV_GUARDED_DESC: c_int = 1048576;
pub const kGUARD_EXC_MOD_REFS_NON_FATAL: c_int = 2097152;
pub const kGUARD_EXC_IMMOVABLE_NON_FATAL: c_int = 4194304;
pub const kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS: c_int = 8388608;
pub const enum_mach_port_guard_exception_codes = c_uint;
pub const CFRunLoopMode = CFStringRef;
pub const struct___CFRunLoop = opaque {};
pub const CFRunLoopRef = ?*struct___CFRunLoop;
pub const struct___CFRunLoopSource = opaque {};
pub const CFRunLoopSourceRef = ?*struct___CFRunLoopSource;
pub const struct___CFRunLoopObserver = opaque {};
pub const CFRunLoopObserverRef = ?*struct___CFRunLoopObserver;
pub const struct___CFRunLoopTimer = opaque {};
pub const CFRunLoopTimerRef = ?*struct___CFRunLoopTimer;
pub const CFRunLoopRunResult = SInt32;
pub const kCFRunLoopRunFinished: c_int = 1;
pub const kCFRunLoopRunStopped: c_int = 2;
pub const kCFRunLoopRunTimedOut: c_int = 3;
pub const kCFRunLoopRunHandledSource: c_int = 4;
const enum_unnamed_62 = c_uint;
pub const CFRunLoopActivity = CFOptionFlags;
pub const kCFRunLoopEntry: c_int = 1;
pub const kCFRunLoopBeforeTimers: c_int = 2;
pub const kCFRunLoopBeforeSources: c_int = 4;
pub const kCFRunLoopBeforeWaiting: c_int = 32;
pub const kCFRunLoopAfterWaiting: c_int = 64;
pub const kCFRunLoopExit: c_int = 128;
pub const kCFRunLoopAllActivities: c_int = 268435455;
const enum_unnamed_63 = c_uint;
pub extern const kCFRunLoopDefaultMode: CFRunLoopMode;
pub extern const kCFRunLoopCommonModes: CFRunLoopMode;
pub extern fn CFRunLoopGetTypeID() CFTypeID;
pub extern fn CFRunLoopGetCurrent() CFRunLoopRef;
pub extern fn CFRunLoopGetMain() CFRunLoopRef;
pub extern fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) CFRunLoopMode;
pub extern fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) CFArrayRef;
pub extern fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) CFAbsoluteTime;
pub extern fn CFRunLoopRun() void;
pub extern fn CFRunLoopRunInMode(mode: CFRunLoopMode, seconds: CFTimeInterval, returnAfterSourceHandled: Boolean) CFRunLoopRunResult;
pub extern fn CFRunLoopIsWaiting(rl: CFRunLoopRef) Boolean;
pub extern fn CFRunLoopWakeUp(rl: CFRunLoopRef) void;
pub extern fn CFRunLoopStop(rl: CFRunLoopRef) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:81:16: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopPerformBlock = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:81:16
pub extern fn CFRunLoopContainsSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopContainsObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopContainsTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) void;
pub const CFRunLoopSourceContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFStringRef),
    equal: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean = @import("std").mem.zeroes(?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean),
    hash: ?*const fn (?*const anyopaque) callconv(.C) CFHashCode = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFHashCode),
    schedule: ?*const fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.C) void),
    cancel: ?*const fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.C) void),
    perform: ?*const fn (?*anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) void),
};
pub const CFRunLoopSourceContext1 = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFStringRef),
    equal: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean = @import("std").mem.zeroes(?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean),
    hash: ?*const fn (?*const anyopaque) callconv(.C) CFHashCode = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFHashCode),
    getPort: ?*const fn (?*anyopaque) callconv(.C) mach_port_t = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) mach_port_t),
    perform: ?*const fn (?*anyopaque, CFIndex, CFAllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque = @import("std").mem.zeroes(?*const fn (?*anyopaque, CFIndex, CFAllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque),
};
pub extern fn CFRunLoopSourceGetTypeID() CFTypeID;
pub extern fn CFRunLoopSourceCreate(allocator: CFAllocatorRef, order: CFIndex, context: [*c]CFRunLoopSourceContext) CFRunLoopSourceRef;
pub extern fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) CFIndex;
pub extern fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef) void;
pub extern fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) Boolean;
pub extern fn CFRunLoopSourceGetContext(source: CFRunLoopSourceRef, context: [*c]CFRunLoopSourceContext) void;
pub extern fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef) void;
pub const CFRunLoopObserverContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFStringRef),
};
pub const CFRunLoopObserverCallBack = ?*const fn (CFRunLoopObserverRef, CFRunLoopActivity, ?*anyopaque) callconv(.C) void;
pub extern fn CFRunLoopObserverGetTypeID() CFTypeID;
pub extern fn CFRunLoopObserverCreate(allocator: CFAllocatorRef, activities: CFOptionFlags, repeats: Boolean, order: CFIndex, callout: CFRunLoopObserverCallBack, context: [*c]CFRunLoopObserverContext) CFRunLoopObserverRef; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:150:32: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopObserverCreateWithHandler = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:150:32
pub extern fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) CFOptionFlags;
pub extern fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) Boolean;
pub extern fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) CFIndex;
pub extern fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef) void;
pub extern fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) Boolean;
pub extern fn CFRunLoopObserverGetContext(observer: CFRunLoopObserverRef, context: [*c]CFRunLoopObserverContext) void;
pub const CFRunLoopTimerContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFStringRef),
};
pub const CFRunLoopTimerCallBack = ?*const fn (CFRunLoopTimerRef, ?*anyopaque) callconv(.C) void;
pub extern fn CFRunLoopTimerGetTypeID() CFTypeID;
pub extern fn CFRunLoopTimerCreate(allocator: CFAllocatorRef, fireDate: CFAbsoluteTime, interval: CFTimeInterval, flags: CFOptionFlags, order: CFIndex, callout: CFRunLoopTimerCallBack, context: [*c]CFRunLoopTimerContext) CFRunLoopTimerRef; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:174:29: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopTimerCreateWithHandler = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:174:29
pub extern fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) CFAbsoluteTime;
pub extern fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime) void;
pub extern fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) CFTimeInterval;
pub extern fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) Boolean;
pub extern fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) CFIndex;
pub extern fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef) void;
pub extern fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) Boolean;
pub extern fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: [*c]CFRunLoopTimerContext) void;
pub extern fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) CFTimeInterval;
pub extern fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval) void;
pub const struct___CFSocket = opaque {};
pub const CFSocketRef = ?*struct___CFSocket;
pub const CFSocketError = CFIndex;
pub const kCFSocketSuccess: c_int = 0;
pub const kCFSocketError: c_int = -1;
pub const kCFSocketTimeout: c_int = -2;
const enum_unnamed_64 = c_int;
pub const CFSocketSignature = extern struct {
    protocolFamily: SInt32 = @import("std").mem.zeroes(SInt32),
    socketType: SInt32 = @import("std").mem.zeroes(SInt32),
    protocol: SInt32 = @import("std").mem.zeroes(SInt32),
    address: CFDataRef = @import("std").mem.zeroes(CFDataRef),
};
pub const CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketNoCallBack: c_int = 0;
pub const kCFSocketReadCallBack: c_int = 1;
pub const kCFSocketAcceptCallBack: c_int = 2;
pub const kCFSocketDataCallBack: c_int = 3;
pub const kCFSocketConnectCallBack: c_int = 4;
pub const kCFSocketWriteCallBack: c_int = 8;
const enum_unnamed_65 = c_uint;
pub const kCFSocketAutomaticallyReenableReadCallBack: c_int = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: c_int = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: c_int = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: c_int = 8;
pub const kCFSocketLeaveErrors: c_int = 64;
pub const kCFSocketCloseOnInvalidate: c_int = 128;
const enum_unnamed_66 = c_uint;
pub const CFSocketCallBack = ?*const fn (CFSocketRef, CFSocketCallBackType, CFDataRef, ?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const CFSocketContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFStringRef),
};
pub const CFSocketNativeHandle = c_int;
pub extern fn CFSocketGetTypeID() CFTypeID;
pub extern fn CFSocketCreate(allocator: CFAllocatorRef, protocolFamily: SInt32, socketType: SInt32, protocol: SInt32, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateWithNative(allocator: CFAllocatorRef, sock: CFSocketNativeHandle, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateWithSocketSignature(allocator: CFAllocatorRef, signature: [*c]const CFSocketSignature, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateConnectedToSocketSignature(allocator: CFAllocatorRef, signature: [*c]const CFSocketSignature, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext, timeout: CFTimeInterval) CFSocketRef;
pub extern fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) CFSocketError;
pub extern fn CFSocketConnectToAddress(s: CFSocketRef, address: CFDataRef, timeout: CFTimeInterval) CFSocketError;
pub extern fn CFSocketInvalidate(s: CFSocketRef) void;
pub extern fn CFSocketIsValid(s: CFSocketRef) Boolean;
pub extern fn CFSocketCopyAddress(s: CFSocketRef) CFDataRef;
pub extern fn CFSocketCopyPeerAddress(s: CFSocketRef) CFDataRef;
pub extern fn CFSocketGetContext(s: CFSocketRef, context: [*c]CFSocketContext) void;
pub extern fn CFSocketGetNative(s: CFSocketRef) CFSocketNativeHandle;
pub extern fn CFSocketCreateRunLoopSource(allocator: CFAllocatorRef, s: CFSocketRef, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFSocketGetSocketFlags(s: CFSocketRef) CFOptionFlags;
pub extern fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags) void;
pub extern fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFSocketSendData(s: CFSocketRef, address: CFDataRef, data: CFDataRef, timeout: CFTimeInterval) CFSocketError;
pub extern fn CFSocketRegisterValue(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, value: CFPropertyListRef) CFSocketError;
pub extern fn CFSocketCopyRegisteredValue(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, value: [*c]CFPropertyListRef, nameServerAddress: [*c]CFDataRef) CFSocketError;
pub extern fn CFSocketRegisterSocketSignature(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, signature: [*c]const CFSocketSignature) CFSocketError;
pub extern fn CFSocketCopyRegisteredSocketSignature(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, signature: [*c]CFSocketSignature, nameServerAddress: [*c]CFDataRef) CFSocketError;
pub extern fn CFSocketUnregister(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef) CFSocketError;
pub extern fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16) void;
pub extern fn CFSocketGetDefaultNameRegistryPortNumber() UInt16;
pub extern const kCFSocketCommandKey: CFStringRef;
pub extern const kCFSocketNameKey: CFStringRef;
pub extern const kCFSocketValueKey: CFStringRef;
pub extern const kCFSocketResultKey: CFStringRef;
pub extern const kCFSocketErrorKey: CFStringRef;
pub extern const kCFSocketRegisterCommand: CFStringRef;
pub extern const kCFSocketRetrieveCommand: CFStringRef;
pub const os_function_t = ?*const fn (?*anyopaque) callconv(.C) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:330:16: warning: unsupported type: 'BlockPointer'
pub const os_block_t = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:330:16
pub const struct_accessx_descriptor = extern struct {
    ad_name_offset: c_uint = @import("std").mem.zeroes(c_uint),
    ad_flags: c_int = @import("std").mem.zeroes(c_int),
    ad_pad: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub extern fn getattrlistbulk(c_int, ?*anyopaque, ?*anyopaque, usize, u64) c_int;
pub extern fn getattrlistat(c_int, [*c]const u8, ?*anyopaque, ?*anyopaque, usize, c_ulong) c_int;
pub extern fn setattrlistat(c_int, [*c]const u8, ?*anyopaque, ?*anyopaque, usize, u32) c_int;
pub extern fn freadlink(c_int, noalias [*c]u8, usize) isize;
pub extern fn faccessat(c_int, [*c]const u8, c_int, c_int) c_int;
pub extern fn fchownat(c_int, [*c]const u8, uid_t, gid_t, c_int) c_int;
pub extern fn linkat(c_int, [*c]const u8, c_int, [*c]const u8, c_int) c_int;
pub extern fn readlinkat(c_int, [*c]const u8, [*c]u8, usize) isize;
pub extern fn symlinkat([*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn unlinkat(c_int, [*c]const u8, c_int) c_int;
pub extern fn _exit(c_int) noreturn;
pub extern fn access([*c]const u8, c_int) c_int;
pub extern fn alarm(c_uint) c_uint;
pub extern fn chdir([*c]const u8) c_int;
pub extern fn chown([*c]const u8, uid_t, gid_t) c_int;
pub extern fn close(c_int) c_int;
pub extern fn dup(c_int) c_int;
pub extern fn dup2(c_int, c_int) c_int;
pub extern fn execl(__path: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execle(__path: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execlp(__file: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execv(__path: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn execve(__file: [*c]const u8, __argv: [*c]const [*c]u8, __envp: [*c]const [*c]u8) c_int;
pub extern fn execvp(__file: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn fork() pid_t;
pub extern fn fpathconf(c_int, c_int) c_long;
pub extern fn getcwd([*c]u8, usize) [*c]u8;
pub extern fn getegid() gid_t;
pub extern fn geteuid() uid_t;
pub extern fn getgid() gid_t;
pub extern fn getgroups(c_int, [*c]gid_t) c_int;
pub extern fn getlogin() [*c]u8;
pub extern fn getpgrp() pid_t;
pub extern fn getpid() pid_t;
pub extern fn getppid() pid_t;
pub extern fn getuid() uid_t;
pub extern fn isatty(c_int) c_int;
pub extern fn link([*c]const u8, [*c]const u8) c_int;
pub extern fn lseek(c_int, off_t, c_int) off_t;
pub extern fn pathconf([*c]const u8, c_int) c_long;
pub extern fn pause() c_int;
pub extern fn pipe([*c]c_int) c_int;
pub extern fn read(c_int, ?*anyopaque, usize) isize;
pub extern fn rmdir([*c]const u8) c_int;
pub extern fn setgid(gid_t) c_int;
pub extern fn setpgid(pid_t, pid_t) c_int;
pub extern fn setsid() pid_t;
pub extern fn setuid(uid_t) c_int;
pub extern fn sleep(c_uint) c_uint;
pub extern fn sysconf(c_int) c_long;
pub extern fn tcgetpgrp(c_int) pid_t;
pub extern fn tcsetpgrp(c_int, pid_t) c_int;
pub extern fn ttyname(c_int) [*c]u8;
pub extern fn ttyname_r(c_int, [*c]u8, usize) c_int;
pub extern fn unlink([*c]const u8) c_int;
pub extern fn write(__fd: c_int, __buf: ?*const anyopaque, __nbyte: usize) isize;
pub extern fn confstr(c_int, [*c]u8, usize) usize;
pub extern fn getopt(c_int, [*c]const [*c]u8, [*c]const u8) c_int;
pub extern var optarg: [*c]u8;
pub extern var optind: c_int;
pub extern var opterr: c_int;
pub extern var optopt: c_int;
pub extern fn brk(?*const anyopaque) ?*anyopaque;
pub extern fn chroot([*c]const u8) c_int;
pub extern fn crypt([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn encrypt([*c]u8, c_int) void;
pub extern fn fchdir(c_int) c_int;
pub extern fn gethostid() c_long;
pub extern fn getpgid(pid_t) pid_t;
pub extern fn getsid(pid_t) pid_t;
pub extern fn getdtablesize() c_int;
pub extern fn getpagesize() c_int;
pub extern fn getpass([*c]const u8) [*c]u8;
pub extern fn getwd([*c]u8) [*c]u8;
pub extern fn lchown([*c]const u8, uid_t, gid_t) c_int;
pub extern fn lockf(c_int, c_int, off_t) c_int;
pub extern fn nice(c_int) c_int;
pub extern fn pread(__fd: c_int, __buf: ?*anyopaque, __nbyte: usize, __offset: off_t) isize;
pub extern fn pwrite(__fd: c_int, __buf: ?*const anyopaque, __nbyte: usize, __offset: off_t) isize;
pub extern fn sbrk(c_int) ?*anyopaque;
pub extern fn setpgrp() pid_t;
pub extern fn setregid(gid_t, gid_t) c_int;
pub extern fn setreuid(uid_t, uid_t) c_int;
pub extern fn sync() void;
pub extern fn truncate([*c]const u8, off_t) c_int;
pub extern fn ualarm(useconds_t, useconds_t) useconds_t;
pub extern fn usleep(useconds_t) c_int;
pub extern fn vfork() c_int;
pub extern fn fsync(c_int) c_int;
pub extern fn ftruncate(c_int, off_t) c_int;
pub extern fn getlogin_r([*c]u8, usize) c_int;
pub extern fn fchown(c_int, uid_t, gid_t) c_int;
pub extern fn gethostname([*c]u8, usize) c_int;
pub extern fn readlink(noalias [*c]const u8, noalias [*c]u8, usize) isize;
pub extern fn setegid(gid_t) c_int;
pub extern fn seteuid(uid_t) c_int;
pub extern fn symlink([*c]const u8, [*c]const u8) c_int;
pub extern fn pselect(c_int, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]const struct_timespec, noalias [*c]const sigset_t) c_int;
pub extern fn select(c_int, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]struct_timeval) c_int;
pub const uuid_t = __darwin_uuid_t;
pub extern fn accessx_np([*c]const struct_accessx_descriptor, usize, [*c]c_int, uid_t) c_int;
pub extern fn acct([*c]const u8) c_int;
pub extern fn add_profil([*c]u8, usize, c_ulong, c_uint) c_int;
pub extern fn endusershell() void;
pub extern fn execvP(__file: [*c]const u8, __searchpath: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn fflagstostr(c_ulong) [*c]u8;
pub extern fn getdomainname([*c]u8, c_int) c_int;
pub extern fn getgrouplist([*c]const u8, c_int, [*c]c_int, [*c]c_int) c_int;
pub extern fn gethostuuid([*c]u8, [*c]const struct_timespec) c_int;
pub extern fn getmode(?*const anyopaque, mode_t) mode_t;
pub extern fn getpeereid(c_int, [*c]uid_t, [*c]gid_t) c_int;
pub extern fn getsgroups_np([*c]c_int, [*c]u8) c_int;
pub extern fn getusershell() [*c]u8;
pub extern fn getwgroups_np([*c]c_int, [*c]u8) c_int;
pub extern fn initgroups([*c]const u8, c_int) c_int;
pub extern fn issetugid() c_int;
pub extern fn mkdtemp([*c]u8) [*c]u8;
pub extern fn mknod([*c]const u8, mode_t, dev_t) c_int;
pub extern fn mkpath_np(path: [*c]const u8, omode: mode_t) c_int;
pub extern fn mkpathat_np(dfd: c_int, path: [*c]const u8, omode: mode_t) c_int;
pub extern fn mkstemps([*c]u8, c_int) c_int;
pub extern fn mkostemp(path: [*c]u8, oflags: c_int) c_int;
pub extern fn mkostemps(path: [*c]u8, slen: c_int, oflags: c_int) c_int;
pub extern fn mkstemp_dprotected_np(path: [*c]u8, dpclass: c_int, dpflags: c_int) c_int;
pub extern fn mkdtempat_np(dfd: c_int, path: [*c]u8) [*c]u8;
pub extern fn mkstempsat_np(dfd: c_int, path: [*c]u8, slen: c_int) c_int;
pub extern fn mkostempsat_np(dfd: c_int, path: [*c]u8, slen: c_int, oflags: c_int) c_int;
pub extern fn nfssvc(c_int, ?*anyopaque) c_int;
pub extern fn profil([*c]u8, usize, c_ulong, c_uint) c_int;
pub extern fn pthread_setugid_np(uid_t, gid_t) c_int;
pub extern fn pthread_getugid_np([*c]uid_t, [*c]gid_t) c_int;
pub extern fn reboot(c_int) c_int;
pub extern fn revoke([*c]const u8) c_int;
pub extern fn rcmd([*c][*c]u8, c_int, [*c]const u8, [*c]const u8, [*c]const u8, [*c]c_int) c_int;
pub extern fn rcmd_af([*c][*c]u8, c_int, [*c]const u8, [*c]const u8, [*c]const u8, [*c]c_int, c_int) c_int;
pub extern fn rresvport([*c]c_int) c_int;
pub extern fn rresvport_af([*c]c_int, c_int) c_int;
pub extern fn iruserok(c_ulong, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn iruserok_sa(?*const anyopaque, c_int, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn ruserok([*c]const u8, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn setdomainname([*c]const u8, c_int) c_int;
pub extern fn setgroups(c_int, [*c]const gid_t) c_int;
pub extern fn sethostid(c_long) void;
pub extern fn sethostname([*c]const u8, c_int) c_int;
pub extern fn setlogin([*c]const u8) c_int;
pub extern fn setmode([*c]const u8) ?*anyopaque;
pub extern fn setrgid(gid_t) c_int;
pub extern fn setruid(uid_t) c_int;
pub extern fn setsgroups_np(c_int, [*c]const u8) c_int;
pub extern fn setusershell() void;
pub extern fn setwgroups_np(c_int, [*c]const u8) c_int;
pub extern fn strtofflags([*c][*c]u8, [*c]c_ulong, [*c]c_ulong) c_int;
pub extern fn swapon([*c]const u8) c_int;
pub extern fn ttyslot() c_int;
pub extern fn undelete([*c]const u8) c_int;
pub extern fn unwhiteout([*c]const u8) c_int;
pub extern fn syscall(c_int, ...) c_int;
pub extern fn fgetattrlist(c_int, ?*anyopaque, ?*anyopaque, usize, c_uint) c_int;
pub extern fn fsetattrlist(c_int, ?*anyopaque, ?*anyopaque, usize, c_uint) c_int;
pub extern fn getattrlist([*c]const u8, ?*anyopaque, ?*anyopaque, usize, c_uint) c_int;
pub extern fn setattrlist([*c]const u8, ?*anyopaque, ?*anyopaque, usize, c_uint) c_int;
pub extern fn exchangedata([*c]const u8, [*c]const u8, c_uint) c_int;
pub extern fn getdirentriesattr(c_int, ?*anyopaque, ?*anyopaque, usize, [*c]c_uint, [*c]c_uint, [*c]c_uint, c_uint) c_int;
pub const struct_fssearchblock = opaque {};
pub const struct_searchstate = opaque {};
pub extern fn searchfs([*c]const u8, ?*struct_fssearchblock, [*c]c_ulong, c_uint, c_uint, ?*struct_searchstate) c_int;
pub extern fn fsctl([*c]const u8, c_ulong, ?*anyopaque, c_uint) c_int;
pub extern fn ffsctl(c_int, c_ulong, ?*anyopaque, c_uint) c_int;
pub extern fn fsync_volume_np(c_int, c_int) c_int;
pub extern fn sync_volume_np([*c]const u8, c_int) c_int;
pub extern var optreset: c_int;
pub const struct_flock = extern struct {
    l_start: off_t = @import("std").mem.zeroes(off_t),
    l_len: off_t = @import("std").mem.zeroes(off_t),
    l_pid: pid_t = @import("std").mem.zeroes(pid_t),
    l_type: c_short = @import("std").mem.zeroes(c_short),
    l_whence: c_short = @import("std").mem.zeroes(c_short),
};
pub const struct_flocktimeout = extern struct {
    fl: struct_flock = @import("std").mem.zeroes(struct_flock),
    timeout: struct_timespec = @import("std").mem.zeroes(struct_timespec),
};
pub const struct_radvisory = extern struct {
    ra_offset: off_t = @import("std").mem.zeroes(off_t),
    ra_count: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_fsignatures = extern struct {
    fs_file_start: off_t = @import("std").mem.zeroes(off_t),
    fs_blob_start: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fs_blob_size: usize = @import("std").mem.zeroes(usize),
    fs_fsignatures_size: usize = @import("std").mem.zeroes(usize),
    fs_cdhash: [20]u8 = @import("std").mem.zeroes([20]u8),
    fs_hash_type: c_int = @import("std").mem.zeroes(c_int),
};
pub const fsignatures_t = struct_fsignatures;
pub const struct_fsupplement = extern struct {
    fs_file_start: off_t = @import("std").mem.zeroes(off_t),
    fs_blob_start: off_t = @import("std").mem.zeroes(off_t),
    fs_blob_size: usize = @import("std").mem.zeroes(usize),
    fs_orig_fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const fsupplement_t = struct_fsupplement;
pub const struct_fchecklv = extern struct {
    lv_file_start: off_t = @import("std").mem.zeroes(off_t),
    lv_error_message_size: usize = @import("std").mem.zeroes(usize),
    lv_error_message: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const fchecklv_t = struct_fchecklv;
pub const struct_fgetsigsinfo = extern struct {
    fg_file_start: off_t = @import("std").mem.zeroes(off_t),
    fg_info_request: c_int = @import("std").mem.zeroes(c_int),
    fg_sig_is_platform: c_int = @import("std").mem.zeroes(c_int),
};
pub const fgetsigsinfo_t = struct_fgetsigsinfo;
pub const struct_fstore = extern struct {
    fst_flags: c_uint = @import("std").mem.zeroes(c_uint),
    fst_posmode: c_int = @import("std").mem.zeroes(c_int),
    fst_offset: off_t = @import("std").mem.zeroes(off_t),
    fst_length: off_t = @import("std").mem.zeroes(off_t),
    fst_bytesalloc: off_t = @import("std").mem.zeroes(off_t),
};
pub const fstore_t = struct_fstore;
pub const struct_fpunchhole = extern struct {
    fp_flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: c_uint = @import("std").mem.zeroes(c_uint),
    fp_offset: off_t = @import("std").mem.zeroes(off_t),
    fp_length: off_t = @import("std").mem.zeroes(off_t),
};
pub const fpunchhole_t = struct_fpunchhole;
pub const struct_ftrimactivefile = extern struct {
    fta_offset: off_t = @import("std").mem.zeroes(off_t),
    fta_length: off_t = @import("std").mem.zeroes(off_t),
};
pub const ftrimactivefile_t = struct_ftrimactivefile;
pub const struct_fspecread = extern struct {
    fsr_flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: c_uint = @import("std").mem.zeroes(c_uint),
    fsr_offset: off_t = @import("std").mem.zeroes(off_t),
    fsr_length: off_t = @import("std").mem.zeroes(off_t),
};
pub const fspecread_t = struct_fspecread;
pub const struct_log2phys = extern struct {
    l2p_flags: c_uint = @import("std").mem.zeroes(c_uint),
    l2p_contigbytes: off_t = @import("std").mem.zeroes(off_t),
    l2p_devoffset: off_t = @import("std").mem.zeroes(off_t),
};
pub const struct__filesec = opaque {};
pub const filesec_t = ?*struct__filesec;
pub const FILESEC_OWNER: c_int = 1;
pub const FILESEC_GROUP: c_int = 2;
pub const FILESEC_UUID: c_int = 3;
pub const FILESEC_MODE: c_int = 4;
pub const FILESEC_ACL: c_int = 5;
pub const FILESEC_GRPUUID: c_int = 6;
pub const FILESEC_ACL_RAW: c_int = 100;
pub const FILESEC_ACL_ALLOCSIZE: c_int = 101;
pub const filesec_property_t = c_uint;
pub extern fn open([*c]const u8, c_int, ...) c_int;
pub extern fn openat(c_int, [*c]const u8, c_int, ...) c_int;
pub extern fn creat([*c]const u8, mode_t) c_int;
pub extern fn fcntl(c_int, c_int, ...) c_int;
pub extern fn openx_np([*c]const u8, c_int, filesec_t) c_int;
pub extern fn open_dprotected_np([*c]const u8, c_int, c_int, c_int, ...) c_int;
pub extern fn openat_dprotected_np(c_int, [*c]const u8, c_int, c_int, c_int, ...) c_int;
pub extern fn openat_authenticated_np(c_int, [*c]const u8, c_int, c_int) c_int;
pub extern fn flock(c_int, c_int) c_int;
pub extern fn filesec_init() filesec_t;
pub extern fn filesec_dup(filesec_t) filesec_t;
pub extern fn filesec_free(filesec_t) void;
pub extern fn filesec_get_property(filesec_t, filesec_property_t, ?*anyopaque) c_int;
pub extern fn filesec_query_property(filesec_t, filesec_property_t, [*c]c_int) c_int;
pub extern fn filesec_set_property(filesec_t, filesec_property_t, ?*const anyopaque) c_int;
pub extern fn filesec_unset_property(filesec_t, filesec_property_t) c_int;
pub extern fn os_retain(object: ?*anyopaque) ?*anyopaque;
pub extern fn os_release(object: ?*anyopaque) void;
pub const OS_CLOCK_MACH_ABSOLUTE_TIME: u32 = 32;
pub const os_clockid_t = u32;
pub const struct_os_workgroup_attr_opaque_s = extern struct {
    sig: u32 = @import("std").mem.zeroes(u32),
    @"opaque": [60]u8 = @import("std").mem.zeroes([60]u8),
};
pub const struct_os_workgroup_interval_data_opaque_s = extern struct {
    sig: u32 = @import("std").mem.zeroes(u32),
    @"opaque": [56]u8 = @import("std").mem.zeroes([56]u8),
};
pub const struct_os_workgroup_join_token_opaque_s = extern struct {
    sig: u32 = @import("std").mem.zeroes(u32),
    @"opaque": [36]u8 = @import("std").mem.zeroes([36]u8),
};
pub const struct_os_workgroup_s = opaque {};
pub const os_workgroup_t = ?*struct_os_workgroup_s;
pub const os_workgroup_attr_s = struct_os_workgroup_attr_opaque_s;
pub const os_workgroup_attr_t = [*c]struct_os_workgroup_attr_opaque_s;
pub extern fn os_workgroup_copy_port(wg: os_workgroup_t, mach_port_out: [*c]mach_port_t) c_int;
pub extern fn os_workgroup_create_with_port(name: [*c]const u8, mach_port: mach_port_t) os_workgroup_t;
pub extern fn os_workgroup_create_with_workgroup(name: [*c]const u8, wg: os_workgroup_t) os_workgroup_t;
pub const os_workgroup_join_token_s = struct_os_workgroup_join_token_opaque_s;
pub const os_workgroup_join_token_t = [*c]struct_os_workgroup_join_token_opaque_s;
pub extern fn os_workgroup_join(wg: os_workgroup_t, token_out: os_workgroup_join_token_t) c_int;
pub extern fn os_workgroup_leave(wg: os_workgroup_t, token: os_workgroup_join_token_t) void;
pub const os_workgroup_index = u32;
pub const os_workgroup_working_arena_destructor_t = ?*const fn (?*anyopaque) callconv(.C) void;
pub extern fn os_workgroup_set_working_arena(wg: os_workgroup_t, arena: ?*anyopaque, max_workers: u32, destructor: os_workgroup_working_arena_destructor_t) c_int;
pub extern fn os_workgroup_get_working_arena(wg: os_workgroup_t, index_out: [*c]os_workgroup_index) ?*anyopaque;
pub extern fn os_workgroup_cancel(wg: os_workgroup_t) void;
pub extern fn os_workgroup_testcancel(wg: os_workgroup_t) bool;
pub const struct_os_workgroup_max_parallel_threads_attr_s = opaque {};
pub const os_workgroup_mpt_attr_s = struct_os_workgroup_max_parallel_threads_attr_s;
pub const os_workgroup_mpt_attr_t = ?*struct_os_workgroup_max_parallel_threads_attr_s;
pub extern fn os_workgroup_max_parallel_threads(wg: os_workgroup_t, attr: os_workgroup_mpt_attr_t) c_int;
pub const os_workgroup_interval_t = os_workgroup_t;
pub const os_workgroup_interval_data_s = struct_os_workgroup_interval_data_opaque_s;
pub const os_workgroup_interval_data_t = [*c]struct_os_workgroup_interval_data_opaque_s;
pub extern fn os_workgroup_interval_start(wg: os_workgroup_interval_t, start: u64, deadline: u64, data: os_workgroup_interval_data_t) c_int;
pub extern fn os_workgroup_interval_update(wg: os_workgroup_interval_t, deadline: u64, data: os_workgroup_interval_data_t) c_int;
pub extern fn os_workgroup_interval_finish(wg: os_workgroup_interval_t, data: os_workgroup_interval_data_t) c_int;
pub const os_workgroup_parallel_t = os_workgroup_t;
pub extern fn os_workgroup_parallel_create(name: [*c]const u8, attr: os_workgroup_attr_t) os_workgroup_parallel_t;
pub const dispatch_function_t = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_time_value = extern struct {
    seconds: integer_t = @import("std").mem.zeroes(integer_t),
    microseconds: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const time_value_t = struct_time_value;
pub const alarm_type_t = c_int;
pub const sleep_type_t = c_int;
pub const clock_id_t = c_int;
pub const clock_flavor_t = c_int;
pub const clock_attr_t = [*c]c_int;
pub const clock_res_t = c_int;
pub const struct_mach_timespec = extern struct {
    tv_sec: c_uint = @import("std").mem.zeroes(c_uint),
    tv_nsec: clock_res_t = @import("std").mem.zeroes(clock_res_t),
};
pub const mach_timespec_t = struct_mach_timespec;
pub const dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: c_ulong = 18446744073709551614;
const enum_unnamed_67 = c_ulong;
pub extern fn dispatch_time(when: dispatch_time_t, delta: i64) dispatch_time_t;
pub extern fn dispatch_walltime(when: [*c]const struct_timespec, delta: i64) dispatch_time_t;
pub const QOS_CLASS_USER_INTERACTIVE: c_int = 33;
pub const QOS_CLASS_USER_INITIATED: c_int = 25;
pub const QOS_CLASS_DEFAULT: c_int = 21;
pub const QOS_CLASS_UTILITY: c_int = 17;
pub const QOS_CLASS_BACKGROUND: c_int = 9;
pub const QOS_CLASS_UNSPECIFIED: c_int = 0;
const enum_unnamed_68 = c_uint;
pub const qos_class_t = c_uint;
pub extern fn qos_class_self() qos_class_t;
pub extern fn qos_class_main() qos_class_t;
pub const struct__os_object_s_69 = opaque {};
pub const struct_dispatch_object_s_70 = opaque {};
pub const struct_dispatch_queue_s_71 = opaque {};
pub const struct_dispatch_queue_attr_s_72 = opaque {};
pub const struct_dispatch_group_s_73 = opaque {};
pub const struct_dispatch_source_s_74 = opaque {};
pub const struct_dispatch_channel_s_75 = opaque {};
pub const struct_dispatch_mach_s_76 = opaque {};
pub const struct_dispatch_mach_msg_s_77 = opaque {};
pub const struct_dispatch_semaphore_s_78 = opaque {};
pub const struct_dispatch_data_s_79 = opaque {};
pub const struct_dispatch_io_s_80 = opaque {};
pub const dispatch_object_t = extern union {
    _os_obj: ?*struct__os_object_s_69,
    _do: ?*struct_dispatch_object_s_70,
    _dq: ?*struct_dispatch_queue_s_71,
    _dqa: ?*struct_dispatch_queue_attr_s_72,
    _dg: ?*struct_dispatch_group_s_73,
    _ds: ?*struct_dispatch_source_s_74,
    _dch: ?*struct_dispatch_channel_s_75,
    _dm: ?*struct_dispatch_mach_s_76,
    _dmsg: ?*struct_dispatch_mach_msg_s_77,
    _dsema: ?*struct_dispatch_semaphore_s_78,
    _ddata: ?*struct_dispatch_data_s_79,
    _dchannel: ?*struct_dispatch_io_s_80,
}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/object.h:180:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_block_t = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/object.h:180:16
pub const dispatch_qos_class_t = qos_class_t;
pub extern fn dispatch_retain(object: dispatch_object_t) void;
pub extern fn dispatch_release(object: dispatch_object_t) void;
pub extern fn dispatch_get_context(object: dispatch_object_t) ?*anyopaque;
pub extern fn dispatch_set_context(object: dispatch_object_t, context: ?*anyopaque) void;
pub extern fn dispatch_set_finalizer_f(object: dispatch_object_t, finalizer: dispatch_function_t) void;
pub extern fn dispatch_activate(object: dispatch_object_t) void;
pub extern fn dispatch_suspend(object: dispatch_object_t) void;
pub extern fn dispatch_resume(object: dispatch_object_t) void;
pub extern fn dispatch_set_qos_class_floor(object: dispatch_object_t, qos_class: dispatch_qos_class_t, relative_priority: c_int) void;
pub extern fn dispatch_wait(object: ?*anyopaque, timeout: dispatch_time_t) isize;
pub extern fn dispatch_notify(object: ?*anyopaque, queue: dispatch_object_t, notification_block: dispatch_block_t) void;
pub extern fn dispatch_cancel(object: ?*anyopaque) void;
pub extern fn dispatch_testcancel(object: ?*anyopaque) isize;
pub extern fn dispatch_debug(object: dispatch_object_t, message: [*c]const u8, ...) void;
pub extern fn dispatch_debugv(object: dispatch_object_t, message: [*c]const u8, ap: va_list) void;
pub const dispatch_queue_t = ?*struct_dispatch_queue_s_71;
pub const dispatch_queue_global_t = dispatch_queue_t;
pub const dispatch_queue_serial_t = dispatch_queue_t;
pub const dispatch_queue_main_t = dispatch_queue_serial_t;
pub const dispatch_queue_concurrent_t = dispatch_queue_t;
pub extern fn dispatch_async(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_async_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_sync(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_sync_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_async_and_wait_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/queue.h:485:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_apply = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/queue.h:485:1
pub extern fn dispatch_apply_f(iterations: usize, queue: dispatch_queue_t, context: ?*anyopaque, work: ?*const fn (?*anyopaque, usize) callconv(.C) void) void;
pub extern fn dispatch_get_current_queue() dispatch_queue_t;
pub extern var _dispatch_main_q: struct_dispatch_queue_s_71;
pub inline fn dispatch_get_main_queue() dispatch_queue_main_t {
    return @as(dispatch_queue_main_t, @ptrCast(&_dispatch_main_q));
}
pub const dispatch_queue_priority_t = c_long;
pub extern fn dispatch_get_global_queue(identifier: isize, flags: usize) dispatch_queue_global_t;
pub const dispatch_queue_attr_t = ?*struct_dispatch_queue_attr_s_72;
pub extern var _dispatch_queue_attr_concurrent: struct_dispatch_queue_attr_s_72;
pub extern fn dispatch_queue_attr_make_initially_inactive(attr: dispatch_queue_attr_t) dispatch_queue_attr_t;
pub const DISPATCH_AUTORELEASE_FREQUENCY_INHERIT: c_ulong = 0;
pub const DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM: c_ulong = 1;
pub const DISPATCH_AUTORELEASE_FREQUENCY_NEVER: c_ulong = 2;
pub const dispatch_autorelease_frequency_t = c_ulong;
pub extern fn dispatch_queue_attr_make_with_autorelease_frequency(attr: dispatch_queue_attr_t, frequency: dispatch_autorelease_frequency_t) dispatch_queue_attr_t;
pub extern fn dispatch_queue_attr_make_with_qos_class(attr: dispatch_queue_attr_t, qos_class: dispatch_qos_class_t, relative_priority: c_int) dispatch_queue_attr_t;
pub extern fn dispatch_queue_create_with_target(label: [*c]const u8, attr: dispatch_queue_attr_t, target: dispatch_queue_t) dispatch_queue_t;
pub extern fn dispatch_queue_create(label: [*c]const u8, attr: dispatch_queue_attr_t) dispatch_queue_t;
pub extern fn dispatch_queue_get_label(queue: dispatch_queue_t) [*c]const u8;
pub extern fn dispatch_queue_get_qos_class(queue: dispatch_queue_t, relative_priority_ptr: [*c]c_int) dispatch_qos_class_t;
pub extern fn dispatch_set_target_queue(object: dispatch_object_t, queue: dispatch_queue_t) void;
pub extern fn dispatch_main() noreturn;
pub extern fn dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_after_f(when: dispatch_time_t, queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_async(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_async_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_sync(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_sync_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_async_and_wait_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_queue_set_specific(queue: dispatch_queue_t, key: ?*const anyopaque, context: ?*anyopaque, destructor: dispatch_function_t) void;
pub extern fn dispatch_queue_get_specific(queue: dispatch_queue_t, key: ?*const anyopaque) ?*anyopaque;
pub extern fn dispatch_get_specific(key: ?*const anyopaque) ?*anyopaque;
pub extern fn dispatch_assert_queue(queue: dispatch_queue_t) void;
pub extern fn dispatch_assert_queue_barrier(queue: dispatch_queue_t) void;
pub extern fn dispatch_assert_queue_not(queue: dispatch_queue_t) void;
pub const DISPATCH_BLOCK_BARRIER: c_ulong = 1;
pub const DISPATCH_BLOCK_DETACHED: c_ulong = 2;
pub const DISPATCH_BLOCK_ASSIGN_CURRENT: c_ulong = 4;
pub const DISPATCH_BLOCK_NO_QOS_CLASS: c_ulong = 8;
pub const DISPATCH_BLOCK_INHERIT_QOS_CLASS: c_ulong = 16;
pub const DISPATCH_BLOCK_ENFORCE_QOS_CLASS: c_ulong = 32;
pub const dispatch_block_flags_t = c_ulong;
pub const dispatch_block_create = @compileError("unable to resolve function type clang.TypeClass.MacroQualified"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/block.h:173:1
pub const dispatch_block_create_with_qos_class = @compileError("unable to resolve function type clang.TypeClass.MacroQualified"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/block.h:245:1
pub extern fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t) void;
pub extern fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) isize;
pub extern fn dispatch_block_notify(block: dispatch_block_t, queue: dispatch_queue_t, notification_block: dispatch_block_t) void;
pub extern fn dispatch_block_cancel(block: dispatch_block_t) void;
pub extern fn dispatch_block_testcancel(block: dispatch_block_t) isize;
pub const kern_return_t = c_int;
pub const mach_msg_timeout_t = natural_t;
pub const mach_msg_bits_t = c_uint;
pub const mach_msg_size_t = natural_t;
pub const mach_msg_id_t = integer_t;
pub const mach_msg_priority_t = c_uint;
pub const mach_msg_type_name_t = c_uint;
pub const mach_msg_copy_options_t = c_uint;
pub const mach_msg_guard_flags_t = c_uint;
pub const mach_msg_descriptor_type_t = c_uint; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:288:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_type_descriptor_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:296:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_port_descriptor_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:305:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor32_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:313:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor64_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:325:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:337:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor32_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:345:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor64_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:357:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:369:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor32_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:376:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor64_t = opaque {}; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:387:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor_t = opaque {};
pub const mach_msg_descriptor_t = extern union {
    port: mach_msg_port_descriptor_t,
    out_of_line: mach_msg_ool_descriptor_t,
    ool_ports: mach_msg_ool_ports_descriptor_t,
    type: mach_msg_type_descriptor_t,
    guarded_port: mach_msg_guarded_port_descriptor_t,
};
pub const mach_msg_body_t = extern struct {
    msgh_descriptor_count: mach_msg_size_t = @import("std").mem.zeroes(mach_msg_size_t),
};
pub const mach_msg_header_t = extern struct {
    msgh_bits: mach_msg_bits_t = @import("std").mem.zeroes(mach_msg_bits_t),
    msgh_size: mach_msg_size_t = @import("std").mem.zeroes(mach_msg_size_t),
    msgh_remote_port: mach_port_t = @import("std").mem.zeroes(mach_port_t),
    msgh_local_port: mach_port_t = @import("std").mem.zeroes(mach_port_t),
    msgh_voucher_port: mach_port_name_t = @import("std").mem.zeroes(mach_port_name_t),
    msgh_id: mach_msg_id_t = @import("std").mem.zeroes(mach_msg_id_t),
};
pub const mach_msg_base_t = extern struct {
    header: mach_msg_header_t = @import("std").mem.zeroes(mach_msg_header_t),
    body: mach_msg_body_t = @import("std").mem.zeroes(mach_msg_body_t),
};
pub const mach_msg_trailer_type_t = c_uint;
pub const mach_msg_trailer_size_t = c_uint;
pub const mach_msg_trailer_info_t = [*c]u8;
pub const mach_msg_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
};
pub const mach_msg_seqno_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
};
pub const security_token_t = extern struct {
    val: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
};
pub const mach_msg_security_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    msgh_sender: security_token_t = @import("std").mem.zeroes(security_token_t),
};
pub const audit_token_t = extern struct {
    val: [8]c_uint = @import("std").mem.zeroes([8]c_uint),
};
pub const mach_msg_audit_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    msgh_sender: security_token_t = @import("std").mem.zeroes(security_token_t),
    msgh_audit: audit_token_t = @import("std").mem.zeroes(audit_token_t),
};
pub const mach_msg_context_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    msgh_sender: security_token_t = @import("std").mem.zeroes(security_token_t),
    msgh_audit: audit_token_t = @import("std").mem.zeroes(audit_token_t),
    msgh_context: mach_port_context_t = @import("std").mem.zeroes(mach_port_context_t),
};
pub const msg_labels_t = extern struct {
    sender: mach_port_name_t = @import("std").mem.zeroes(mach_port_name_t),
};
pub const mach_msg_filter_id = c_int;
pub const mach_msg_mac_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t = @import("std").mem.zeroes(mach_msg_trailer_type_t),
    msgh_trailer_size: mach_msg_trailer_size_t = @import("std").mem.zeroes(mach_msg_trailer_size_t),
    msgh_seqno: mach_port_seqno_t = @import("std").mem.zeroes(mach_port_seqno_t),
    msgh_sender: security_token_t = @import("std").mem.zeroes(security_token_t),
    msgh_audit: audit_token_t = @import("std").mem.zeroes(audit_token_t),
    msgh_context: mach_port_context_t = @import("std").mem.zeroes(mach_port_context_t),
    msgh_ad: mach_msg_filter_id = @import("std").mem.zeroes(mach_msg_filter_id),
    msgh_labels: msg_labels_t = @import("std").mem.zeroes(msg_labels_t),
};
pub const mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub const mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub extern const KERNEL_SECURITY_TOKEN: security_token_t;
pub extern const KERNEL_AUDIT_TOKEN: audit_token_t;
pub const mach_msg_options_t = integer_t;
pub const mach_msg_empty_send_t = extern struct {
    header: mach_msg_header_t = @import("std").mem.zeroes(mach_msg_header_t),
};
pub const mach_msg_empty_rcv_t = extern struct {
    header: mach_msg_header_t = @import("std").mem.zeroes(mach_msg_header_t),
    trailer: mach_msg_trailer_t = @import("std").mem.zeroes(mach_msg_trailer_t),
};
pub const mach_msg_empty_t = extern union {
    send: mach_msg_empty_send_t,
    rcv: mach_msg_empty_rcv_t,
};
pub const mach_msg_type_size_t = natural_t;
pub const mach_msg_type_number_t = natural_t;
pub const mach_msg_option_t = integer_t;
pub const mach_msg_return_t = kern_return_t;
pub extern fn mach_msg_overwrite(msg: [*c]mach_msg_header_t, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t, rcv_msg: [*c]mach_msg_header_t, rcv_limit: mach_msg_size_t) mach_msg_return_t;
pub extern fn mach_msg(msg: [*c]mach_msg_header_t, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t) mach_msg_return_t;
pub extern fn mach_voucher_deallocate(voucher: mach_port_name_t) kern_return_t;
pub const dispatch_source_t = ?*struct_dispatch_source_s_74;
pub const struct_dispatch_source_type_s = opaque {};
pub const dispatch_source_type_t = ?*const struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_add: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_or: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_replace: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_mach_send: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_mach_recv: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_memorypressure: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_proc: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_read: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_signal: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_timer: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_vnode: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_write: struct_dispatch_source_type_s;
pub const dispatch_source_mach_send_flags_t = c_ulong;
pub const dispatch_source_mach_recv_flags_t = c_ulong;
pub const dispatch_source_memorypressure_flags_t = c_ulong;
pub const dispatch_source_proc_flags_t = c_ulong;
pub const dispatch_source_vnode_flags_t = c_ulong;
pub const dispatch_source_timer_flags_t = c_ulong;
pub extern fn dispatch_source_create(@"type": dispatch_source_type_t, handle: usize, mask: usize, queue: dispatch_queue_t) dispatch_source_t;
pub extern fn dispatch_source_set_event_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_event_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub extern fn dispatch_source_set_cancel_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_cancel_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub extern fn dispatch_source_cancel(source: dispatch_source_t) void;
pub extern fn dispatch_source_testcancel(source: dispatch_source_t) isize;
pub extern fn dispatch_source_get_handle(source: dispatch_source_t) usize;
pub extern fn dispatch_source_get_mask(source: dispatch_source_t) usize;
pub extern fn dispatch_source_get_data(source: dispatch_source_t) usize;
pub extern fn dispatch_source_merge_data(source: dispatch_source_t, value: usize) void;
pub extern fn dispatch_source_set_timer(source: dispatch_source_t, start: dispatch_time_t, interval: u64, leeway: u64) void;
pub extern fn dispatch_source_set_registration_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_registration_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub const dispatch_group_t = ?*struct_dispatch_group_s_73;
pub extern fn dispatch_group_create() dispatch_group_t;
pub extern fn dispatch_group_async(group: dispatch_group_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) isize;
pub extern fn dispatch_group_notify(group: dispatch_group_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_group_enter(group: dispatch_group_t) void;
pub extern fn dispatch_group_leave(group: dispatch_group_t) void;
pub const dispatch_semaphore_t = ?*struct_dispatch_semaphore_s_78;
pub extern fn dispatch_semaphore_create(value: isize) dispatch_semaphore_t;
pub extern fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) isize;
pub extern fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t) isize;
pub const dispatch_once_t = isize;
pub extern fn dispatch_once(predicate: [*c]dispatch_once_t, block: dispatch_block_t) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:195:38: warning: TODO implement translation of stmt class GCCAsmStmtClass
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/once.h:81:1: warning: unable to translate function, demoted to extern
pub extern fn _dispatch_once(arg_predicate: [*c]dispatch_once_t, arg_block: dispatch_block_t) void;
pub extern fn dispatch_once_f(predicate: [*c]dispatch_once_t, context: ?*anyopaque, function: dispatch_function_t) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:195:38: warning: TODO implement translation of stmt class GCCAsmStmtClass
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/once.h:108:1: warning: unable to translate function, demoted to extern
pub extern fn _dispatch_once_f(arg_predicate: [*c]dispatch_once_t, arg_context: ?*anyopaque, arg_function: dispatch_function_t) void;
pub const dispatch_data_t = ?*struct_dispatch_data_s_79;
pub extern var _dispatch_data_empty: struct_dispatch_data_s_79;
pub extern const _dispatch_data_destructor_free: dispatch_block_t;
pub extern const _dispatch_data_destructor_munmap: dispatch_block_t;
pub extern fn dispatch_data_create(buffer: ?*const anyopaque, size: usize, queue: dispatch_queue_t, destructor: dispatch_block_t) dispatch_data_t;
pub extern fn dispatch_data_get_size(data: dispatch_data_t) usize;
pub extern fn dispatch_data_create_map(data: dispatch_data_t, buffer_ptr: [*c]?*const anyopaque, size_ptr: [*c]usize) dispatch_data_t;
pub extern fn dispatch_data_create_concat(data1: dispatch_data_t, data2: dispatch_data_t) dispatch_data_t;
pub extern fn dispatch_data_create_subrange(data: dispatch_data_t, offset: usize, length: usize) dispatch_data_t; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/data.h:221:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_data_applier_t = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/data.h:221:16
pub extern fn dispatch_data_apply(data: dispatch_data_t, applier: dispatch_data_applier_t) bool;
pub extern fn dispatch_data_copy_region(data: dispatch_data_t, location: usize, offset_ptr: [*c]usize) dispatch_data_t;
pub const dispatch_fd_t = c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:113:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_read = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:113:1
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:152:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_write = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:152:1
pub const dispatch_io_t = ?*struct_dispatch_io_s_80;
pub const dispatch_io_type_t = c_ulong; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:223:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:223:1
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:259:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create_with_path = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:259:1
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:299:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create_with_io = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:299:1
// /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:312:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_handler_t = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/io.h:312:16
pub extern fn dispatch_io_read(channel: dispatch_io_t, offset: off_t, length: usize, queue: dispatch_queue_t, io_handler: dispatch_io_handler_t) void;
pub extern fn dispatch_io_write(channel: dispatch_io_t, offset: off_t, data: dispatch_data_t, queue: dispatch_queue_t, io_handler: dispatch_io_handler_t) void;
pub const dispatch_io_close_flags_t = c_ulong;
pub extern fn dispatch_io_close(channel: dispatch_io_t, flags: dispatch_io_close_flags_t) void;
pub extern fn dispatch_io_barrier(channel: dispatch_io_t, barrier: dispatch_block_t) void;
pub extern fn dispatch_io_get_descriptor(channel: dispatch_io_t) dispatch_fd_t;
pub extern fn dispatch_io_set_high_water(channel: dispatch_io_t, high_water: usize) void;
pub extern fn dispatch_io_set_low_water(channel: dispatch_io_t, low_water: usize) void;
pub const dispatch_io_interval_flags_t = c_ulong;
pub extern fn dispatch_io_set_interval(channel: dispatch_io_t, interval: u64, flags: dispatch_io_interval_flags_t) void;
pub const dispatch_workloop_t = dispatch_queue_t;
pub extern fn dispatch_workloop_create(label: [*c]const u8) dispatch_workloop_t;
pub extern fn dispatch_workloop_create_inactive(label: [*c]const u8) dispatch_workloop_t;
pub extern fn dispatch_workloop_set_autorelease_frequency(workloop: dispatch_workloop_t, frequency: dispatch_autorelease_frequency_t) void;
pub extern fn dispatch_workloop_set_os_workgroup(workloop: dispatch_workloop_t, workgroup: os_workgroup_t) void;
pub const CFStreamError = extern struct {
    domain: CFIndex = @import("std").mem.zeroes(CFIndex),
    @"error": SInt32 = @import("std").mem.zeroes(SInt32),
};
pub const CFStreamPropertyKey = CFStringRef;
pub const CFStreamStatus = CFIndex;
pub const kCFStreamStatusNotOpen: c_int = 0;
pub const kCFStreamStatusOpening: c_int = 1;
pub const kCFStreamStatusOpen: c_int = 2;
pub const kCFStreamStatusReading: c_int = 3;
pub const kCFStreamStatusWriting: c_int = 4;
pub const kCFStreamStatusAtEnd: c_int = 5;
pub const kCFStreamStatusClosed: c_int = 6;
pub const kCFStreamStatusError: c_int = 7;
const enum_unnamed_81 = c_uint;
pub const CFStreamEventType = CFOptionFlags;
pub const kCFStreamEventNone: c_int = 0;
pub const kCFStreamEventOpenCompleted: c_int = 1;
pub const kCFStreamEventHasBytesAvailable: c_int = 2;
pub const kCFStreamEventCanAcceptBytes: c_int = 4;
pub const kCFStreamEventErrorOccurred: c_int = 8;
pub const kCFStreamEventEndEncountered: c_int = 16;
const enum_unnamed_82 = c_uint;
pub const CFStreamClientContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*anyopaque) callconv(.C) ?*anyopaque = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) ?*anyopaque),
    release: ?*const fn (?*anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) CFStringRef),
};
pub const struct___CFReadStream = opaque {};
pub const CFReadStreamRef = ?*struct___CFReadStream;
pub const struct___CFWriteStream = opaque {};
pub const CFWriteStreamRef = ?*struct___CFWriteStream;
pub const CFReadStreamClientCallBack = ?*const fn (CFReadStreamRef, CFStreamEventType, ?*anyopaque) callconv(.C) void;
pub const CFWriteStreamClientCallBack = ?*const fn (CFWriteStreamRef, CFStreamEventType, ?*anyopaque) callconv(.C) void;
pub extern fn CFReadStreamGetTypeID() CFTypeID;
pub extern fn CFWriteStreamGetTypeID() CFTypeID;
pub extern const kCFStreamPropertyDataWritten: CFStreamPropertyKey;
pub extern fn CFReadStreamCreateWithBytesNoCopy(alloc: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex, bytesDeallocator: CFAllocatorRef) CFReadStreamRef;
pub extern fn CFWriteStreamCreateWithBuffer(alloc: CFAllocatorRef, buffer: [*c]UInt8, bufferCapacity: CFIndex) CFWriteStreamRef;
pub extern fn CFWriteStreamCreateWithAllocatedBuffers(alloc: CFAllocatorRef, bufferAllocator: CFAllocatorRef) CFWriteStreamRef;
pub extern fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) CFReadStreamRef;
pub extern fn CFWriteStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) CFWriteStreamRef;
pub extern fn CFStreamCreateBoundPair(alloc: CFAllocatorRef, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef, transferBufferSize: CFIndex) void;
pub extern const kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
pub extern const kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
pub extern const kCFStreamErrorDomainSOCKS: c_int;
pub extern const kCFStreamPropertySOCKSProxy: CFStringRef;
pub extern const kCFStreamPropertySOCKSProxyHost: CFStringRef;
pub extern const kCFStreamPropertySOCKSProxyPort: CFStringRef;
pub extern const kCFStreamPropertySOCKSVersion: CFStringRef;
pub extern const kCFStreamSocketSOCKSVersion4: CFStringRef;
pub extern const kCFStreamSocketSOCKSVersion5: CFStringRef;
pub extern const kCFStreamPropertySOCKSUser: CFStringRef;
pub extern const kCFStreamPropertySOCKSPassword: CFStringRef;
pub extern const kCFStreamErrorDomainSSL: c_int;
pub extern const kCFStreamPropertySocketSecurityLevel: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelNone: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
pub extern const kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
pub extern fn CFStreamCreatePairWithSocket(alloc: CFAllocatorRef, sock: CFSocketNativeHandle, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFStreamCreatePairWithSocketToHost(alloc: CFAllocatorRef, host: CFStringRef, port: UInt32, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFStreamCreatePairWithPeerSocketSignature(alloc: CFAllocatorRef, signature: [*c]const CFSocketSignature, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFReadStreamGetStatus(stream: CFReadStreamRef) CFStreamStatus;
pub extern fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) CFStreamStatus;
pub extern fn CFReadStreamCopyError(stream: CFReadStreamRef) CFErrorRef;
pub extern fn CFWriteStreamCopyError(stream: CFWriteStreamRef) CFErrorRef;
pub extern fn CFReadStreamOpen(stream: CFReadStreamRef) Boolean;
pub extern fn CFWriteStreamOpen(stream: CFWriteStreamRef) Boolean;
pub extern fn CFReadStreamClose(stream: CFReadStreamRef) void;
pub extern fn CFWriteStreamClose(stream: CFWriteStreamRef) void;
pub extern fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) Boolean;
pub extern fn CFReadStreamRead(stream: CFReadStreamRef, buffer: [*c]UInt8, bufferLength: CFIndex) CFIndex;
pub extern fn CFReadStreamGetBuffer(stream: CFReadStreamRef, maxBytesToRead: CFIndex, numBytesRead: [*c]CFIndex) [*c]const UInt8;
pub extern fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) Boolean;
pub extern fn CFWriteStreamWrite(stream: CFWriteStreamRef, buffer: [*c]const UInt8, bufferLength: CFIndex) CFIndex;
pub extern fn CFReadStreamCopyProperty(stream: CFReadStreamRef, propertyName: CFStreamPropertyKey) CFTypeRef;
pub extern fn CFWriteStreamCopyProperty(stream: CFWriteStreamRef, propertyName: CFStreamPropertyKey) CFTypeRef;
pub extern fn CFReadStreamSetProperty(stream: CFReadStreamRef, propertyName: CFStreamPropertyKey, propertyValue: CFTypeRef) Boolean;
pub extern fn CFWriteStreamSetProperty(stream: CFWriteStreamRef, propertyName: CFStreamPropertyKey, propertyValue: CFTypeRef) Boolean;
pub extern fn CFReadStreamSetClient(stream: CFReadStreamRef, streamEvents: CFOptionFlags, clientCB: CFReadStreamClientCallBack, clientContext: [*c]CFStreamClientContext) Boolean;
pub extern fn CFWriteStreamSetClient(stream: CFWriteStreamRef, streamEvents: CFOptionFlags, clientCB: CFWriteStreamClientCallBack, clientContext: [*c]CFStreamClientContext) Boolean;
pub extern fn CFReadStreamScheduleWithRunLoop(stream: CFReadStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFWriteStreamScheduleWithRunLoop(stream: CFWriteStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFReadStreamUnscheduleFromRunLoop(stream: CFReadStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFWriteStreamUnscheduleFromRunLoop(stream: CFWriteStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: dispatch_queue_t) void;
pub extern fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: dispatch_queue_t) void;
pub extern fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) dispatch_queue_t;
pub extern fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) dispatch_queue_t;
pub const CFStreamErrorDomain = CFIndex;
pub const kCFStreamErrorDomainCustom: c_int = -1;
pub const kCFStreamErrorDomainPOSIX: c_int = 1;
pub const kCFStreamErrorDomainMacOSStatus: c_int = 2;
const enum_unnamed_83 = c_int;
pub extern fn CFReadStreamGetError(stream: CFReadStreamRef) CFStreamError;
pub extern fn CFWriteStreamGetError(stream: CFWriteStreamRef) CFStreamError;
pub const CFPropertyListMutabilityOptions = CFOptionFlags;
pub const kCFPropertyListImmutable: c_int = 0;
pub const kCFPropertyListMutableContainers: c_int = 1;
pub const kCFPropertyListMutableContainersAndLeaves: c_int = 2;
const enum_unnamed_84 = c_uint;
pub extern fn CFPropertyListCreateFromXMLData(allocator: CFAllocatorRef, xmlData: CFDataRef, mutabilityOption: CFOptionFlags, errorString: [*c]CFStringRef) CFPropertyListRef;
pub extern fn CFPropertyListCreateXMLData(allocator: CFAllocatorRef, propertyList: CFPropertyListRef) CFDataRef;
pub extern fn CFPropertyListCreateDeepCopy(allocator: CFAllocatorRef, propertyList: CFPropertyListRef, mutabilityOption: CFOptionFlags) CFPropertyListRef;
pub const CFPropertyListFormat = CFIndex;
pub const kCFPropertyListOpenStepFormat: c_int = 1;
pub const kCFPropertyListXMLFormat_v1_0: c_int = 100;
pub const kCFPropertyListBinaryFormat_v1_0: c_int = 200;
const enum_unnamed_85 = c_uint;
pub extern fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat) Boolean;
pub extern fn CFPropertyListWriteToStream(propertyList: CFPropertyListRef, stream: CFWriteStreamRef, format: CFPropertyListFormat, errorString: [*c]CFStringRef) CFIndex;
pub extern fn CFPropertyListCreateFromStream(allocator: CFAllocatorRef, stream: CFReadStreamRef, streamLength: CFIndex, mutabilityOption: CFOptionFlags, format: [*c]CFPropertyListFormat, errorString: [*c]CFStringRef) CFPropertyListRef;
pub const kCFPropertyListReadCorruptError: c_int = 3840;
pub const kCFPropertyListReadUnknownVersionError: c_int = 3841;
pub const kCFPropertyListReadStreamError: c_int = 3842;
pub const kCFPropertyListWriteStreamError: c_int = 3851;
const enum_unnamed_86 = c_uint;
pub extern fn CFPropertyListCreateWithData(allocator: CFAllocatorRef, data: CFDataRef, options: CFOptionFlags, format: [*c]CFPropertyListFormat, @"error": [*c]CFErrorRef) CFPropertyListRef;
pub extern fn CFPropertyListCreateWithStream(allocator: CFAllocatorRef, stream: CFReadStreamRef, streamLength: CFIndex, options: CFOptionFlags, format: [*c]CFPropertyListFormat, @"error": [*c]CFErrorRef) CFPropertyListRef;
pub extern fn CFPropertyListWrite(propertyList: CFPropertyListRef, stream: CFWriteStreamRef, format: CFPropertyListFormat, options: CFOptionFlags, @"error": [*c]CFErrorRef) CFIndex;
pub extern fn CFPropertyListCreateData(allocator: CFAllocatorRef, propertyList: CFPropertyListRef, format: CFPropertyListFormat, options: CFOptionFlags, @"error": [*c]CFErrorRef) CFDataRef;
pub const CFSetRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFSetReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void;
pub const CFSetCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFSetEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean;
pub const CFSetHashCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFHashCode;
pub const CFSetCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    retain: CFSetRetainCallBack = @import("std").mem.zeroes(CFSetRetainCallBack),
    release: CFSetReleaseCallBack = @import("std").mem.zeroes(CFSetReleaseCallBack),
    copyDescription: CFSetCopyDescriptionCallBack = @import("std").mem.zeroes(CFSetCopyDescriptionCallBack),
    equal: CFSetEqualCallBack = @import("std").mem.zeroes(CFSetEqualCallBack),
    hash: CFSetHashCallBack = @import("std").mem.zeroes(CFSetHashCallBack),
};
pub extern const kCFTypeSetCallBacks: CFSetCallBacks;
pub extern const kCFCopyStringSetCallBacks: CFSetCallBacks;
pub const CFSetApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFSet = opaque {};
pub const CFSetRef = ?*const struct___CFSet;
pub const CFMutableSetRef = ?*struct___CFSet;
pub extern fn CFSetGetTypeID() CFTypeID;
pub extern fn CFSetCreate(allocator: CFAllocatorRef, values: [*c]?*const anyopaque, numValues: CFIndex, callBacks: [*c]const CFSetCallBacks) CFSetRef;
pub extern fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) CFSetRef;
pub extern fn CFSetCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFSetCallBacks) CFMutableSetRef;
pub extern fn CFSetCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theSet: CFSetRef) CFMutableSetRef;
pub extern fn CFSetGetCount(theSet: CFSetRef) CFIndex;
pub extern fn CFSetGetCountOfValue(theSet: CFSetRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFSetContainsValue(theSet: CFSetRef, value: ?*const anyopaque) Boolean;
pub extern fn CFSetGetValue(theSet: CFSetRef, value: ?*const anyopaque) ?*const anyopaque;
pub extern fn CFSetGetValueIfPresent(theSet: CFSetRef, candidate: ?*const anyopaque, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFSetGetValues(theSet: CFSetRef, values: [*c]?*const anyopaque) void;
pub extern fn CFSetApplyFunction(theSet: CFSetRef, applier: CFSetApplierFunction, context: ?*anyopaque) void;
pub extern fn CFSetAddValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetReplaceValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetSetValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetRemoveValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetRemoveAllValues(theSet: CFMutableSetRef) void;
pub const CFStringEncodings = CFIndex;
pub const kCFStringEncodingMacJapanese: c_int = 1;
pub const kCFStringEncodingMacChineseTrad: c_int = 2;
pub const kCFStringEncodingMacKorean: c_int = 3;
pub const kCFStringEncodingMacArabic: c_int = 4;
pub const kCFStringEncodingMacHebrew: c_int = 5;
pub const kCFStringEncodingMacGreek: c_int = 6;
pub const kCFStringEncodingMacCyrillic: c_int = 7;
pub const kCFStringEncodingMacDevanagari: c_int = 9;
pub const kCFStringEncodingMacGurmukhi: c_int = 10;
pub const kCFStringEncodingMacGujarati: c_int = 11;
pub const kCFStringEncodingMacOriya: c_int = 12;
pub const kCFStringEncodingMacBengali: c_int = 13;
pub const kCFStringEncodingMacTamil: c_int = 14;
pub const kCFStringEncodingMacTelugu: c_int = 15;
pub const kCFStringEncodingMacKannada: c_int = 16;
pub const kCFStringEncodingMacMalayalam: c_int = 17;
pub const kCFStringEncodingMacSinhalese: c_int = 18;
pub const kCFStringEncodingMacBurmese: c_int = 19;
pub const kCFStringEncodingMacKhmer: c_int = 20;
pub const kCFStringEncodingMacThai: c_int = 21;
pub const kCFStringEncodingMacLaotian: c_int = 22;
pub const kCFStringEncodingMacGeorgian: c_int = 23;
pub const kCFStringEncodingMacArmenian: c_int = 24;
pub const kCFStringEncodingMacChineseSimp: c_int = 25;
pub const kCFStringEncodingMacTibetan: c_int = 26;
pub const kCFStringEncodingMacMongolian: c_int = 27;
pub const kCFStringEncodingMacEthiopic: c_int = 28;
pub const kCFStringEncodingMacCentralEurRoman: c_int = 29;
pub const kCFStringEncodingMacVietnamese: c_int = 30;
pub const kCFStringEncodingMacExtArabic: c_int = 31;
pub const kCFStringEncodingMacSymbol: c_int = 33;
pub const kCFStringEncodingMacDingbats: c_int = 34;
pub const kCFStringEncodingMacTurkish: c_int = 35;
pub const kCFStringEncodingMacCroatian: c_int = 36;
pub const kCFStringEncodingMacIcelandic: c_int = 37;
pub const kCFStringEncodingMacRomanian: c_int = 38;
pub const kCFStringEncodingMacCeltic: c_int = 39;
pub const kCFStringEncodingMacGaelic: c_int = 40;
pub const kCFStringEncodingMacFarsi: c_int = 140;
pub const kCFStringEncodingMacUkrainian: c_int = 152;
pub const kCFStringEncodingMacInuit: c_int = 236;
pub const kCFStringEncodingMacVT100: c_int = 252;
pub const kCFStringEncodingMacHFS: c_int = 255;
pub const kCFStringEncodingISOLatin2: c_int = 514;
pub const kCFStringEncodingISOLatin3: c_int = 515;
pub const kCFStringEncodingISOLatin4: c_int = 516;
pub const kCFStringEncodingISOLatinCyrillic: c_int = 517;
pub const kCFStringEncodingISOLatinArabic: c_int = 518;
pub const kCFStringEncodingISOLatinGreek: c_int = 519;
pub const kCFStringEncodingISOLatinHebrew: c_int = 520;
pub const kCFStringEncodingISOLatin5: c_int = 521;
pub const kCFStringEncodingISOLatin6: c_int = 522;
pub const kCFStringEncodingISOLatinThai: c_int = 523;
pub const kCFStringEncodingISOLatin7: c_int = 525;
pub const kCFStringEncodingISOLatin8: c_int = 526;
pub const kCFStringEncodingISOLatin9: c_int = 527;
pub const kCFStringEncodingISOLatin10: c_int = 528;
pub const kCFStringEncodingDOSLatinUS: c_int = 1024;
pub const kCFStringEncodingDOSGreek: c_int = 1029;
pub const kCFStringEncodingDOSBalticRim: c_int = 1030;
pub const kCFStringEncodingDOSLatin1: c_int = 1040;
pub const kCFStringEncodingDOSGreek1: c_int = 1041;
pub const kCFStringEncodingDOSLatin2: c_int = 1042;
pub const kCFStringEncodingDOSCyrillic: c_int = 1043;
pub const kCFStringEncodingDOSTurkish: c_int = 1044;
pub const kCFStringEncodingDOSPortuguese: c_int = 1045;
pub const kCFStringEncodingDOSIcelandic: c_int = 1046;
pub const kCFStringEncodingDOSHebrew: c_int = 1047;
pub const kCFStringEncodingDOSCanadianFrench: c_int = 1048;
pub const kCFStringEncodingDOSArabic: c_int = 1049;
pub const kCFStringEncodingDOSNordic: c_int = 1050;
pub const kCFStringEncodingDOSRussian: c_int = 1051;
pub const kCFStringEncodingDOSGreek2: c_int = 1052;
pub const kCFStringEncodingDOSThai: c_int = 1053;
pub const kCFStringEncodingDOSJapanese: c_int = 1056;
pub const kCFStringEncodingDOSChineseSimplif: c_int = 1057;
pub const kCFStringEncodingDOSKorean: c_int = 1058;
pub const kCFStringEncodingDOSChineseTrad: c_int = 1059;
pub const kCFStringEncodingWindowsLatin2: c_int = 1281;
pub const kCFStringEncodingWindowsCyrillic: c_int = 1282;
pub const kCFStringEncodingWindowsGreek: c_int = 1283;
pub const kCFStringEncodingWindowsLatin5: c_int = 1284;
pub const kCFStringEncodingWindowsHebrew: c_int = 1285;
pub const kCFStringEncodingWindowsArabic: c_int = 1286;
pub const kCFStringEncodingWindowsBalticRim: c_int = 1287;
pub const kCFStringEncodingWindowsVietnamese: c_int = 1288;
pub const kCFStringEncodingWindowsKoreanJohab: c_int = 1296;
pub const kCFStringEncodingANSEL: c_int = 1537;
pub const kCFStringEncodingJIS_X0201_76: c_int = 1568;
pub const kCFStringEncodingJIS_X0208_83: c_int = 1569;
pub const kCFStringEncodingJIS_X0208_90: c_int = 1570;
pub const kCFStringEncodingJIS_X0212_90: c_int = 1571;
pub const kCFStringEncodingJIS_C6226_78: c_int = 1572;
pub const kCFStringEncodingShiftJIS_X0213: c_int = 1576;
pub const kCFStringEncodingShiftJIS_X0213_MenKuTen: c_int = 1577;
pub const kCFStringEncodingGB_2312_80: c_int = 1584;
pub const kCFStringEncodingGBK_95: c_int = 1585;
pub const kCFStringEncodingGB_18030_2000: c_int = 1586;
pub const kCFStringEncodingKSC_5601_87: c_int = 1600;
pub const kCFStringEncodingKSC_5601_92_Johab: c_int = 1601;
pub const kCFStringEncodingCNS_11643_92_P1: c_int = 1617;
pub const kCFStringEncodingCNS_11643_92_P2: c_int = 1618;
pub const kCFStringEncodingCNS_11643_92_P3: c_int = 1619;
pub const kCFStringEncodingISO_2022_JP: c_int = 2080;
pub const kCFStringEncodingISO_2022_JP_2: c_int = 2081;
pub const kCFStringEncodingISO_2022_JP_1: c_int = 2082;
pub const kCFStringEncodingISO_2022_JP_3: c_int = 2083;
pub const kCFStringEncodingISO_2022_CN: c_int = 2096;
pub const kCFStringEncodingISO_2022_CN_EXT: c_int = 2097;
pub const kCFStringEncodingISO_2022_KR: c_int = 2112;
pub const kCFStringEncodingEUC_JP: c_int = 2336;
pub const kCFStringEncodingEUC_CN: c_int = 2352;
pub const kCFStringEncodingEUC_TW: c_int = 2353;
pub const kCFStringEncodingEUC_KR: c_int = 2368;
pub const kCFStringEncodingShiftJIS: c_int = 2561;
pub const kCFStringEncodingKOI8_R: c_int = 2562;
pub const kCFStringEncodingBig5: c_int = 2563;
pub const kCFStringEncodingMacRomanLatin1: c_int = 2564;
pub const kCFStringEncodingHZ_GB_2312: c_int = 2565;
pub const kCFStringEncodingBig5_HKSCS_1999: c_int = 2566;
pub const kCFStringEncodingVISCII: c_int = 2567;
pub const kCFStringEncodingKOI8_U: c_int = 2568;
pub const kCFStringEncodingBig5_E: c_int = 2569;
pub const kCFStringEncodingNextStepJapanese: c_int = 2818;
pub const kCFStringEncodingEBCDIC_US: c_int = 3073;
pub const kCFStringEncodingEBCDIC_CP037: c_int = 3074;
pub const kCFStringEncodingUTF7: c_int = 67109120;
pub const kCFStringEncodingUTF7_IMAP: c_int = 2576;
pub const kCFStringEncodingShiftJIS_X0213_00: c_int = 1576;
const enum_unnamed_87 = c_uint;
pub const CFTreeRetainCallBack = ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFTreeReleaseCallBack = ?*const fn (?*const anyopaque) callconv(.C) void;
pub const CFTreeCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFTreeContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: CFTreeRetainCallBack = @import("std").mem.zeroes(CFTreeRetainCallBack),
    release: CFTreeReleaseCallBack = @import("std").mem.zeroes(CFTreeReleaseCallBack),
    copyDescription: CFTreeCopyDescriptionCallBack = @import("std").mem.zeroes(CFTreeCopyDescriptionCallBack),
};
pub const CFTreeApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFTree = opaque {};
pub const CFTreeRef = ?*struct___CFTree;
pub extern fn CFTreeGetTypeID() CFTypeID;
pub extern fn CFTreeCreate(allocator: CFAllocatorRef, context: [*c]const CFTreeContext) CFTreeRef;
pub extern fn CFTreeGetParent(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetNextSibling(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetFirstChild(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetContext(tree: CFTreeRef, context: [*c]CFTreeContext) void;
pub extern fn CFTreeGetChildCount(tree: CFTreeRef) CFIndex;
pub extern fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) CFTreeRef;
pub extern fn CFTreeGetChildren(tree: CFTreeRef, children: [*c]CFTreeRef) void;
pub extern fn CFTreeApplyFunctionToChildren(tree: CFTreeRef, applier: CFTreeApplierFunction, context: ?*anyopaque) void;
pub extern fn CFTreeFindRoot(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeSetContext(tree: CFTreeRef, context: [*c]const CFTreeContext) void;
pub extern fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef) void;
pub extern fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef) void;
pub extern fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef) void;
pub extern fn CFTreeRemove(tree: CFTreeRef) void;
pub extern fn CFTreeRemoveAllChildren(tree: CFTreeRef) void;
pub extern fn CFTreeSortChildren(tree: CFTreeRef, comparator: CFComparatorFunction, context: ?*anyopaque) void;
pub extern fn CFURLCreateDataAndPropertiesFromResource(alloc: CFAllocatorRef, url: CFURLRef, resourceData: [*c]CFDataRef, properties: [*c]CFDictionaryRef, desiredProperties: CFArrayRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLWriteDataAndPropertiesToResource(url: CFURLRef, dataToWrite: CFDataRef, propertiesToWrite: CFDictionaryRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLDestroyResource(url: CFURLRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLCreatePropertyFromResource(alloc: CFAllocatorRef, url: CFURLRef, property: CFStringRef, errorCode: [*c]SInt32) CFTypeRef;
pub const CFURLError = CFIndex;
pub const kCFURLUnknownError: c_int = -10;
pub const kCFURLUnknownSchemeError: c_int = -11;
pub const kCFURLResourceNotFoundError: c_int = -12;
pub const kCFURLResourceAccessViolationError: c_int = -13;
pub const kCFURLRemoteHostUnavailableError: c_int = -14;
pub const kCFURLImproperArgumentsError: c_int = -15;
pub const kCFURLUnknownPropertyKeyError: c_int = -16;
pub const kCFURLPropertyKeyUnavailableError: c_int = -17;
pub const kCFURLTimeoutError: c_int = -18;
const enum_unnamed_88 = c_int;
pub extern const kCFURLFileExists: CFStringRef;
pub extern const kCFURLFileDirectoryContents: CFStringRef;
pub extern const kCFURLFileLength: CFStringRef;
pub extern const kCFURLFileLastModificationTime: CFStringRef;
pub extern const kCFURLFilePOSIXMode: CFStringRef;
pub extern const kCFURLFileOwnerID: CFStringRef;
pub extern const kCFURLHTTPStatusCode: CFStringRef;
pub extern const kCFURLHTTPStatusLine: CFStringRef;
pub const struct___CFUUID = opaque {};
pub const CFUUIDRef = ?*const struct___CFUUID;
pub const CFUUIDBytes = extern struct {
    byte0: UInt8 = @import("std").mem.zeroes(UInt8),
    byte1: UInt8 = @import("std").mem.zeroes(UInt8),
    byte2: UInt8 = @import("std").mem.zeroes(UInt8),
    byte3: UInt8 = @import("std").mem.zeroes(UInt8),
    byte4: UInt8 = @import("std").mem.zeroes(UInt8),
    byte5: UInt8 = @import("std").mem.zeroes(UInt8),
    byte6: UInt8 = @import("std").mem.zeroes(UInt8),
    byte7: UInt8 = @import("std").mem.zeroes(UInt8),
    byte8: UInt8 = @import("std").mem.zeroes(UInt8),
    byte9: UInt8 = @import("std").mem.zeroes(UInt8),
    byte10: UInt8 = @import("std").mem.zeroes(UInt8),
    byte11: UInt8 = @import("std").mem.zeroes(UInt8),
    byte12: UInt8 = @import("std").mem.zeroes(UInt8),
    byte13: UInt8 = @import("std").mem.zeroes(UInt8),
    byte14: UInt8 = @import("std").mem.zeroes(UInt8),
    byte15: UInt8 = @import("std").mem.zeroes(UInt8),
};
pub extern fn CFUUIDGetTypeID() CFTypeID;
pub extern fn CFUUIDCreate(alloc: CFAllocatorRef) CFUUIDRef;
pub extern fn CFUUIDCreateWithBytes(alloc: CFAllocatorRef, byte0: UInt8, byte1: UInt8, byte2: UInt8, byte3: UInt8, byte4: UInt8, byte5: UInt8, byte6: UInt8, byte7: UInt8, byte8: UInt8, byte9: UInt8, byte10: UInt8, byte11: UInt8, byte12: UInt8, byte13: UInt8, byte14: UInt8, byte15: UInt8) CFUUIDRef;
pub extern fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) CFUUIDRef;
pub extern fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) CFStringRef;
pub extern fn CFUUIDGetConstantUUIDWithBytes(alloc: CFAllocatorRef, byte0: UInt8, byte1: UInt8, byte2: UInt8, byte3: UInt8, byte4: UInt8, byte5: UInt8, byte6: UInt8, byte7: UInt8, byte8: UInt8, byte9: UInt8, byte10: UInt8, byte11: UInt8, byte12: UInt8, byte13: UInt8, byte14: UInt8, byte15: UInt8) CFUUIDRef;
pub extern fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) CFUUIDBytes;
pub extern fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) CFUUIDRef;
pub extern fn CFCopyHomeDirectoryURL() CFURLRef;
pub const cpu_type_t = integer_t;
pub const cpu_subtype_t = integer_t;
pub const cpu_threadtype_t = integer_t;
pub const struct___CFBundle = opaque {};
pub const CFBundleRef = ?*struct___CFBundle;
pub const CFPlugInRef = ?*struct___CFBundle;
pub extern const kCFBundleInfoDictionaryVersionKey: CFStringRef;
pub extern const kCFBundleExecutableKey: CFStringRef;
pub extern const kCFBundleIdentifierKey: CFStringRef;
pub extern const kCFBundleVersionKey: CFStringRef;
pub extern const kCFBundleDevelopmentRegionKey: CFStringRef;
pub extern const kCFBundleNameKey: CFStringRef;
pub extern const kCFBundleLocalizationsKey: CFStringRef;
pub extern fn CFBundleGetMainBundle() CFBundleRef;
pub extern fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) CFBundleRef;
pub extern fn CFBundleGetAllBundles() CFArrayRef;
pub extern fn CFBundleGetTypeID() CFTypeID;
pub extern fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) CFBundleRef;
pub extern fn CFBundleCreateBundlesFromDirectory(allocator: CFAllocatorRef, directoryURL: CFURLRef, bundleType: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyBundleURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef) CFTypeRef;
pub extern fn CFBundleGetInfoDictionary(bundle: CFBundleRef) CFDictionaryRef;
pub extern fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) CFDictionaryRef;
pub extern fn CFBundleGetPackageInfo(bundle: CFBundleRef, packageType: [*c]UInt32, packageCreator: [*c]UInt32) void;
pub extern fn CFBundleGetIdentifier(bundle: CFBundleRef) CFStringRef;
pub extern fn CFBundleGetVersionNumber(bundle: CFBundleRef) UInt32;
pub extern fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) CFStringRef;
pub extern fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) CFDictionaryRef;
pub extern fn CFBundleGetPackageInfoInDirectory(url: CFURLRef, packageType: [*c]UInt32, packageCreator: [*c]UInt32) Boolean;
pub extern fn CFBundleCopyResourceURL(bundle: CFBundleRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfType(bundle: CFBundleRef, resourceType: CFStringRef, subDirName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyLocalizedString(bundle: CFBundleRef, key: CFStringRef, value: CFStringRef, tableName: CFStringRef) CFStringRef;
pub extern fn CFBundleCopyResourceURLInDirectory(bundleURL: CFURLRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfTypeInDirectory(bundleURL: CFURLRef, resourceType: CFStringRef, subDirName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) CFArrayRef;
pub extern fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) CFArrayRef;
pub extern fn CFBundleCopyLocalizationsForPreferences(locArray: CFArrayRef, prefArray: CFArrayRef) CFArrayRef;
pub extern fn CFBundleCopyResourceURLForLocalization(bundle: CFBundleRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef, localizationName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfTypeForLocalization(bundle: CFBundleRef, resourceType: CFStringRef, subDirName: CFStringRef, localizationName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) CFDictionaryRef;
pub extern fn CFBundleCopyLocalizationsForURL(url: CFURLRef) CFArrayRef;
pub extern fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) CFArrayRef;
pub extern fn CFBundleCopyExecutableURL(bundle: CFBundleRef) CFURLRef;
pub const kCFBundleExecutableArchitectureI386: c_int = 7;
pub const kCFBundleExecutableArchitecturePPC: c_int = 18;
pub const kCFBundleExecutableArchitectureX86_64: c_int = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: c_int = 16777234;
pub const kCFBundleExecutableArchitectureARM64: c_int = 16777228;
const enum_unnamed_89 = c_uint;
pub extern fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) CFArrayRef;
pub extern fn CFBundlePreflightExecutable(bundle: CFBundleRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFBundleLoadExecutableAndReturnError(bundle: CFBundleRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFBundleLoadExecutable(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleUnloadExecutable(bundle: CFBundleRef) void;
pub extern fn CFBundleGetFunctionPointerForName(bundle: CFBundleRef, functionName: CFStringRef) ?*anyopaque;
pub extern fn CFBundleGetFunctionPointersForNames(bundle: CFBundleRef, functionNames: CFArrayRef, ftbl: [*c]?*anyopaque) void;
pub extern fn CFBundleGetDataPointerForName(bundle: CFBundleRef, symbolName: CFStringRef) ?*anyopaque;
pub extern fn CFBundleGetDataPointersForNames(bundle: CFBundleRef, symbolNames: CFArrayRef, stbl: [*c]?*anyopaque) void;
pub extern fn CFBundleCopyAuxiliaryExecutableURL(bundle: CFBundleRef, executableName: CFStringRef) CFURLRef;
pub extern fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) Boolean;
pub extern fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) Boolean;
pub extern fn CFBundleGetPlugIn(bundle: CFBundleRef) CFPlugInRef;
pub const CFBundleRefNum = c_int;
pub extern fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) CFBundleRefNum;
pub extern fn CFBundleOpenBundleResourceFiles(bundle: CFBundleRef, refNum: [*c]CFBundleRefNum, localizedRefNum: [*c]CFBundleRefNum) SInt32;
pub extern fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum) void;
pub const struct___CFMessagePort = opaque {};
pub const CFMessagePortRef = ?*struct___CFMessagePort;
pub const kCFMessagePortSuccess: c_int = 0;
pub const kCFMessagePortSendTimeout: c_int = -1;
pub const kCFMessagePortReceiveTimeout: c_int = -2;
pub const kCFMessagePortIsInvalid: c_int = -3;
pub const kCFMessagePortTransportError: c_int = -4;
pub const kCFMessagePortBecameInvalidError: c_int = -5;
const enum_unnamed_90 = c_int;
pub const CFMessagePortContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFStringRef),
};
pub const CFMessagePortCallBack = ?*const fn (CFMessagePortRef, SInt32, CFDataRef, ?*anyopaque) callconv(.C) CFDataRef;
pub const CFMessagePortInvalidationCallBack = ?*const fn (CFMessagePortRef, ?*anyopaque) callconv(.C) void;
pub extern fn CFMessagePortGetTypeID() CFTypeID;
pub extern fn CFMessagePortCreateLocal(allocator: CFAllocatorRef, name: CFStringRef, callout: CFMessagePortCallBack, context: [*c]CFMessagePortContext, shouldFreeInfo: [*c]Boolean) CFMessagePortRef;
pub extern fn CFMessagePortCreateRemote(allocator: CFAllocatorRef, name: CFStringRef) CFMessagePortRef;
pub extern fn CFMessagePortIsRemote(ms: CFMessagePortRef) Boolean;
pub extern fn CFMessagePortGetName(ms: CFMessagePortRef) CFStringRef;
pub extern fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) Boolean;
pub extern fn CFMessagePortGetContext(ms: CFMessagePortRef, context: [*c]CFMessagePortContext) void;
pub extern fn CFMessagePortInvalidate(ms: CFMessagePortRef) void;
pub extern fn CFMessagePortIsValid(ms: CFMessagePortRef) Boolean;
pub extern fn CFMessagePortGetInvalidationCallBack(ms: CFMessagePortRef) CFMessagePortInvalidationCallBack;
pub extern fn CFMessagePortSetInvalidationCallBack(ms: CFMessagePortRef, callout: CFMessagePortInvalidationCallBack) void;
pub extern fn CFMessagePortSendRequest(remote: CFMessagePortRef, msgid: SInt32, data: CFDataRef, sendTimeout: CFTimeInterval, rcvTimeout: CFTimeInterval, replyMode: CFStringRef, returnData: [*c]CFDataRef) SInt32;
pub extern fn CFMessagePortCreateRunLoopSource(allocator: CFAllocatorRef, local: CFMessagePortRef, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: dispatch_queue_t) void;
pub extern const kCFPlugInDynamicRegistrationKey: CFStringRef;
pub extern const kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
pub extern const kCFPlugInUnloadFunctionKey: CFStringRef;
pub extern const kCFPlugInFactoriesKey: CFStringRef;
pub extern const kCFPlugInTypesKey: CFStringRef;
pub const CFPlugInDynamicRegisterFunction = ?*const fn (CFPlugInRef) callconv(.C) void;
pub const CFPlugInUnloadFunction = ?*const fn (CFPlugInRef) callconv(.C) void;
pub const CFPlugInFactoryFunction = ?*const fn (CFAllocatorRef, CFUUIDRef) callconv(.C) ?*anyopaque;
pub extern fn CFPlugInGetTypeID() CFTypeID;
pub extern fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) CFPlugInRef;
pub extern fn CFPlugInGetBundle(plugIn: CFPlugInRef) CFBundleRef;
pub extern fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean) void;
pub extern fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) Boolean;
pub extern fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) CFArrayRef;
pub extern fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(typeUUID: CFUUIDRef, plugIn: CFPlugInRef) CFArrayRef;
pub extern fn CFPlugInInstanceCreate(allocator: CFAllocatorRef, factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) ?*anyopaque;
pub extern fn CFPlugInRegisterFactoryFunction(factoryUUID: CFUUIDRef, func: CFPlugInFactoryFunction) Boolean;
pub extern fn CFPlugInRegisterFactoryFunctionByName(factoryUUID: CFUUIDRef, plugIn: CFPlugInRef, functionName: CFStringRef) Boolean;
pub extern fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef) void;
pub extern fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef) void;
pub const struct___CFPlugInInstance = opaque {};
pub const CFPlugInInstanceRef = ?*struct___CFPlugInInstance;
pub const CFPlugInInstanceGetInterfaceFunction = ?*const fn (CFPlugInInstanceRef, CFStringRef, [*c]?*anyopaque) callconv(.C) Boolean;
pub const CFPlugInInstanceDeallocateInstanceDataFunction = ?*const fn (?*anyopaque) callconv(.C) void;
pub extern fn CFPlugInInstanceGetInterfaceFunctionTable(instance: CFPlugInInstanceRef, interfaceName: CFStringRef, ftbl: [*c]?*anyopaque) Boolean;
pub extern fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) CFStringRef;
pub extern fn CFPlugInInstanceGetInstanceData(instance: CFPlugInInstanceRef) ?*anyopaque;
pub extern fn CFPlugInInstanceGetTypeID() CFTypeID;
pub extern fn CFPlugInInstanceCreateWithInstanceDataSize(allocator: CFAllocatorRef, instanceDataSize: CFIndex, deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction, factoryName: CFStringRef, getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction) CFPlugInInstanceRef;
pub const struct___CFMachPort = opaque {};
pub const CFMachPortRef = ?*struct___CFMachPort;
pub const CFMachPortContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque),
    release: ?*const fn (?*const anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*const anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*const anyopaque) callconv(.C) CFStringRef),
};
pub const CFMachPortCallBack = ?*const fn (CFMachPortRef, ?*anyopaque, CFIndex, ?*anyopaque) callconv(.C) void;
pub const CFMachPortInvalidationCallBack = ?*const fn (CFMachPortRef, ?*anyopaque) callconv(.C) void;
pub extern fn CFMachPortGetTypeID() CFTypeID;
pub extern fn CFMachPortCreate(allocator: CFAllocatorRef, callout: CFMachPortCallBack, context: [*c]CFMachPortContext, shouldFreeInfo: [*c]Boolean) CFMachPortRef;
pub extern fn CFMachPortCreateWithPort(allocator: CFAllocatorRef, portNum: mach_port_t, callout: CFMachPortCallBack, context: [*c]CFMachPortContext, shouldFreeInfo: [*c]Boolean) CFMachPortRef;
pub extern fn CFMachPortGetPort(port: CFMachPortRef) mach_port_t;
pub extern fn CFMachPortGetContext(port: CFMachPortRef, context: [*c]CFMachPortContext) void;
pub extern fn CFMachPortInvalidate(port: CFMachPortRef) void;
pub extern fn CFMachPortIsValid(port: CFMachPortRef) Boolean;
pub extern fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef) CFMachPortInvalidationCallBack;
pub extern fn CFMachPortSetInvalidationCallBack(port: CFMachPortRef, callout: CFMachPortInvalidationCallBack) void;
pub extern fn CFMachPortCreateRunLoopSource(allocator: CFAllocatorRef, port: CFMachPortRef, order: CFIndex) CFRunLoopSourceRef;
pub const struct___CFAttributedString = opaque {};
pub const CFAttributedStringRef = ?*const struct___CFAttributedString;
pub const CFMutableAttributedStringRef = ?*struct___CFAttributedString;
pub extern fn CFAttributedStringGetTypeID() CFTypeID;
pub extern fn CFAttributedStringCreate(alloc: CFAllocatorRef, str: CFStringRef, attributes: CFDictionaryRef) CFAttributedStringRef;
pub extern fn CFAttributedStringCreateWithSubstring(alloc: CFAllocatorRef, aStr: CFAttributedStringRef, range: CFRange) CFAttributedStringRef;
pub extern fn CFAttributedStringCreateCopy(alloc: CFAllocatorRef, aStr: CFAttributedStringRef) CFAttributedStringRef;
pub extern fn CFAttributedStringGetString(aStr: CFAttributedStringRef) CFStringRef;
pub extern fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) CFIndex;
pub extern fn CFAttributedStringGetAttributes(aStr: CFAttributedStringRef, loc: CFIndex, effectiveRange: [*c]CFRange) CFDictionaryRef;
pub extern fn CFAttributedStringGetAttribute(aStr: CFAttributedStringRef, loc: CFIndex, attrName: CFStringRef, effectiveRange: [*c]CFRange) CFTypeRef;
pub extern fn CFAttributedStringGetAttributesAndLongestEffectiveRange(aStr: CFAttributedStringRef, loc: CFIndex, inRange: CFRange, longestEffectiveRange: [*c]CFRange) CFDictionaryRef;
pub extern fn CFAttributedStringGetAttributeAndLongestEffectiveRange(aStr: CFAttributedStringRef, loc: CFIndex, attrName: CFStringRef, inRange: CFRange, longestEffectiveRange: [*c]CFRange) CFTypeRef;
pub extern fn CFAttributedStringCreateMutableCopy(alloc: CFAllocatorRef, maxLength: CFIndex, aStr: CFAttributedStringRef) CFMutableAttributedStringRef;
pub extern fn CFAttributedStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) CFMutableAttributedStringRef;
pub extern fn CFAttributedStringReplaceString(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFStringRef) void;
pub extern fn CFAttributedStringGetMutableString(aStr: CFMutableAttributedStringRef) CFMutableStringRef;
pub extern fn CFAttributedStringSetAttributes(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFDictionaryRef, clearOtherAttributes: Boolean) void;
pub extern fn CFAttributedStringSetAttribute(aStr: CFMutableAttributedStringRef, range: CFRange, attrName: CFStringRef, value: CFTypeRef) void;
pub extern fn CFAttributedStringRemoveAttribute(aStr: CFMutableAttributedStringRef, range: CFRange, attrName: CFStringRef) void;
pub extern fn CFAttributedStringReplaceAttributedString(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFAttributedStringRef) void;
pub extern fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef) void;
pub extern fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef) void;
pub const struct___CFURLEnumerator = opaque {};
pub const CFURLEnumeratorRef = ?*const struct___CFURLEnumerator;
pub extern fn CFURLEnumeratorGetTypeID() CFTypeID;
pub const CFURLEnumeratorOptions = CFOptionFlags;
pub const kCFURLEnumeratorDefaultBehavior: c_int = 0;
pub const kCFURLEnumeratorDescendRecursively: c_int = 1;
pub const kCFURLEnumeratorSkipInvisibles: c_int = 2;
pub const kCFURLEnumeratorGenerateFileReferenceURLs: c_int = 4;
pub const kCFURLEnumeratorSkipPackageContents: c_int = 8;
pub const kCFURLEnumeratorIncludeDirectoriesPreOrder: c_int = 16;
pub const kCFURLEnumeratorIncludeDirectoriesPostOrder: c_int = 32;
pub const kCFURLEnumeratorGenerateRelativePathURLs: c_int = 64;
const enum_unnamed_91 = c_uint;
pub extern fn CFURLEnumeratorCreateForDirectoryURL(alloc: CFAllocatorRef, directoryURL: CFURLRef, option: CFURLEnumeratorOptions, propertyKeys: CFArrayRef) CFURLEnumeratorRef;
pub extern fn CFURLEnumeratorCreateForMountedVolumes(alloc: CFAllocatorRef, option: CFURLEnumeratorOptions, propertyKeys: CFArrayRef) CFURLEnumeratorRef;
pub const CFURLEnumeratorResult = CFIndex;
pub const kCFURLEnumeratorSuccess: c_int = 1;
pub const kCFURLEnumeratorEnd: c_int = 2;
pub const kCFURLEnumeratorError: c_int = 3;
pub const kCFURLEnumeratorDirectoryPostOrderSuccess: c_int = 4;
const enum_unnamed_92 = c_uint;
pub extern fn CFURLEnumeratorGetNextURL(enumerator: CFURLEnumeratorRef, url: [*c]CFURLRef, @"error": [*c]CFErrorRef) CFURLEnumeratorResult;
pub extern fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef) void;
pub extern fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) CFIndex;
pub extern fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) Boolean;
pub const guid_t = extern union {
    g_guid: [16]u8,
    g_guid_asint: [4]c_uint,
};
pub const ntsid_t = extern struct {
    sid_kind: u_int8_t = @import("std").mem.zeroes(u_int8_t),
    sid_authcount: u_int8_t = @import("std").mem.zeroes(u_int8_t),
    sid_authority: [6]u_int8_t = @import("std").mem.zeroes([6]u_int8_t),
    sid_authorities: [16]u_int32_t = @import("std").mem.zeroes([16]u_int32_t),
};
pub const struct_kauth_identity_extlookup = extern struct {
    el_seqno: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_result: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_flags: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_info_pid: __darwin_pid_t = @import("std").mem.zeroes(__darwin_pid_t),
    el_extend: u_int64_t = @import("std").mem.zeroes(u_int64_t),
    el_info_reserved_1: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_uid: uid_t = @import("std").mem.zeroes(uid_t),
    el_uguid: guid_t = @import("std").mem.zeroes(guid_t),
    el_uguid_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_usid: ntsid_t = @import("std").mem.zeroes(ntsid_t),
    el_usid_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_gid: gid_t = @import("std").mem.zeroes(gid_t),
    el_gguid: guid_t = @import("std").mem.zeroes(guid_t),
    el_gguid_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_gsid: ntsid_t = @import("std").mem.zeroes(ntsid_t),
    el_gsid_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_member_valid: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_sup_grp_cnt: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    el_sup_groups: [16]gid_t = @import("std").mem.zeroes([16]gid_t),
};
pub const struct_kauth_cache_sizes = extern struct {
    kcs_group_size: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    kcs_id_size: u_int32_t = @import("std").mem.zeroes(u_int32_t),
};
pub const kauth_ace_rights_t = u_int32_t;
pub const struct_kauth_ace = extern struct {
    ace_applicable: guid_t = @import("std").mem.zeroes(guid_t),
    ace_flags: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    ace_rights: kauth_ace_rights_t = @import("std").mem.zeroes(kauth_ace_rights_t),
};
pub const kauth_ace_t = [*c]struct_kauth_ace;
pub const struct_kauth_acl = extern struct {
    acl_entrycount: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    acl_flags: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    acl_ace: [1]struct_kauth_ace = @import("std").mem.zeroes([1]struct_kauth_ace),
};
pub const kauth_acl_t = [*c]struct_kauth_acl;
pub const struct_kauth_filesec = extern struct {
    fsec_magic: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    fsec_owner: guid_t = @import("std").mem.zeroes(guid_t),
    fsec_group: guid_t = @import("std").mem.zeroes(guid_t),
    fsec_acl: struct_kauth_acl = @import("std").mem.zeroes(struct_kauth_acl),
};
pub const kauth_filesec_t = [*c]struct_kauth_filesec;
pub const ACL_READ_DATA: c_int = 2;
pub const ACL_LIST_DIRECTORY: c_int = 2;
pub const ACL_WRITE_DATA: c_int = 4;
pub const ACL_ADD_FILE: c_int = 4;
pub const ACL_EXECUTE: c_int = 8;
pub const ACL_SEARCH: c_int = 8;
pub const ACL_DELETE: c_int = 16;
pub const ACL_APPEND_DATA: c_int = 32;
pub const ACL_ADD_SUBDIRECTORY: c_int = 32;
pub const ACL_DELETE_CHILD: c_int = 64;
pub const ACL_READ_ATTRIBUTES: c_int = 128;
pub const ACL_WRITE_ATTRIBUTES: c_int = 256;
pub const ACL_READ_EXTATTRIBUTES: c_int = 512;
pub const ACL_WRITE_EXTATTRIBUTES: c_int = 1024;
pub const ACL_READ_SECURITY: c_int = 2048;
pub const ACL_WRITE_SECURITY: c_int = 4096;
pub const ACL_CHANGE_OWNER: c_int = 8192;
pub const ACL_SYNCHRONIZE: c_int = 1048576;
pub const acl_perm_t = c_uint;
pub const ACL_UNDEFINED_TAG: c_int = 0;
pub const ACL_EXTENDED_ALLOW: c_int = 1;
pub const ACL_EXTENDED_DENY: c_int = 2;
pub const acl_tag_t = c_uint;
pub const ACL_TYPE_EXTENDED: c_int = 256;
pub const ACL_TYPE_ACCESS: c_int = 0;
pub const ACL_TYPE_DEFAULT: c_int = 1;
pub const ACL_TYPE_AFS: c_int = 2;
pub const ACL_TYPE_CODA: c_int = 3;
pub const ACL_TYPE_NTFS: c_int = 4;
pub const ACL_TYPE_NWFS: c_int = 5;
pub const acl_type_t = c_uint;
pub const ACL_FIRST_ENTRY: c_int = 0;
pub const ACL_NEXT_ENTRY: c_int = -1;
pub const ACL_LAST_ENTRY: c_int = -2;
pub const acl_entry_id_t = c_int;
pub const ACL_FLAG_DEFER_INHERIT: c_int = 1;
pub const ACL_FLAG_NO_INHERIT: c_int = 131072;
pub const ACL_ENTRY_INHERITED: c_int = 16;
pub const ACL_ENTRY_FILE_INHERIT: c_int = 32;
pub const ACL_ENTRY_DIRECTORY_INHERIT: c_int = 64;
pub const ACL_ENTRY_LIMIT_INHERIT: c_int = 128;
pub const ACL_ENTRY_ONLY_INHERIT: c_int = 256;
pub const acl_flag_t = c_uint;
pub const struct__acl = opaque {};
pub const struct__acl_entry = opaque {};
pub const struct__acl_permset = opaque {};
pub const struct__acl_flagset = opaque {};
pub const acl_t = ?*struct__acl;
pub const acl_entry_t = ?*struct__acl_entry;
pub const acl_permset_t = ?*struct__acl_permset;
pub const acl_flagset_t = ?*struct__acl_flagset;
pub const acl_permset_mask_t = u_int64_t;
pub extern fn acl_dup(acl: acl_t) acl_t;
pub extern fn acl_free(obj_p: ?*anyopaque) c_int;
pub extern fn acl_init(count: c_int) acl_t;
pub extern fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) c_int;
pub extern fn acl_create_entry(acl_p: [*c]acl_t, entry_p: [*c]acl_entry_t) c_int;
pub extern fn acl_create_entry_np(acl_p: [*c]acl_t, entry_p: [*c]acl_entry_t, entry_index: c_int) c_int;
pub extern fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) c_int;
pub extern fn acl_get_entry(acl: acl_t, entry_id: c_int, entry_p: [*c]acl_entry_t) c_int;
pub extern fn acl_valid(acl: acl_t) c_int;
pub extern fn acl_valid_fd_np(fd: c_int, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_valid_file_np(path: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_valid_link_np(path: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_calc_mask(acl_p: [*c]acl_t) c_int;
pub extern fn acl_clear_perms(permset_d: acl_permset_t) c_int;
pub extern fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_get_permset(entry_d: acl_entry_t, permset_p: [*c]acl_permset_t) c_int;
pub extern fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t) c_int;
pub extern fn acl_maximal_permset_mask_np(mask_p: [*c]acl_permset_mask_t) c_int;
pub extern fn acl_get_permset_mask_np(entry_d: acl_entry_t, mask_p: [*c]acl_permset_mask_t) c_int;
pub extern fn acl_set_permset_mask_np(entry_d: acl_entry_t, mask: acl_permset_mask_t) c_int;
pub extern fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_clear_flags_np(flagset_d: acl_flagset_t) c_int;
pub extern fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_get_flagset_np(obj_p: ?*anyopaque, flagset_p: [*c]acl_flagset_t) c_int;
pub extern fn acl_set_flagset_np(obj_p: ?*anyopaque, flagset_d: acl_flagset_t) c_int;
pub extern fn acl_get_qualifier(entry_d: acl_entry_t) ?*anyopaque;
pub extern fn acl_get_tag_type(entry_d: acl_entry_t, tag_type_p: [*c]acl_tag_t) c_int;
pub extern fn acl_set_qualifier(entry_d: acl_entry_t, tag_qualifier_p: ?*const anyopaque) c_int;
pub extern fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) c_int;
pub extern fn acl_delete_def_file(path_p: [*c]const u8) c_int;
pub extern fn acl_get_fd(fd: c_int) acl_t;
pub extern fn acl_get_fd_np(fd: c_int, @"type": acl_type_t) acl_t;
pub extern fn acl_get_file(path_p: [*c]const u8, @"type": acl_type_t) acl_t;
pub extern fn acl_get_link_np(path_p: [*c]const u8, @"type": acl_type_t) acl_t;
pub extern fn acl_set_fd(fd: c_int, acl: acl_t) c_int;
pub extern fn acl_set_fd_np(fd: c_int, acl: acl_t, acl_type: acl_type_t) c_int;
pub extern fn acl_set_file(path_p: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_set_link_np(path_p: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_copy_ext(buf_p: ?*anyopaque, acl: acl_t, size: isize) isize;
pub extern fn acl_copy_ext_native(buf_p: ?*anyopaque, acl: acl_t, size: isize) isize;
pub extern fn acl_copy_int(buf_p: ?*const anyopaque) acl_t;
pub extern fn acl_copy_int_native(buf_p: ?*const anyopaque) acl_t;
pub extern fn acl_from_text(buf_p: [*c]const u8) acl_t;
pub extern fn acl_size(acl: acl_t) isize;
pub extern fn acl_to_text(acl: acl_t, len_p: [*c]isize) [*c]u8;
pub const struct___CFFileSecurity = opaque {};
pub const CFFileSecurityRef = ?*struct___CFFileSecurity;
pub extern fn CFFileSecurityGetTypeID() CFTypeID;
pub extern fn CFFileSecurityCreate(allocator: CFAllocatorRef) CFFileSecurityRef;
pub extern fn CFFileSecurityCreateCopy(allocator: CFAllocatorRef, fileSec: CFFileSecurityRef) CFFileSecurityRef;
pub extern fn CFFileSecurityCopyOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: [*c]CFUUIDRef) Boolean;
pub extern fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) Boolean;
pub extern fn CFFileSecurityCopyGroupUUID(fileSec: CFFileSecurityRef, groupUUID: [*c]CFUUIDRef) Boolean;
pub extern fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) Boolean;
pub extern fn CFFileSecurityCopyAccessControlList(fileSec: CFFileSecurityRef, accessControlList: [*c]acl_t) Boolean;
pub extern fn CFFileSecuritySetAccessControlList(fileSec: CFFileSecurityRef, accessControlList: acl_t) Boolean;
pub extern fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: [*c]uid_t) Boolean;
pub extern fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) Boolean;
pub extern fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: [*c]gid_t) Boolean;
pub extern fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) Boolean;
pub extern fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: [*c]mode_t) Boolean;
pub extern fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) Boolean;
pub const CFFileSecurityClearOptions = CFOptionFlags;
pub const kCFFileSecurityClearOwner: c_int = 1;
pub const kCFFileSecurityClearGroup: c_int = 2;
pub const kCFFileSecurityClearMode: c_int = 4;
pub const kCFFileSecurityClearOwnerUUID: c_int = 8;
pub const kCFFileSecurityClearGroupUUID: c_int = 16;
pub const kCFFileSecurityClearAccessControlList: c_int = 32;
const enum_unnamed_93 = c_uint;
pub extern fn CFFileSecurityClearProperties(fileSec: CFFileSecurityRef, clearPropertyMask: CFFileSecurityClearOptions) Boolean;
pub extern fn CFStringTokenizerCopyBestStringLanguage(string: CFStringRef, range: CFRange) CFStringRef;
pub const struct___CFStringTokenizer = opaque {};
pub const CFStringTokenizerRef = ?*struct___CFStringTokenizer;
pub const kCFStringTokenizerUnitWord: c_int = 0;
pub const kCFStringTokenizerUnitSentence: c_int = 1;
pub const kCFStringTokenizerUnitParagraph: c_int = 2;
pub const kCFStringTokenizerUnitLineBreak: c_int = 3;
pub const kCFStringTokenizerUnitWordBoundary: c_int = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: c_int = 65536;
pub const kCFStringTokenizerAttributeLanguage: c_int = 131072;
const enum_unnamed_94 = c_uint;
pub const CFStringTokenizerTokenType = CFOptionFlags;
pub const kCFStringTokenizerTokenNone: c_int = 0;
pub const kCFStringTokenizerTokenNormal: c_int = 1;
pub const kCFStringTokenizerTokenHasSubTokensMask: c_int = 2;
pub const kCFStringTokenizerTokenHasDerivedSubTokensMask: c_int = 4;
pub const kCFStringTokenizerTokenHasHasNumbersMask: c_int = 8;
pub const kCFStringTokenizerTokenHasNonLettersMask: c_int = 16;
pub const kCFStringTokenizerTokenIsCJWordMask: c_int = 32;
const enum_unnamed_95 = c_uint;
pub extern fn CFStringTokenizerGetTypeID() CFTypeID;
pub extern fn CFStringTokenizerCreate(alloc: CFAllocatorRef, string: CFStringRef, range: CFRange, options: CFOptionFlags, locale: CFLocaleRef) CFStringTokenizerRef;
pub extern fn CFStringTokenizerSetString(tokenizer: CFStringTokenizerRef, string: CFStringRef, range: CFRange) void;
pub extern fn CFStringTokenizerGoToTokenAtIndex(tokenizer: CFStringTokenizerRef, index: CFIndex) CFStringTokenizerTokenType;
pub extern fn CFStringTokenizerAdvanceToNextToken(tokenizer: CFStringTokenizerRef) CFStringTokenizerTokenType;
pub extern fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) CFRange;
pub extern fn CFStringTokenizerCopyCurrentTokenAttribute(tokenizer: CFStringTokenizerRef, attribute: CFOptionFlags) CFTypeRef;
pub extern fn CFStringTokenizerGetCurrentSubTokens(tokenizer: CFStringTokenizerRef, ranges: [*c]CFRange, maxRangeLength: CFIndex, derivedSubTokens: CFMutableArrayRef) CFIndex;
pub const CFFileDescriptorNativeDescriptor = c_int;
pub const struct___CFFileDescriptor = opaque {};
pub const CFFileDescriptorRef = ?*struct___CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack: c_int = 1;
pub const kCFFileDescriptorWriteCallBack: c_int = 2;
const enum_unnamed_96 = c_uint;
pub const CFFileDescriptorCallBack = ?*const fn (CFFileDescriptorRef, CFOptionFlags, ?*anyopaque) callconv(.C) void;
pub const CFFileDescriptorContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: ?*const fn (?*anyopaque) callconv(.C) ?*anyopaque = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) ?*anyopaque),
    release: ?*const fn (?*anyopaque) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) void),
    copyDescription: ?*const fn (?*anyopaque) callconv(.C) CFStringRef = @import("std").mem.zeroes(?*const fn (?*anyopaque) callconv(.C) CFStringRef),
};
pub extern fn CFFileDescriptorGetTypeID() CFTypeID;
pub extern fn CFFileDescriptorCreate(allocator: CFAllocatorRef, fd: CFFileDescriptorNativeDescriptor, closeOnInvalidate: Boolean, callout: CFFileDescriptorCallBack, context: [*c]const CFFileDescriptorContext) CFFileDescriptorRef;
pub extern fn CFFileDescriptorGetNativeDescriptor(f: CFFileDescriptorRef) CFFileDescriptorNativeDescriptor;
pub extern fn CFFileDescriptorGetContext(f: CFFileDescriptorRef, context: [*c]CFFileDescriptorContext) void;
pub extern fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef) void;
pub extern fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) Boolean;
pub extern fn CFFileDescriptorCreateRunLoopSource(allocator: CFAllocatorRef, f: CFFileDescriptorRef, order: CFIndex) CFRunLoopSourceRef;
pub const struct___CFUserNotification = opaque {};
pub const CFUserNotificationRef = ?*struct___CFUserNotification;
pub const CFUserNotificationCallBack = ?*const fn (CFUserNotificationRef, CFOptionFlags) callconv(.C) void;
pub extern fn CFUserNotificationGetTypeID() CFTypeID;
pub extern fn CFUserNotificationCreate(allocator: CFAllocatorRef, timeout: CFTimeInterval, flags: CFOptionFlags, @"error": [*c]SInt32, dictionary: CFDictionaryRef) CFUserNotificationRef;
pub extern fn CFUserNotificationReceiveResponse(userNotification: CFUserNotificationRef, timeout: CFTimeInterval, responseFlags: [*c]CFOptionFlags) SInt32;
pub extern fn CFUserNotificationGetResponseValue(userNotification: CFUserNotificationRef, key: CFStringRef, idx: CFIndex) CFStringRef;
pub extern fn CFUserNotificationGetResponseDictionary(userNotification: CFUserNotificationRef) CFDictionaryRef;
pub extern fn CFUserNotificationUpdate(userNotification: CFUserNotificationRef, timeout: CFTimeInterval, flags: CFOptionFlags, dictionary: CFDictionaryRef) SInt32;
pub extern fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) SInt32;
pub extern fn CFUserNotificationCreateRunLoopSource(allocator: CFAllocatorRef, userNotification: CFUserNotificationRef, callout: CFUserNotificationCallBack, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFUserNotificationDisplayNotice(timeout: CFTimeInterval, flags: CFOptionFlags, iconURL: CFURLRef, soundURL: CFURLRef, localizationURL: CFURLRef, alertHeader: CFStringRef, alertMessage: CFStringRef, defaultButtonTitle: CFStringRef) SInt32;
pub extern fn CFUserNotificationDisplayAlert(timeout: CFTimeInterval, flags: CFOptionFlags, iconURL: CFURLRef, soundURL: CFURLRef, localizationURL: CFURLRef, alertHeader: CFStringRef, alertMessage: CFStringRef, defaultButtonTitle: CFStringRef, alternateButtonTitle: CFStringRef, otherButtonTitle: CFStringRef, responseFlags: [*c]CFOptionFlags) SInt32;
pub const kCFUserNotificationStopAlertLevel: c_int = 0;
pub const kCFUserNotificationNoteAlertLevel: c_int = 1;
pub const kCFUserNotificationCautionAlertLevel: c_int = 2;
pub const kCFUserNotificationPlainAlertLevel: c_int = 3;
const enum_unnamed_97 = c_uint;
pub const kCFUserNotificationDefaultResponse: c_int = 0;
pub const kCFUserNotificationAlternateResponse: c_int = 1;
pub const kCFUserNotificationOtherResponse: c_int = 2;
pub const kCFUserNotificationCancelResponse: c_int = 3;
const enum_unnamed_98 = c_uint;
pub const kCFUserNotificationNoDefaultButtonFlag: c_int = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: c_int = 64;
const enum_unnamed_99 = c_uint;
pub inline fn CFUserNotificationCheckBoxChecked(arg_i: CFIndex) CFOptionFlags {
    var i = arg_i;
    _ = &i;
    return @as(CFOptionFlags, @bitCast(@as(c_ulong, 1) << @intCast(@as(CFIndex, @bitCast(@as(c_long, @as(c_int, 8)))) + i)));
}
pub inline fn CFUserNotificationSecureTextField(arg_i: CFIndex) CFOptionFlags {
    var i = arg_i;
    _ = &i;
    return @as(CFOptionFlags, @bitCast(@as(c_ulong, 1) << @intCast(@as(CFIndex, @bitCast(@as(c_long, @as(c_int, 16)))) + i)));
}
pub inline fn CFUserNotificationPopUpSelection(arg_n: CFIndex) CFOptionFlags {
    var n = arg_n;
    _ = &n;
    return @as(CFOptionFlags, @bitCast(n << @intCast(24)));
}
pub extern const kCFUserNotificationIconURLKey: CFStringRef;
pub extern const kCFUserNotificationSoundURLKey: CFStringRef;
pub extern const kCFUserNotificationLocalizationURLKey: CFStringRef;
pub extern const kCFUserNotificationAlertHeaderKey: CFStringRef;
pub extern const kCFUserNotificationAlertMessageKey: CFStringRef;
pub extern const kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationOtherButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
pub extern const kCFUserNotificationPopUpTitlesKey: CFStringRef;
pub extern const kCFUserNotificationTextFieldTitlesKey: CFStringRef;
pub extern const kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
pub extern const kCFUserNotificationTextFieldValuesKey: CFStringRef;
pub extern const kCFUserNotificationPopUpSelectionKey: CFStringRef;
pub extern const kCFUserNotificationAlertTopMostKey: CFStringRef;
pub extern const kCFUserNotificationKeyboardTypesKey: CFStringRef;
pub const kCFXMLNodeCurrentVersion: c_int = 1;
const enum_unnamed_100 = c_uint;
pub const struct___CFXMLNode = opaque {};
pub const CFXMLNodeRef = ?*const struct___CFXMLNode;
pub const CFXMLTreeRef = CFTreeRef;
pub const CFXMLNodeTypeCode = CFIndex;
pub const kCFXMLNodeTypeDocument: c_int = 1;
pub const kCFXMLNodeTypeElement: c_int = 2;
pub const kCFXMLNodeTypeAttribute: c_int = 3;
pub const kCFXMLNodeTypeProcessingInstruction: c_int = 4;
pub const kCFXMLNodeTypeComment: c_int = 5;
pub const kCFXMLNodeTypeText: c_int = 6;
pub const kCFXMLNodeTypeCDATASection: c_int = 7;
pub const kCFXMLNodeTypeDocumentFragment: c_int = 8;
pub const kCFXMLNodeTypeEntity: c_int = 9;
pub const kCFXMLNodeTypeEntityReference: c_int = 10;
pub const kCFXMLNodeTypeDocumentType: c_int = 11;
pub const kCFXMLNodeTypeWhitespace: c_int = 12;
pub const kCFXMLNodeTypeNotation: c_int = 13;
pub const kCFXMLNodeTypeElementTypeDeclaration: c_int = 14;
pub const kCFXMLNodeTypeAttributeListDeclaration: c_int = 15;
const enum_unnamed_101 = c_uint;
pub const CFXMLElementInfo = extern struct {
    attributes: CFDictionaryRef = @import("std").mem.zeroes(CFDictionaryRef),
    attributeOrder: CFArrayRef = @import("std").mem.zeroes(CFArrayRef),
    isEmpty: Boolean = @import("std").mem.zeroes(Boolean),
    _reserved: [3]u8 = @import("std").mem.zeroes([3]u8),
};
pub const CFXMLProcessingInstructionInfo = extern struct {
    dataString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLDocumentInfo = extern struct {
    sourceURL: CFURLRef = @import("std").mem.zeroes(CFURLRef),
    encoding: CFStringEncoding = @import("std").mem.zeroes(CFStringEncoding),
};
pub const CFXMLExternalID = extern struct {
    systemID: CFURLRef = @import("std").mem.zeroes(CFURLRef),
    publicID: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLDocumentTypeInfo = extern struct {
    externalID: CFXMLExternalID = @import("std").mem.zeroes(CFXMLExternalID),
};
pub const CFXMLNotationInfo = extern struct {
    externalID: CFXMLExternalID = @import("std").mem.zeroes(CFXMLExternalID),
};
pub const CFXMLElementTypeDeclarationInfo = extern struct {
    contentDescription: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLAttributeDeclarationInfo = extern struct {
    attributeName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    typeString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    defaultString: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLAttributeListDeclarationInfo = extern struct {
    numberOfAttributes: CFIndex = @import("std").mem.zeroes(CFIndex),
    attributes: [*c]CFXMLAttributeDeclarationInfo = @import("std").mem.zeroes([*c]CFXMLAttributeDeclarationInfo),
};
pub const CFXMLEntityTypeCode = CFIndex;
pub const kCFXMLEntityTypeParameter: c_int = 0;
pub const kCFXMLEntityTypeParsedInternal: c_int = 1;
pub const kCFXMLEntityTypeParsedExternal: c_int = 2;
pub const kCFXMLEntityTypeUnparsed: c_int = 3;
pub const kCFXMLEntityTypeCharacter: c_int = 4;
const enum_unnamed_102 = c_uint;
pub const CFXMLEntityInfo = extern struct {
    entityType: CFXMLEntityTypeCode = @import("std").mem.zeroes(CFXMLEntityTypeCode),
    replacementText: CFStringRef = @import("std").mem.zeroes(CFStringRef),
    entityID: CFXMLExternalID = @import("std").mem.zeroes(CFXMLExternalID),
    notationName: CFStringRef = @import("std").mem.zeroes(CFStringRef),
};
pub const CFXMLEntityReferenceInfo = extern struct {
    entityType: CFXMLEntityTypeCode = @import("std").mem.zeroes(CFXMLEntityTypeCode),
};
pub extern fn CFXMLNodeGetTypeID() CFTypeID;
pub extern fn CFXMLNodeCreate(alloc: CFAllocatorRef, xmlType: CFXMLNodeTypeCode, dataString: CFStringRef, additionalInfoPtr: ?*const anyopaque, version: CFIndex) CFXMLNodeRef;
pub extern fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef) CFXMLNodeRef;
pub extern fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) CFXMLNodeTypeCode;
pub extern fn CFXMLNodeGetString(node: CFXMLNodeRef) CFStringRef;
pub extern fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) ?*const anyopaque;
pub extern fn CFXMLNodeGetVersion(node: CFXMLNodeRef) CFIndex;
pub extern fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) CFXMLTreeRef;
pub extern fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) CFXMLNodeRef;
pub const struct___CFXMLParser = opaque {};
pub const CFXMLParserRef = ?*struct___CFXMLParser;
pub const CFXMLParserOptions = CFOptionFlags;
pub const kCFXMLParserValidateDocument: c_int = 1;
pub const kCFXMLParserSkipMetaData: c_int = 2;
pub const kCFXMLParserReplacePhysicalEntities: c_int = 4;
pub const kCFXMLParserSkipWhitespace: c_int = 8;
pub const kCFXMLParserResolveExternalEntities: c_int = 16;
pub const kCFXMLParserAddImpliedAttributes: c_int = 32;
pub const kCFXMLParserAllOptions: c_int = 16777215;
pub const kCFXMLParserNoOptions: c_int = 0;
const enum_unnamed_103 = c_uint;
pub const CFXMLParserStatusCode = CFIndex;
pub const kCFXMLStatusParseNotBegun: c_int = -2;
pub const kCFXMLStatusParseInProgress: c_int = -1;
pub const kCFXMLStatusParseSuccessful: c_int = 0;
pub const kCFXMLErrorUnexpectedEOF: c_int = 1;
pub const kCFXMLErrorUnknownEncoding: c_int = 2;
pub const kCFXMLErrorEncodingConversionFailure: c_int = 3;
pub const kCFXMLErrorMalformedProcessingInstruction: c_int = 4;
pub const kCFXMLErrorMalformedDTD: c_int = 5;
pub const kCFXMLErrorMalformedName: c_int = 6;
pub const kCFXMLErrorMalformedCDSect: c_int = 7;
pub const kCFXMLErrorMalformedCloseTag: c_int = 8;
pub const kCFXMLErrorMalformedStartTag: c_int = 9;
pub const kCFXMLErrorMalformedDocument: c_int = 10;
pub const kCFXMLErrorElementlessDocument: c_int = 11;
pub const kCFXMLErrorMalformedComment: c_int = 12;
pub const kCFXMLErrorMalformedCharacterReference: c_int = 13;
pub const kCFXMLErrorMalformedParsedCharacterData: c_int = 14;
pub const kCFXMLErrorNoData: c_int = 15;
const enum_unnamed_104 = c_int;
pub const CFXMLParserCreateXMLStructureCallBack = ?*const fn (CFXMLParserRef, CFXMLNodeRef, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const CFXMLParserAddChildCallBack = ?*const fn (CFXMLParserRef, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const CFXMLParserEndXMLStructureCallBack = ?*const fn (CFXMLParserRef, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const CFXMLParserResolveExternalEntityCallBack = ?*const fn (CFXMLParserRef, [*c]CFXMLExternalID, ?*anyopaque) callconv(.C) CFDataRef;
pub const CFXMLParserHandleErrorCallBack = ?*const fn (CFXMLParserRef, CFXMLParserStatusCode, ?*anyopaque) callconv(.C) Boolean;
pub const CFXMLParserCallBacks = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    createXMLStructure: CFXMLParserCreateXMLStructureCallBack = @import("std").mem.zeroes(CFXMLParserCreateXMLStructureCallBack),
    addChild: CFXMLParserAddChildCallBack = @import("std").mem.zeroes(CFXMLParserAddChildCallBack),
    endXMLStructure: CFXMLParserEndXMLStructureCallBack = @import("std").mem.zeroes(CFXMLParserEndXMLStructureCallBack),
    resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack = @import("std").mem.zeroes(CFXMLParserResolveExternalEntityCallBack),
    handleError: CFXMLParserHandleErrorCallBack = @import("std").mem.zeroes(CFXMLParserHandleErrorCallBack),
};
pub const CFXMLParserRetainCallBack = ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFXMLParserReleaseCallBack = ?*const fn (?*const anyopaque) callconv(.C) void;
pub const CFXMLParserCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFXMLParserContext = extern struct {
    version: CFIndex = @import("std").mem.zeroes(CFIndex),
    info: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    retain: CFXMLParserRetainCallBack = @import("std").mem.zeroes(CFXMLParserRetainCallBack),
    release: CFXMLParserReleaseCallBack = @import("std").mem.zeroes(CFXMLParserReleaseCallBack),
    copyDescription: CFXMLParserCopyDescriptionCallBack = @import("std").mem.zeroes(CFXMLParserCopyDescriptionCallBack),
};
pub extern fn CFXMLParserGetTypeID() CFTypeID;
pub extern fn CFXMLParserCreate(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, callBacks: [*c]CFXMLParserCallBacks, context: [*c]CFXMLParserContext) CFXMLParserRef;
pub extern fn CFXMLParserCreateWithDataFromURL(allocator: CFAllocatorRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, callBacks: [*c]CFXMLParserCallBacks, context: [*c]CFXMLParserContext) CFXMLParserRef;
pub extern fn CFXMLParserGetContext(parser: CFXMLParserRef, context: [*c]CFXMLParserContext) void;
pub extern fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, callBacks: [*c]CFXMLParserCallBacks) void;
pub extern fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) CFURLRef;
pub extern fn CFXMLParserGetLocation(parser: CFXMLParserRef) CFIndex;
pub extern fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) CFIndex;
pub extern fn CFXMLParserGetDocument(parser: CFXMLParserRef) ?*anyopaque;
pub extern fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) CFXMLParserStatusCode;
pub extern fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) CFStringRef;
pub extern fn CFXMLParserAbort(parser: CFXMLParserRef, errorCode: CFXMLParserStatusCode, errorDescription: CFStringRef) void;
pub extern fn CFXMLParserParse(parser: CFXMLParserRef) Boolean;
pub extern fn CFXMLTreeCreateFromData(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateFromDataWithError(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, errorDict: [*c]CFDictionaryRef) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateWithDataFromURL(allocator: CFAllocatorRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xmlTree: CFXMLTreeRef) CFDataRef;
pub extern fn CFXMLCreateStringByEscapingEntities(allocator: CFAllocatorRef, string: CFStringRef, entitiesDictionary: CFDictionaryRef) CFStringRef;
pub extern fn CFXMLCreateStringByUnescapingEntities(allocator: CFAllocatorRef, string: CFStringRef, entitiesDictionary: CFDictionaryRef) CFStringRef;
pub extern const kCFXMLTreeErrorDescription: CFStringRef;
pub extern const kCFXMLTreeErrorLineNumber: CFStringRef;
pub extern const kCFXMLTreeErrorLocation: CFStringRef;
pub extern const kCFXMLTreeErrorStatusCode: CFStringRef;
pub const CGColorDataFormat = extern struct {
    version: u32 = @import("std").mem.zeroes(u32),
    colorspace_info: CFTypeRef = @import("std").mem.zeroes(CFTypeRef),
    bitmap_info: CGBitmapInfo = @import("std").mem.zeroes(CGBitmapInfo),
    bits_per_component: usize = @import("std").mem.zeroes(usize),
    bytes_per_row: usize = @import("std").mem.zeroes(usize),
    intent: CGColorRenderingIntent = @import("std").mem.zeroes(CGColorRenderingIntent),
    decode: [*c]CGFloat = @import("std").mem.zeroes([*c]CGFloat),
};
pub extern fn CGConvertColorDataWithFormat(width: usize, height: usize, dst_data: ?*anyopaque, dst_format: CGColorDataFormat, src_data: ?*anyopaque, src_format: CGColorDataFormat, options: CFDictionaryRef) bool;
pub const struct_CGDataConsumer = opaque {};
pub const CGDataConsumerRef = ?*struct_CGDataConsumer;
pub const CGDataConsumerPutBytesCallback = ?*const fn (?*anyopaque, ?*const anyopaque, usize) callconv(.C) usize;
pub const CGDataConsumerReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGDataConsumerCallbacks = extern struct {
    putBytes: CGDataConsumerPutBytesCallback = @import("std").mem.zeroes(CGDataConsumerPutBytesCallback),
    releaseConsumer: CGDataConsumerReleaseInfoCallback = @import("std").mem.zeroes(CGDataConsumerReleaseInfoCallback),
};
pub const CGDataConsumerCallbacks = struct_CGDataConsumerCallbacks;
pub extern fn CGDataConsumerGetTypeID() CFTypeID;
pub extern fn CGDataConsumerCreate(info: ?*anyopaque, cbks: [*c]const CGDataConsumerCallbacks) CGDataConsumerRef;
pub extern fn CGDataConsumerCreateWithURL(url: CFURLRef) CGDataConsumerRef;
pub extern fn CGDataConsumerCreateWithCFData(data: CFMutableDataRef) CGDataConsumerRef;
pub extern fn CGDataConsumerRetain(consumer: CGDataConsumerRef) CGDataConsumerRef;
pub extern fn CGDataConsumerRelease(consumer: CGDataConsumerRef) void;
pub const CGError = i32;
pub const kCGErrorSuccess: c_int = 0;
pub const kCGErrorFailure: c_int = 1000;
pub const kCGErrorIllegalArgument: c_int = 1001;
pub const kCGErrorInvalidConnection: c_int = 1002;
pub const kCGErrorInvalidContext: c_int = 1003;
pub const kCGErrorCannotComplete: c_int = 1004;
pub const kCGErrorNotImplemented: c_int = 1006;
pub const kCGErrorRangeCheck: c_int = 1007;
pub const kCGErrorTypeCheck: c_int = 1008;
pub const kCGErrorInvalidOperation: c_int = 1010;
pub const kCGErrorNoneAvailable: c_int = 1011;
const enum_unnamed_105 = c_uint;
pub const CGErrorCallback = ?*const fn () callconv(.C) void;
pub extern fn CGErrorSetCallback(callback: CGErrorCallback) void;
pub const struct_CGLayer = opaque {};
pub const CGLayerRef = ?*struct_CGLayer;
pub extern fn CGLayerCreateWithContext(context: CGContextRef, size: CGSize, auxiliaryInfo: CFDictionaryRef) CGLayerRef;
pub extern fn CGLayerRetain(layer: CGLayerRef) CGLayerRef;
pub extern fn CGLayerRelease(layer: CGLayerRef) void;
pub extern fn CGLayerGetSize(layer: CGLayerRef) CGSize;
pub extern fn CGLayerGetContext(layer: CGLayerRef) CGContextRef;
pub extern fn CGContextDrawLayerInRect(context: CGContextRef, rect: CGRect, layer: CGLayerRef) void;
pub extern fn CGContextDrawLayerAtPoint(context: CGContextRef, point: CGPoint, layer: CGLayerRef) void;
pub extern fn CGLayerGetTypeID() CFTypeID;
pub const struct_CGPDFContentStream = opaque {};
pub const CGPDFContentStreamRef = ?*struct_CGPDFContentStream;
pub extern fn CGPDFContentStreamCreateWithPage(page: CGPDFPageRef) CGPDFContentStreamRef;
pub extern fn CGPDFContentStreamCreateWithStream(stream: CGPDFStreamRef, streamResources: CGPDFDictionaryRef, parent: CGPDFContentStreamRef) CGPDFContentStreamRef;
pub extern fn CGPDFContentStreamRetain(cs: CGPDFContentStreamRef) CGPDFContentStreamRef;
pub extern fn CGPDFContentStreamRelease(cs: CGPDFContentStreamRef) void;
pub extern fn CGPDFContentStreamGetStreams(cs: CGPDFContentStreamRef) CFArrayRef;
pub extern fn CGPDFContentStreamGetResource(cs: CGPDFContentStreamRef, category: [*c]const u8, name: [*c]const u8) CGPDFObjectRef;
pub extern fn CGPDFContextCreate(consumer: CGDataConsumerRef, mediaBox: [*c]const CGRect, auxiliaryInfo: CFDictionaryRef) CGContextRef;
pub extern fn CGPDFContextCreateWithURL(url: CFURLRef, mediaBox: [*c]const CGRect, auxiliaryInfo: CFDictionaryRef) CGContextRef;
pub extern fn CGPDFContextClose(context: CGContextRef) void;
pub extern fn CGPDFContextBeginPage(context: CGContextRef, pageInfo: CFDictionaryRef) void;
pub extern fn CGPDFContextEndPage(context: CGContextRef) void;
pub extern fn CGPDFContextAddDocumentMetadata(context: CGContextRef, metadata: CFDataRef) void;
pub extern fn CGPDFContextSetURLForRect(context: CGContextRef, url: CFURLRef, rect: CGRect) void;
pub extern fn CGPDFContextAddDestinationAtPoint(context: CGContextRef, name: CFStringRef, point: CGPoint) void;
pub extern fn CGPDFContextSetDestinationForRect(context: CGContextRef, name: CFStringRef, rect: CGRect) void;
pub extern const kCGPDFContextMediaBox: CFStringRef;
pub extern const kCGPDFContextCropBox: CFStringRef;
pub extern const kCGPDFContextBleedBox: CFStringRef;
pub extern const kCGPDFContextTrimBox: CFStringRef;
pub extern const kCGPDFContextArtBox: CFStringRef;
pub extern const kCGPDFContextTitle: CFStringRef;
pub extern const kCGPDFContextAuthor: CFStringRef;
pub extern const kCGPDFContextSubject: CFStringRef;
pub extern const kCGPDFContextKeywords: CFStringRef;
pub extern const kCGPDFContextCreator: CFStringRef;
pub extern const kCGPDFContextOwnerPassword: CFStringRef;
pub extern const kCGPDFContextUserPassword: CFStringRef;
pub extern const kCGPDFContextEncryptionKeyLength: CFStringRef;
pub extern const kCGPDFContextAllowsPrinting: CFStringRef;
pub extern const kCGPDFContextAllowsCopying: CFStringRef;
pub extern const kCGPDFContextOutputIntent: CFStringRef;
pub extern const kCGPDFXOutputIntentSubtype: CFStringRef;
pub extern const kCGPDFXOutputConditionIdentifier: CFStringRef;
pub extern const kCGPDFXOutputCondition: CFStringRef;
pub extern const kCGPDFXRegistryName: CFStringRef;
pub extern const kCGPDFXInfo: CFStringRef;
pub extern const kCGPDFXDestinationOutputProfile: CFStringRef;
pub extern const kCGPDFContextOutputIntents: CFStringRef;
pub extern const kCGPDFContextAccessPermissions: CFStringRef;
pub extern fn CGPDFContextSetOutline(context: CGContextRef, outline: CFDictionaryRef) void;
pub extern const kCGPDFContextCreateLinearizedPDF: CFStringRef;
pub extern const kCGPDFContextCreatePDFA: CFStringRef;
pub const CGPDFTagType = i32;
pub const CGPDFTagTypeDocument: c_int = 100;
pub const CGPDFTagTypePart: c_int = 101;
pub const CGPDFTagTypeArt: c_int = 102;
pub const CGPDFTagTypeSection: c_int = 103;
pub const CGPDFTagTypeDiv: c_int = 104;
pub const CGPDFTagTypeBlockQuote: c_int = 105;
pub const CGPDFTagTypeCaption: c_int = 106;
pub const CGPDFTagTypeTOC: c_int = 107;
pub const CGPDFTagTypeTOCI: c_int = 108;
pub const CGPDFTagTypeIndex: c_int = 109;
pub const CGPDFTagTypeNonStructure: c_int = 110;
pub const CGPDFTagTypePrivate: c_int = 111;
pub const CGPDFTagTypeParagraph: c_int = 200;
pub const CGPDFTagTypeHeader: c_int = 201;
pub const CGPDFTagTypeHeader1: c_int = 202;
pub const CGPDFTagTypeHeader2: c_int = 203;
pub const CGPDFTagTypeHeader3: c_int = 204;
pub const CGPDFTagTypeHeader4: c_int = 205;
pub const CGPDFTagTypeHeader5: c_int = 206;
pub const CGPDFTagTypeHeader6: c_int = 207;
pub const CGPDFTagTypeList: c_int = 300;
pub const CGPDFTagTypeListItem: c_int = 301;
pub const CGPDFTagTypeLabel: c_int = 302;
pub const CGPDFTagTypeListBody: c_int = 303;
pub const CGPDFTagTypeTable: c_int = 400;
pub const CGPDFTagTypeTableRow: c_int = 401;
pub const CGPDFTagTypeTableHeaderCell: c_int = 402;
pub const CGPDFTagTypeTableDataCell: c_int = 403;
pub const CGPDFTagTypeTableHeader: c_int = 404;
pub const CGPDFTagTypeTableBody: c_int = 405;
pub const CGPDFTagTypeTableFooter: c_int = 406;
pub const CGPDFTagTypeSpan: c_int = 500;
pub const CGPDFTagTypeQuote: c_int = 501;
pub const CGPDFTagTypeNote: c_int = 502;
pub const CGPDFTagTypeReference: c_int = 503;
pub const CGPDFTagTypeBibliography: c_int = 504;
pub const CGPDFTagTypeCode: c_int = 505;
pub const CGPDFTagTypeLink: c_int = 506;
pub const CGPDFTagTypeAnnotation: c_int = 507;
pub const CGPDFTagTypeRuby: c_int = 600;
pub const CGPDFTagTypeRubyBaseText: c_int = 601;
pub const CGPDFTagTypeRubyAnnotationText: c_int = 602;
pub const CGPDFTagTypeRubyPunctuation: c_int = 603;
pub const CGPDFTagTypeWarichu: c_int = 604;
pub const CGPDFTagTypeWarichuText: c_int = 605;
pub const CGPDFTagTypeWarichuPunctiation: c_int = 606;
pub const CGPDFTagTypeFigure: c_int = 700;
pub const CGPDFTagTypeFormula: c_int = 701;
pub const CGPDFTagTypeForm: c_int = 702;
const enum_unnamed_106 = c_uint;
pub extern fn CGPDFTagTypeGetName(tagType: CGPDFTagType) [*c]const u8;
pub const CGPDFTagProperty = CFStringRef;
pub extern const kCGPDFTagPropertyActualText: CGPDFTagProperty;
pub extern const kCGPDFTagPropertyAlternativeText: CGPDFTagProperty;
pub extern const kCGPDFTagPropertyTitleText: CGPDFTagProperty;
pub extern const kCGPDFTagPropertyLanguageText: CGPDFTagProperty;
pub extern fn CGPDFContextBeginTag(context: CGContextRef, tagType: CGPDFTagType, tagProperties: CFDictionaryRef) void;
pub extern fn CGPDFContextEndTag(context: CGContextRef) void;
pub const struct_CGPDFOperatorTable = opaque {};
pub const CGPDFOperatorTableRef = ?*struct_CGPDFOperatorTable;
pub const struct_CGPDFScanner = opaque {};
pub const CGPDFScannerRef = ?*struct_CGPDFScanner;
pub extern fn CGPDFScannerCreate(cs: CGPDFContentStreamRef, table: CGPDFOperatorTableRef, info: ?*anyopaque) CGPDFScannerRef;
pub extern fn CGPDFScannerRetain(scanner: CGPDFScannerRef) CGPDFScannerRef;
pub extern fn CGPDFScannerRelease(scanner: CGPDFScannerRef) void;
pub extern fn CGPDFScannerScan(scanner: CGPDFScannerRef) bool;
pub extern fn CGPDFScannerGetContentStream(scanner: CGPDFScannerRef) CGPDFContentStreamRef;
pub extern fn CGPDFScannerPopObject(scanner: CGPDFScannerRef, value: [*c]CGPDFObjectRef) bool;
pub extern fn CGPDFScannerPopBoolean(scanner: CGPDFScannerRef, value: [*c]CGPDFBoolean) bool;
pub extern fn CGPDFScannerPopInteger(scanner: CGPDFScannerRef, value: [*c]CGPDFInteger) bool;
pub extern fn CGPDFScannerPopNumber(scanner: CGPDFScannerRef, value: [*c]CGPDFReal) bool;
pub extern fn CGPDFScannerPopName(scanner: CGPDFScannerRef, value: [*c][*c]const u8) bool;
pub extern fn CGPDFScannerPopString(scanner: CGPDFScannerRef, value: [*c]CGPDFStringRef) bool;
pub extern fn CGPDFScannerPopArray(scanner: CGPDFScannerRef, value: [*c]CGPDFArrayRef) bool;
pub extern fn CGPDFScannerPopDictionary(scanner: CGPDFScannerRef, value: [*c]CGPDFDictionaryRef) bool;
pub extern fn CGPDFScannerPopStream(scanner: CGPDFScannerRef, value: [*c]CGPDFStreamRef) bool;
pub extern fn CGPDFScannerStop(s: CGPDFScannerRef) void;
pub const CGPDFOperatorCallback = ?*const fn (CGPDFScannerRef, ?*anyopaque) callconv(.C) void;
pub extern fn CGPDFOperatorTableCreate() CGPDFOperatorTableRef;
pub extern fn CGPDFOperatorTableRetain(table: CGPDFOperatorTableRef) CGPDFOperatorTableRef;
pub extern fn CGPDFOperatorTableRelease(table: CGPDFOperatorTableRef) void;
pub extern fn CGPDFOperatorTableSetCallback(table: CGPDFOperatorTableRef, name: [*c]const u8, callback: CGPDFOperatorCallback) void;
pub const CGWindowID = u32;
pub const CGWindowSharingType = u32;
pub const kCGWindowSharingNone: c_int = 0;
pub const kCGWindowSharingReadOnly: c_int = 1;
pub const kCGWindowSharingReadWrite: c_int = 2;
const enum_unnamed_107 = c_uint;
pub const CGWindowBackingType = u32;
pub const kCGBackingStoreRetained: c_int = 0;
pub const kCGBackingStoreNonretained: c_int = 1;
pub const kCGBackingStoreBuffered: c_int = 2;
const enum_unnamed_108 = c_uint;
pub extern const kCGWindowNumber: CFStringRef;
pub extern const kCGWindowStoreType: CFStringRef;
pub extern const kCGWindowLayer: CFStringRef;
pub extern const kCGWindowBounds: CFStringRef;
pub extern const kCGWindowSharingState: CFStringRef;
pub extern const kCGWindowAlpha: CFStringRef;
pub extern const kCGWindowOwnerPID: CFStringRef;
pub extern const kCGWindowMemoryUsage: CFStringRef;
pub extern const kCGWindowWorkspace: CFStringRef;
pub extern const kCGWindowOwnerName: CFStringRef;
pub extern const kCGWindowName: CFStringRef;
pub extern const kCGWindowIsOnscreen: CFStringRef;
pub extern const kCGWindowBackingLocationVideoMemory: CFStringRef;
pub const CGWindowListOption = u32;
pub const kCGWindowListOptionAll: c_int = 0;
pub const kCGWindowListOptionOnScreenOnly: c_int = 1;
pub const kCGWindowListOptionOnScreenAboveWindow: c_int = 2;
pub const kCGWindowListOptionOnScreenBelowWindow: c_int = 4;
pub const kCGWindowListOptionIncludingWindow: c_int = 8;
pub const kCGWindowListExcludeDesktopElements: c_int = 16;
const enum_unnamed_109 = c_uint;
pub extern fn CGWindowListCopyWindowInfo(option: CGWindowListOption, relativeToWindow: CGWindowID) CFArrayRef;
pub extern fn CGWindowListCreate(option: CGWindowListOption, relativeToWindow: CGWindowID) CFArrayRef;
pub extern fn CGWindowListCreateDescriptionFromArray(windowArray: CFArrayRef) CFArrayRef;
pub const CGWindowImageOption = u32;
pub const kCGWindowImageDefault: c_int = 0;
pub const kCGWindowImageBoundsIgnoreFraming: c_int = 1;
pub const kCGWindowImageShouldBeOpaque: c_int = 2;
pub const kCGWindowImageOnlyShadows: c_int = 4;
pub const kCGWindowImageBestResolution: c_int = 8;
pub const kCGWindowImageNominalResolution: c_int = 16;
const enum_unnamed_110 = c_uint;
pub extern fn CGWindowListCreateImage(screenBounds: CGRect, listOption: CGWindowListOption, windowID: CGWindowID, imageOption: CGWindowImageOption) CGImageRef;
pub extern fn CGWindowListCreateImageFromArray(screenBounds: CGRect, windowArray: CFArrayRef, imageOption: CGWindowImageOption) CGImageRef;
pub extern fn CGPreflightScreenCaptureAccess() bool;
pub extern fn CGRequestScreenCaptureAccess() bool;
pub const CGWindowLevelKey = i32;
pub const kCGBaseWindowLevelKey: c_int = 0;
pub const kCGMinimumWindowLevelKey: c_int = 1;
pub const kCGDesktopWindowLevelKey: c_int = 2;
pub const kCGBackstopMenuLevelKey: c_int = 3;
pub const kCGNormalWindowLevelKey: c_int = 4;
pub const kCGFloatingWindowLevelKey: c_int = 5;
pub const kCGTornOffMenuWindowLevelKey: c_int = 6;
pub const kCGDockWindowLevelKey: c_int = 7;
pub const kCGMainMenuWindowLevelKey: c_int = 8;
pub const kCGStatusWindowLevelKey: c_int = 9;
pub const kCGModalPanelWindowLevelKey: c_int = 10;
pub const kCGPopUpMenuWindowLevelKey: c_int = 11;
pub const kCGDraggingWindowLevelKey: c_int = 12;
pub const kCGScreenSaverWindowLevelKey: c_int = 13;
pub const kCGMaximumWindowLevelKey: c_int = 14;
pub const kCGOverlayWindowLevelKey: c_int = 15;
pub const kCGHelpWindowLevelKey: c_int = 16;
pub const kCGUtilityWindowLevelKey: c_int = 17;
pub const kCGDesktopIconWindowLevelKey: c_int = 18;
pub const kCGCursorWindowLevelKey: c_int = 19;
pub const kCGAssistiveTechHighWindowLevelKey: c_int = 20;
pub const kCGNumberOfWindowLevelKeys: c_int = 21;
const enum_unnamed_111 = c_uint;
pub const CGWindowLevel = i32;
pub extern fn CGWindowLevelForKey(key: CGWindowLevelKey) CGWindowLevel;
pub const CGDirectDisplayID = u32;
pub const CGOpenGLDisplayMask = u32;
pub const CGRefreshRate = f64;
pub const struct_CGDisplayMode = opaque {};
pub const CGDisplayModeRef = ?*struct_CGDisplayMode;
pub extern fn CGMainDisplayID() CGDirectDisplayID;
pub extern fn CGGetDisplaysWithPoint(point: CGPoint, maxDisplays: u32, displays: [*c]CGDirectDisplayID, matchingDisplayCount: [*c]u32) CGError;
pub extern fn CGGetDisplaysWithRect(rect: CGRect, maxDisplays: u32, displays: [*c]CGDirectDisplayID, matchingDisplayCount: [*c]u32) CGError;
pub extern fn CGGetDisplaysWithOpenGLDisplayMask(mask: CGOpenGLDisplayMask, maxDisplays: u32, displays: [*c]CGDirectDisplayID, matchingDisplayCount: [*c]u32) CGError;
pub extern fn CGGetActiveDisplayList(maxDisplays: u32, activeDisplays: [*c]CGDirectDisplayID, displayCount: [*c]u32) CGError;
pub extern fn CGGetOnlineDisplayList(maxDisplays: u32, onlineDisplays: [*c]CGDirectDisplayID, displayCount: [*c]u32) CGError;
pub extern fn CGDisplayIDToOpenGLDisplayMask(display: CGDirectDisplayID) CGOpenGLDisplayMask;
pub extern fn CGOpenGLDisplayMaskToDisplayID(mask: CGOpenGLDisplayMask) CGDirectDisplayID;
pub extern fn CGDisplayBounds(display: CGDirectDisplayID) CGRect;
pub extern fn CGDisplayPixelsWide(display: CGDirectDisplayID) usize;
pub extern fn CGDisplayPixelsHigh(display: CGDirectDisplayID) usize;
pub extern fn CGDisplayCopyAllDisplayModes(display: CGDirectDisplayID, options: CFDictionaryRef) CFArrayRef;
pub extern const kCGDisplayShowDuplicateLowResolutionModes: CFStringRef;
pub extern fn CGDisplayCopyDisplayMode(display: CGDirectDisplayID) CGDisplayModeRef;
pub extern fn CGDisplaySetDisplayMode(display: CGDirectDisplayID, mode: CGDisplayModeRef, options: CFDictionaryRef) CGError;
pub extern fn CGDisplayModeGetWidth(mode: CGDisplayModeRef) usize;
pub extern fn CGDisplayModeGetHeight(mode: CGDisplayModeRef) usize;
pub extern fn CGDisplayModeCopyPixelEncoding(mode: CGDisplayModeRef) CFStringRef;
pub extern fn CGDisplayModeGetRefreshRate(mode: CGDisplayModeRef) f64;
pub extern fn CGDisplayModeGetIOFlags(mode: CGDisplayModeRef) u32;
pub extern fn CGDisplayModeGetIODisplayModeID(mode: CGDisplayModeRef) i32;
pub extern fn CGDisplayModeIsUsableForDesktopGUI(mode: CGDisplayModeRef) bool;
pub extern fn CGDisplayModeGetTypeID() CFTypeID;
pub extern fn CGDisplayModeRetain(mode: CGDisplayModeRef) CGDisplayModeRef;
pub extern fn CGDisplayModeRelease(mode: CGDisplayModeRef) void;
pub extern fn CGDisplayModeGetPixelWidth(mode: CGDisplayModeRef) usize;
pub extern fn CGDisplayModeGetPixelHeight(mode: CGDisplayModeRef) usize;
pub const CGGammaValue = f32;
pub extern fn CGSetDisplayTransferByFormula(display: CGDirectDisplayID, redMin: CGGammaValue, redMax: CGGammaValue, redGamma: CGGammaValue, greenMin: CGGammaValue, greenMax: CGGammaValue, greenGamma: CGGammaValue, blueMin: CGGammaValue, blueMax: CGGammaValue, blueGamma: CGGammaValue) CGError;
pub extern fn CGGetDisplayTransferByFormula(display: CGDirectDisplayID, redMin: [*c]CGGammaValue, redMax: [*c]CGGammaValue, redGamma: [*c]CGGammaValue, greenMin: [*c]CGGammaValue, greenMax: [*c]CGGammaValue, greenGamma: [*c]CGGammaValue, blueMin: [*c]CGGammaValue, blueMax: [*c]CGGammaValue, blueGamma: [*c]CGGammaValue) CGError;
pub extern fn CGDisplayGammaTableCapacity(display: CGDirectDisplayID) u32;
pub extern fn CGSetDisplayTransferByTable(display: CGDirectDisplayID, tableSize: u32, redTable: [*c]const CGGammaValue, greenTable: [*c]const CGGammaValue, blueTable: [*c]const CGGammaValue) CGError;
pub extern fn CGGetDisplayTransferByTable(display: CGDirectDisplayID, capacity: u32, redTable: [*c]CGGammaValue, greenTable: [*c]CGGammaValue, blueTable: [*c]CGGammaValue, sampleCount: [*c]u32) CGError;
pub extern fn CGSetDisplayTransferByByteTable(display: CGDirectDisplayID, tableSize: u32, redTable: [*c]const u8, greenTable: [*c]const u8, blueTable: [*c]const u8) CGError;
pub extern fn CGDisplayRestoreColorSyncSettings() void;
pub const CGCaptureOptions = u32;
pub const kCGCaptureNoOptions: c_int = 0;
pub const kCGCaptureNoFill: c_int = 1;
const enum_unnamed_112 = c_uint;
pub extern fn CGDisplayIsCaptured(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayCapture(display: CGDirectDisplayID) CGError;
pub extern fn CGDisplayCaptureWithOptions(display: CGDirectDisplayID, options: CGCaptureOptions) CGError;
pub extern fn CGDisplayRelease(display: CGDirectDisplayID) CGError;
pub extern fn CGCaptureAllDisplays() CGError;
pub extern fn CGCaptureAllDisplaysWithOptions(options: CGCaptureOptions) CGError;
pub extern fn CGReleaseAllDisplays() CGError;
pub extern fn CGShieldingWindowID(display: CGDirectDisplayID) CGWindowID;
pub extern fn CGShieldingWindowLevel() CGWindowLevel;
pub extern fn CGDisplayCreateImage(displayID: CGDirectDisplayID) CGImageRef;
pub extern fn CGDisplayCreateImageForRect(display: CGDirectDisplayID, rect: CGRect) CGImageRef;
pub extern fn CGDisplayHideCursor(display: CGDirectDisplayID) CGError;
pub extern fn CGDisplayShowCursor(display: CGDirectDisplayID) CGError;
pub extern fn CGDisplayMoveCursorToPoint(display: CGDirectDisplayID, point: CGPoint) CGError;
pub extern fn CGGetLastMouseDelta(deltaX: [*c]i32, deltaY: [*c]i32) void;
pub extern fn CGDisplayGetDrawingContext(display: CGDirectDisplayID) CGContextRef;
pub const CGDisplayCount = u32;
pub const CGDisplayErr = CGError;
pub extern fn CGDisplayAvailableModes(dsp: CGDirectDisplayID) CFArrayRef;
pub extern fn CGDisplayBestModeForParameters(display: CGDirectDisplayID, bitsPerPixel: usize, width: usize, height: usize, exactMatch: [*c]boolean_t) CFDictionaryRef;
pub extern fn CGDisplayBestModeForParametersAndRefreshRate(display: CGDirectDisplayID, bitsPerPixel: usize, width: usize, height: usize, refreshRate: CGRefreshRate, exactMatch: [*c]boolean_t) CFDictionaryRef;
pub extern fn CGDisplayCurrentMode(display: CGDirectDisplayID) CFDictionaryRef;
pub extern fn CGDisplaySwitchToMode(display: CGDirectDisplayID, mode: CFDictionaryRef) CGError;
pub const struct_CGDeviceColor = extern struct {
    red: f32 = @import("std").mem.zeroes(f32),
    green: f32 = @import("std").mem.zeroes(f32),
    blue: f32 = @import("std").mem.zeroes(f32),
};
pub const CGDeviceColor = struct_CGDeviceColor;
pub const struct_vm_statistics = extern struct {
    free_count: natural_t = @import("std").mem.zeroes(natural_t),
    active_count: natural_t = @import("std").mem.zeroes(natural_t),
    inactive_count: natural_t = @import("std").mem.zeroes(natural_t),
    wire_count: natural_t = @import("std").mem.zeroes(natural_t),
    zero_fill_count: natural_t = @import("std").mem.zeroes(natural_t),
    reactivations: natural_t = @import("std").mem.zeroes(natural_t),
    pageins: natural_t = @import("std").mem.zeroes(natural_t),
    pageouts: natural_t = @import("std").mem.zeroes(natural_t),
    faults: natural_t = @import("std").mem.zeroes(natural_t),
    cow_faults: natural_t = @import("std").mem.zeroes(natural_t),
    lookups: natural_t = @import("std").mem.zeroes(natural_t),
    hits: natural_t = @import("std").mem.zeroes(natural_t),
    purgeable_count: natural_t = @import("std").mem.zeroes(natural_t),
    purges: natural_t = @import("std").mem.zeroes(natural_t),
    speculative_count: natural_t = @import("std").mem.zeroes(natural_t),
};
pub const vm_statistics_t = [*c]struct_vm_statistics;
pub const vm_statistics_data_t = struct_vm_statistics;
pub const struct_vm_statistics64 = extern struct {
    free_count: natural_t = @import("std").mem.zeroes(natural_t),
    active_count: natural_t = @import("std").mem.zeroes(natural_t),
    inactive_count: natural_t = @import("std").mem.zeroes(natural_t),
    wire_count: natural_t = @import("std").mem.zeroes(natural_t),
    zero_fill_count: u64 = @import("std").mem.zeroes(u64),
    reactivations: u64 = @import("std").mem.zeroes(u64),
    pageins: u64 = @import("std").mem.zeroes(u64),
    pageouts: u64 = @import("std").mem.zeroes(u64),
    faults: u64 = @import("std").mem.zeroes(u64),
    cow_faults: u64 = @import("std").mem.zeroes(u64),
    lookups: u64 = @import("std").mem.zeroes(u64),
    hits: u64 = @import("std").mem.zeroes(u64),
    purges: u64 = @import("std").mem.zeroes(u64),
    purgeable_count: natural_t = @import("std").mem.zeroes(natural_t),
    speculative_count: natural_t = @import("std").mem.zeroes(natural_t),
    decompressions: u64 = @import("std").mem.zeroes(u64),
    compressions: u64 = @import("std").mem.zeroes(u64),
    swapins: u64 = @import("std").mem.zeroes(u64),
    swapouts: u64 = @import("std").mem.zeroes(u64),
    compressor_page_count: natural_t = @import("std").mem.zeroes(natural_t),
    throttled_count: natural_t = @import("std").mem.zeroes(natural_t),
    external_page_count: natural_t = @import("std").mem.zeroes(natural_t),
    internal_page_count: natural_t = @import("std").mem.zeroes(natural_t),
    total_uncompressed_pages_in_compressor: u64 = @import("std").mem.zeroes(u64),
};
pub const vm_statistics64_t = [*c]struct_vm_statistics64;
pub const vm_statistics64_data_t = struct_vm_statistics64;
pub extern fn vm_stats(info: ?*anyopaque, count: [*c]c_uint) kern_return_t;
pub const struct_vm_extmod_statistics = extern struct {
    task_for_pid_count: i64 = @import("std").mem.zeroes(i64),
    task_for_pid_caller_count: i64 = @import("std").mem.zeroes(i64),
    thread_creation_count: i64 = @import("std").mem.zeroes(i64),
    thread_creation_caller_count: i64 = @import("std").mem.zeroes(i64),
    thread_set_state_count: i64 = @import("std").mem.zeroes(i64),
    thread_set_state_caller_count: i64 = @import("std").mem.zeroes(i64),
};
pub const vm_extmod_statistics_t = [*c]struct_vm_extmod_statistics;
pub const vm_extmod_statistics_data_t = struct_vm_extmod_statistics;
pub const struct_vm_purgeable_stat = extern struct {
    count: u64 = @import("std").mem.zeroes(u64),
    size: u64 = @import("std").mem.zeroes(u64),
};
pub const vm_purgeable_stat_t = struct_vm_purgeable_stat;
pub const struct_vm_purgeable_info = extern struct {
    fifo_data: [8]vm_purgeable_stat_t = @import("std").mem.zeroes([8]vm_purgeable_stat_t),
    obsolete_data: vm_purgeable_stat_t = @import("std").mem.zeroes(vm_purgeable_stat_t),
    lifo_data: [8]vm_purgeable_stat_t = @import("std").mem.zeroes([8]vm_purgeable_stat_t),
};
pub const vm_purgeable_info_t = [*c]struct_vm_purgeable_info;
pub const kGUARD_EXC_DEALLOC_GAP: c_int = 1;
pub const kGUARD_EXC_RECLAIM_COPYIO_FAILURE: c_int = 2;
pub const kGUARD_EXC_RECLAIM_INDEX_FAILURE: c_int = 4;
pub const kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE: c_int = 8;
pub const enum_virtual_memory_guard_exception_codes = c_uint;
pub const host_info_t = [*c]integer_t;
pub const host_info64_t = [*c]integer_t;
pub const host_info_data_t = [1024]integer_t;
pub const kernel_version_t = [512]u8;
pub const kernel_boot_info_t = [4096]u8;
pub const host_flavor_t = integer_t;
pub const struct_host_can_has_debugger_info = extern struct {
    can_has_debugger: boolean_t = @import("std").mem.zeroes(boolean_t),
};
pub const host_can_has_debugger_info_data_t = struct_host_can_has_debugger_info;
pub const host_can_has_debugger_info_t = [*c]struct_host_can_has_debugger_info;
pub const struct_host_basic_info = extern struct {
    max_cpus: integer_t = @import("std").mem.zeroes(integer_t),
    avail_cpus: integer_t = @import("std").mem.zeroes(integer_t),
    memory_size: natural_t = @import("std").mem.zeroes(natural_t),
    cpu_type: cpu_type_t = @import("std").mem.zeroes(cpu_type_t),
    cpu_subtype: cpu_subtype_t = @import("std").mem.zeroes(cpu_subtype_t),
    cpu_threadtype: cpu_threadtype_t = @import("std").mem.zeroes(cpu_threadtype_t),
    physical_cpu: integer_t = @import("std").mem.zeroes(integer_t),
    physical_cpu_max: integer_t = @import("std").mem.zeroes(integer_t),
    logical_cpu: integer_t = @import("std").mem.zeroes(integer_t),
    logical_cpu_max: integer_t = @import("std").mem.zeroes(integer_t),
    max_mem: u64 = @import("std").mem.zeroes(u64),
};
pub const host_basic_info_data_t = struct_host_basic_info;
pub const host_basic_info_t = [*c]struct_host_basic_info;
pub const struct_host_sched_info = extern struct {
    min_timeout: integer_t = @import("std").mem.zeroes(integer_t),
    min_quantum: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const host_sched_info_data_t = struct_host_sched_info;
pub const host_sched_info_t = [*c]struct_host_sched_info;
pub const struct_kernel_resource_sizes = extern struct {
    task: natural_t = @import("std").mem.zeroes(natural_t),
    thread: natural_t = @import("std").mem.zeroes(natural_t),
    port: natural_t = @import("std").mem.zeroes(natural_t),
    memory_region: natural_t = @import("std").mem.zeroes(natural_t),
    memory_object: natural_t = @import("std").mem.zeroes(natural_t),
};
pub const kernel_resource_sizes_data_t = struct_kernel_resource_sizes;
pub const kernel_resource_sizes_t = [*c]struct_kernel_resource_sizes;
pub const struct_host_priority_info = extern struct {
    kernel_priority: integer_t = @import("std").mem.zeroes(integer_t),
    system_priority: integer_t = @import("std").mem.zeroes(integer_t),
    server_priority: integer_t = @import("std").mem.zeroes(integer_t),
    user_priority: integer_t = @import("std").mem.zeroes(integer_t),
    depress_priority: integer_t = @import("std").mem.zeroes(integer_t),
    idle_priority: integer_t = @import("std").mem.zeroes(integer_t),
    minimum_priority: integer_t = @import("std").mem.zeroes(integer_t),
    maximum_priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const host_priority_info_data_t = struct_host_priority_info;
pub const host_priority_info_t = [*c]struct_host_priority_info;
pub const struct_host_load_info = extern struct {
    avenrun: [3]integer_t = @import("std").mem.zeroes([3]integer_t),
    mach_factor: [3]integer_t = @import("std").mem.zeroes([3]integer_t),
};
pub const host_load_info_data_t = struct_host_load_info;
pub const host_load_info_t = [*c]struct_host_load_info;
pub const host_purgable_info_data_t = struct_vm_purgeable_info;
pub const host_purgable_info_t = [*c]struct_vm_purgeable_info;
pub const struct_host_cpu_load_info = extern struct {
    cpu_ticks: [4]natural_t = @import("std").mem.zeroes([4]natural_t),
};
pub const host_cpu_load_info_data_t = struct_host_cpu_load_info;
pub const host_cpu_load_info_t = [*c]struct_host_cpu_load_info;
pub const struct_host_preferred_user_arch = extern struct {
    cpu_type: cpu_type_t = @import("std").mem.zeroes(cpu_type_t),
    cpu_subtype: cpu_subtype_t = @import("std").mem.zeroes(cpu_subtype_t),
};
pub const host_preferred_user_arch_data_t = struct_host_preferred_user_arch;
pub const host_preferred_user_arch_t = [*c]struct_host_preferred_user_arch;
pub const vm_prot_t = c_int;
pub const vm_sync_t = c_uint;
pub const pointer_t = vm_offset_t;
pub const vm_address_t = vm_offset_t;
pub const addr64_t = u64;
pub const reg64_t = u32;
pub const ppnum_t = u32;
pub const vm_map_t = mach_port_t;
pub const vm_map_read_t = mach_port_t;
pub const vm_map_inspect_t = mach_port_t;
pub const vm_object_offset_t = u64;
pub const vm_object_size_t = u64;
pub const struct_mach_vm_range = extern struct {
    min_address: mach_vm_offset_t = @import("std").mem.zeroes(mach_vm_offset_t),
    max_address: mach_vm_offset_t = @import("std").mem.zeroes(mach_vm_offset_t),
};
pub const mach_vm_range_t = [*c]struct_mach_vm_range;
pub const upl_t = mach_port_t;
pub const vm_named_entry_t = mach_port_t;
pub const memory_object_offset_t = c_ulonglong;
pub const memory_object_size_t = c_ulonglong;
pub const memory_object_cluster_size_t = natural_t;
pub const memory_object_fault_info_t = [*c]natural_t;
pub const vm_object_id_t = c_ulonglong;
pub const memory_object_t = mach_port_t;
pub const memory_object_control_t = mach_port_t;
pub const memory_object_array_t = [*c]memory_object_t;
pub const memory_object_name_t = mach_port_t;
pub const memory_object_default_t = mach_port_t;
pub const memory_object_copy_strategy_t = c_int;
pub const memory_object_return_t = c_int;
pub const memory_object_info_t = [*c]c_int;
pub const memory_object_flavor_t = c_int;
pub const memory_object_info_data_t = [1024]c_int;
pub const struct_memory_object_perf_info = extern struct {
    cluster_size: memory_object_cluster_size_t = @import("std").mem.zeroes(memory_object_cluster_size_t),
    may_cache: boolean_t = @import("std").mem.zeroes(boolean_t),
};
pub const struct_memory_object_attr_info = extern struct {
    copy_strategy: memory_object_copy_strategy_t = @import("std").mem.zeroes(memory_object_copy_strategy_t),
    cluster_size: memory_object_cluster_size_t = @import("std").mem.zeroes(memory_object_cluster_size_t),
    may_cache_object: boolean_t = @import("std").mem.zeroes(boolean_t),
    temporary: boolean_t = @import("std").mem.zeroes(boolean_t),
};
pub const struct_memory_object_behave_info = extern struct {
    copy_strategy: memory_object_copy_strategy_t = @import("std").mem.zeroes(memory_object_copy_strategy_t),
    temporary: boolean_t = @import("std").mem.zeroes(boolean_t),
    invalidate: boolean_t = @import("std").mem.zeroes(boolean_t),
    silent_overwrite: boolean_t = @import("std").mem.zeroes(boolean_t),
    advisory_pageout: boolean_t = @import("std").mem.zeroes(boolean_t),
};
pub const memory_object_behave_info_t = [*c]struct_memory_object_behave_info;
pub const memory_object_behave_info_data_t = struct_memory_object_behave_info;
pub const memory_object_perf_info_t = [*c]struct_memory_object_perf_info;
pub const memory_object_perf_info_data_t = struct_memory_object_perf_info;
pub const memory_object_attr_info_t = [*c]struct_memory_object_attr_info;
pub const memory_object_attr_info_data_t = struct_memory_object_attr_info;
pub const struct_arm_state_hdr = extern struct {
    flavor: u32 = @import("std").mem.zeroes(u32),
    count: u32 = @import("std").mem.zeroes(u32),
};
pub const arm_state_hdr_t = struct_arm_state_hdr;
pub const arm_thread_state_t = struct___darwin_arm_thread_state;
pub const arm_thread_state32_t = struct___darwin_arm_thread_state;
pub const arm_thread_state64_t = struct___darwin_arm_thread_state64;
const union_unnamed_113 = extern union {
    ts_32: arm_thread_state32_t,
    ts_64: arm_thread_state64_t,
};
pub const struct_arm_unified_thread_state = extern struct {
    ash: arm_state_hdr_t = @import("std").mem.zeroes(arm_state_hdr_t),
    uts: union_unnamed_113 = @import("std").mem.zeroes(union_unnamed_113),
};
pub const arm_unified_thread_state_t = struct_arm_unified_thread_state;
pub const arm_vfp_state_t = struct___darwin_arm_vfp_state;
pub const arm_neon_state_t = struct___darwin_arm_neon_state;
pub const arm_neon_state32_t = struct___darwin_arm_neon_state;
pub const arm_neon_state64_t = struct___darwin_arm_neon_state64;
pub const arm_exception_state_t = struct___darwin_arm_exception_state;
pub const arm_exception_state32_t = struct___darwin_arm_exception_state;
pub const arm_exception_state64_t = struct___darwin_arm_exception_state64;
pub const arm_debug_state32_t = struct___darwin_arm_debug_state32;
pub const arm_debug_state64_t = struct___darwin_arm_debug_state64;
pub const arm_pagein_state_t = struct___arm_pagein_state;
pub const arm_debug_state_t = struct___arm_legacy_debug_state;
pub const thread_state_t = [*c]natural_t;
pub const thread_state_data_t = [1296]natural_t;
pub const thread_state_flavor_t = c_int;
pub const thread_state_flavor_array_t = [*c]thread_state_flavor_t;
pub const struct_ipc_info_space = extern struct {
    iis_genno_mask: natural_t = @import("std").mem.zeroes(natural_t),
    iis_table_size: natural_t = @import("std").mem.zeroes(natural_t),
    iis_table_next: natural_t = @import("std").mem.zeroes(natural_t),
    iis_tree_size: natural_t = @import("std").mem.zeroes(natural_t),
    iis_tree_small: natural_t = @import("std").mem.zeroes(natural_t),
    iis_tree_hash: natural_t = @import("std").mem.zeroes(natural_t),
};
pub const ipc_info_space_t = struct_ipc_info_space;
pub const struct_ipc_info_space_basic = extern struct {
    iisb_genno_mask: natural_t = @import("std").mem.zeroes(natural_t),
    iisb_table_size: natural_t = @import("std").mem.zeroes(natural_t),
    iisb_table_next: natural_t = @import("std").mem.zeroes(natural_t),
    iisb_table_inuse: natural_t = @import("std").mem.zeroes(natural_t),
    iisb_reserved: [2]natural_t = @import("std").mem.zeroes([2]natural_t),
};
pub const ipc_info_space_basic_t = struct_ipc_info_space_basic;
pub const struct_ipc_info_name = extern struct {
    iin_name: mach_port_name_t = @import("std").mem.zeroes(mach_port_name_t),
    iin_collision: integer_t = @import("std").mem.zeroes(integer_t),
    iin_type: mach_port_type_t = @import("std").mem.zeroes(mach_port_type_t),
    iin_urefs: mach_port_urefs_t = @import("std").mem.zeroes(mach_port_urefs_t),
    iin_object: natural_t = @import("std").mem.zeroes(natural_t),
    iin_next: natural_t = @import("std").mem.zeroes(natural_t),
    iin_hash: natural_t = @import("std").mem.zeroes(natural_t),
};
pub const ipc_info_name_t = struct_ipc_info_name;
pub const ipc_info_name_array_t = [*c]ipc_info_name_t;
pub const struct_ipc_info_tree_name = extern struct {
    iitn_name: ipc_info_name_t = @import("std").mem.zeroes(ipc_info_name_t),
    iitn_lchild: mach_port_name_t = @import("std").mem.zeroes(mach_port_name_t),
    iitn_rchild: mach_port_name_t = @import("std").mem.zeroes(mach_port_name_t),
};
pub const ipc_info_tree_name_t = struct_ipc_info_tree_name;
pub const ipc_info_tree_name_array_t = [*c]ipc_info_tree_name_t;
pub const struct_ipc_info_port = extern struct {
    iip_port_object: natural_t = @import("std").mem.zeroes(natural_t),
    iip_receiver_object: natural_t = @import("std").mem.zeroes(natural_t),
};
pub const ipc_info_port_t = struct_ipc_info_port;
pub const exception_handler_info_array_t = [*c]ipc_info_port_t;
pub const exception_type_t = c_int;
pub const exception_data_type_t = integer_t;
pub const mach_exception_data_type_t = i64;
pub const exception_behavior_t = c_int;
pub const exception_data_t = [*c]exception_data_type_t;
pub const mach_exception_data_t = [*c]mach_exception_data_type_t;
pub const exception_mask_t = c_uint;
pub const exception_mask_array_t = [*c]exception_mask_t;
pub const exception_behavior_array_t = [*c]exception_behavior_t;
pub const exception_flavor_array_t = [*c]thread_state_flavor_t;
pub const exception_port_array_t = [*c]mach_port_t;
pub const exception_port_info_array_t = [*c]ipc_info_port_t;
pub const mach_exception_code_t = mach_exception_data_type_t;
pub const mach_exception_subcode_t = mach_exception_data_type_t;
pub const mach_voucher_t = mach_port_t;
pub const mach_voucher_name_t = mach_port_name_t;
pub const mach_voucher_name_array_t = [*c]mach_voucher_name_t;
pub const ipc_voucher_t = mach_voucher_t;
pub const mach_voucher_selector_t = u32;
pub const mach_voucher_attr_key_t = u32;
pub const mach_voucher_attr_key_array_t = [*c]mach_voucher_attr_key_t;
pub const mach_voucher_attr_content_t = [*c]u8;
pub const mach_voucher_attr_content_size_t = u32;
pub const mach_voucher_attr_command_t = u32;
pub const mach_voucher_attr_recipe_command_t = u32;
pub const mach_voucher_attr_recipe_command_array_t = [*c]mach_voucher_attr_recipe_command_t;
pub const struct_mach_voucher_attr_recipe_data = extern struct {
    key: mach_voucher_attr_key_t align(1) = @import("std").mem.zeroes(mach_voucher_attr_key_t),
    command: mach_voucher_attr_recipe_command_t = @import("std").mem.zeroes(mach_voucher_attr_recipe_command_t),
    previous_voucher: mach_voucher_name_t = @import("std").mem.zeroes(mach_voucher_name_t),
    content_size: mach_voucher_attr_content_size_t = @import("std").mem.zeroes(mach_voucher_attr_content_size_t),
    pub fn content(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 16)));
    }
};
pub const mach_voucher_attr_recipe_data_t = struct_mach_voucher_attr_recipe_data;
pub const mach_voucher_attr_recipe_t = [*c]mach_voucher_attr_recipe_data_t;
pub const mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub const mach_voucher_attr_raw_recipe_t = [*c]u8;
pub const mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub const mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub const mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub const mach_voucher_attr_manager_t = mach_port_t;
pub const mach_voucher_attr_control_t = mach_port_t;
pub const ipc_voucher_attr_manager_t = mach_port_t;
pub const ipc_voucher_attr_control_t = mach_port_t;
pub const mach_voucher_attr_value_handle_t = u64;
pub const mach_voucher_attr_value_handle_array_t = [*c]mach_voucher_attr_value_handle_t;
pub const mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub const mach_voucher_attr_value_reference_t = u32;
pub const mach_voucher_attr_value_flags_t = u32;
pub const mach_voucher_attr_control_flags_t = u32;
pub const mach_voucher_attr_importance_refs = u32;
pub const struct_processor_cpu_stat = extern struct {
    irq_ex_cnt: u32 = @import("std").mem.zeroes(u32),
    ipi_cnt: u32 = @import("std").mem.zeroes(u32),
    timer_cnt: u32 = @import("std").mem.zeroes(u32),
    undef_ex_cnt: u32 = @import("std").mem.zeroes(u32),
    unaligned_cnt: u32 = @import("std").mem.zeroes(u32),
    vfp_cnt: u32 = @import("std").mem.zeroes(u32),
    vfp_shortv_cnt: u32 = @import("std").mem.zeroes(u32),
    data_ex_cnt: u32 = @import("std").mem.zeroes(u32),
    instr_ex_cnt: u32 = @import("std").mem.zeroes(u32),
};
pub const processor_cpu_stat_data_t = struct_processor_cpu_stat;
pub const processor_cpu_stat_t = [*c]struct_processor_cpu_stat;
pub const struct_processor_cpu_stat64 = extern struct {
    irq_ex_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
    ipi_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
    timer_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
    undef_ex_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
    unaligned_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
    vfp_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
    vfp_shortv_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
    data_ex_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
    instr_ex_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
    pmi_cnt: u64 align(1) = @import("std").mem.zeroes(u64),
};
pub const processor_cpu_stat64_data_t = struct_processor_cpu_stat64;
pub const processor_cpu_stat64_t = [*c]struct_processor_cpu_stat64;
pub const processor_info_t = [*c]integer_t;
pub const processor_info_array_t = [*c]integer_t;
pub const processor_info_data_t = [1024]integer_t;
pub const processor_set_info_t = [*c]integer_t;
pub const processor_set_info_data_t = [1024]integer_t;
pub const processor_flavor_t = c_int;
const union_unnamed_114 = extern union {
    is_master: boolean_t,
    is_main: boolean_t,
};
pub const struct_processor_basic_info = extern struct {
    cpu_type: cpu_type_t = @import("std").mem.zeroes(cpu_type_t),
    cpu_subtype: cpu_subtype_t = @import("std").mem.zeroes(cpu_subtype_t),
    running: boolean_t = @import("std").mem.zeroes(boolean_t),
    slot_num: c_int = @import("std").mem.zeroes(c_int),
    unnamed_0: union_unnamed_114 = @import("std").mem.zeroes(union_unnamed_114),
};
pub const processor_basic_info_data_t = struct_processor_basic_info;
pub const processor_basic_info_t = [*c]struct_processor_basic_info;
pub const struct_processor_cpu_load_info = extern struct {
    cpu_ticks: [4]c_uint = @import("std").mem.zeroes([4]c_uint),
};
pub const processor_cpu_load_info_data_t = struct_processor_cpu_load_info;
pub const processor_cpu_load_info_t = [*c]struct_processor_cpu_load_info;
pub const processor_set_flavor_t = c_int;
pub const struct_processor_set_basic_info = extern struct {
    processor_count: c_int = @import("std").mem.zeroes(c_int),
    default_policy: c_int = @import("std").mem.zeroes(c_int),
};
pub const processor_set_basic_info_data_t = struct_processor_set_basic_info;
pub const processor_set_basic_info_t = [*c]struct_processor_set_basic_info;
pub const struct_processor_set_load_info = extern struct {
    task_count: c_int = @import("std").mem.zeroes(c_int),
    thread_count: c_int = @import("std").mem.zeroes(c_int),
    load_average: integer_t = @import("std").mem.zeroes(integer_t),
    mach_factor: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const processor_set_load_info_data_t = struct_processor_set_load_info;
pub const processor_set_load_info_t = [*c]struct_processor_set_load_info;
pub const policy_t = c_int;
pub const policy_info_t = [*c]integer_t;
pub const policy_base_t = [*c]integer_t;
pub const policy_limit_t = [*c]integer_t;
pub const struct_policy_timeshare_base = extern struct {
    base_priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const struct_policy_timeshare_limit = extern struct {
    max_priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const struct_policy_timeshare_info = extern struct {
    max_priority: integer_t = @import("std").mem.zeroes(integer_t),
    base_priority: integer_t = @import("std").mem.zeroes(integer_t),
    cur_priority: integer_t = @import("std").mem.zeroes(integer_t),
    depressed: boolean_t = @import("std").mem.zeroes(boolean_t),
    depress_priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const policy_timeshare_base_t = [*c]struct_policy_timeshare_base;
pub const policy_timeshare_limit_t = [*c]struct_policy_timeshare_limit;
pub const policy_timeshare_info_t = [*c]struct_policy_timeshare_info;
pub const policy_timeshare_base_data_t = struct_policy_timeshare_base;
pub const policy_timeshare_limit_data_t = struct_policy_timeshare_limit;
pub const policy_timeshare_info_data_t = struct_policy_timeshare_info;
pub const struct_policy_rr_base = extern struct {
    base_priority: integer_t = @import("std").mem.zeroes(integer_t),
    quantum: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const struct_policy_rr_limit = extern struct {
    max_priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const struct_policy_rr_info = extern struct {
    max_priority: integer_t = @import("std").mem.zeroes(integer_t),
    base_priority: integer_t = @import("std").mem.zeroes(integer_t),
    quantum: integer_t = @import("std").mem.zeroes(integer_t),
    depressed: boolean_t = @import("std").mem.zeroes(boolean_t),
    depress_priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const policy_rr_base_t = [*c]struct_policy_rr_base;
pub const policy_rr_limit_t = [*c]struct_policy_rr_limit;
pub const policy_rr_info_t = [*c]struct_policy_rr_info;
pub const policy_rr_base_data_t = struct_policy_rr_base;
pub const policy_rr_limit_data_t = struct_policy_rr_limit;
pub const policy_rr_info_data_t = struct_policy_rr_info;
pub const struct_policy_fifo_base = extern struct {
    base_priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const struct_policy_fifo_limit = extern struct {
    max_priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const struct_policy_fifo_info = extern struct {
    max_priority: integer_t = @import("std").mem.zeroes(integer_t),
    base_priority: integer_t = @import("std").mem.zeroes(integer_t),
    depressed: boolean_t = @import("std").mem.zeroes(boolean_t),
    depress_priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const policy_fifo_base_t = [*c]struct_policy_fifo_base;
pub const policy_fifo_limit_t = [*c]struct_policy_fifo_limit;
pub const policy_fifo_info_t = [*c]struct_policy_fifo_info;
pub const policy_fifo_base_data_t = struct_policy_fifo_base;
pub const policy_fifo_limit_data_t = struct_policy_fifo_limit;
pub const policy_fifo_info_data_t = struct_policy_fifo_info;
pub const struct_policy_bases = extern struct {
    ts: policy_timeshare_base_data_t = @import("std").mem.zeroes(policy_timeshare_base_data_t),
    rr: policy_rr_base_data_t = @import("std").mem.zeroes(policy_rr_base_data_t),
    fifo: policy_fifo_base_data_t = @import("std").mem.zeroes(policy_fifo_base_data_t),
};
pub const struct_policy_limits = extern struct {
    ts: policy_timeshare_limit_data_t = @import("std").mem.zeroes(policy_timeshare_limit_data_t),
    rr: policy_rr_limit_data_t = @import("std").mem.zeroes(policy_rr_limit_data_t),
    fifo: policy_fifo_limit_data_t = @import("std").mem.zeroes(policy_fifo_limit_data_t),
};
pub const struct_policy_infos = extern struct {
    ts: policy_timeshare_info_data_t = @import("std").mem.zeroes(policy_timeshare_info_data_t),
    rr: policy_rr_info_data_t = @import("std").mem.zeroes(policy_rr_info_data_t),
    fifo: policy_fifo_info_data_t = @import("std").mem.zeroes(policy_fifo_info_data_t),
};
pub const policy_base_data_t = struct_policy_bases;
pub const policy_limit_data_t = struct_policy_limits;
pub const policy_info_data_t = struct_policy_infos;
pub const task_flavor_t = natural_t;
pub const task_info_t = [*c]integer_t;
pub const task_info_data_t = [1024]integer_t;
pub const struct_task_basic_info_32 = extern struct {
    suspend_count: integer_t = @import("std").mem.zeroes(integer_t),
    virtual_size: natural_t = @import("std").mem.zeroes(natural_t),
    resident_size: natural_t = @import("std").mem.zeroes(natural_t),
    user_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    system_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    policy: policy_t = @import("std").mem.zeroes(policy_t),
};
pub const task_basic_info_32_data_t = struct_task_basic_info_32;
pub const task_basic_info_32_t = [*c]struct_task_basic_info_32;
pub const struct_task_basic_info_64 = extern struct {
    suspend_count: integer_t = @import("std").mem.zeroes(integer_t),
    virtual_size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    resident_size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    user_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    system_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    policy: policy_t = @import("std").mem.zeroes(policy_t),
};
pub const task_basic_info_64_data_t = struct_task_basic_info_64;
pub const task_basic_info_64_t = [*c]struct_task_basic_info_64;
pub const struct_task_basic_info = extern struct {
    suspend_count: integer_t = @import("std").mem.zeroes(integer_t),
    virtual_size: vm_size_t = @import("std").mem.zeroes(vm_size_t),
    resident_size: vm_size_t = @import("std").mem.zeroes(vm_size_t),
    user_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    system_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    policy: policy_t = @import("std").mem.zeroes(policy_t),
};
pub const task_basic_info_data_t = struct_task_basic_info;
pub const task_basic_info_t = [*c]struct_task_basic_info;
pub const struct_task_events_info = extern struct {
    faults: integer_t = @import("std").mem.zeroes(integer_t),
    pageins: integer_t = @import("std").mem.zeroes(integer_t),
    cow_faults: integer_t = @import("std").mem.zeroes(integer_t),
    messages_sent: integer_t = @import("std").mem.zeroes(integer_t),
    messages_received: integer_t = @import("std").mem.zeroes(integer_t),
    syscalls_mach: integer_t = @import("std").mem.zeroes(integer_t),
    syscalls_unix: integer_t = @import("std").mem.zeroes(integer_t),
    csw: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const task_events_info_data_t = struct_task_events_info;
pub const task_events_info_t = [*c]struct_task_events_info;
pub const struct_task_thread_times_info = extern struct {
    user_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    system_time: time_value_t = @import("std").mem.zeroes(time_value_t),
};
pub const task_thread_times_info_data_t = struct_task_thread_times_info;
pub const task_thread_times_info_t = [*c]struct_task_thread_times_info;
pub const struct_task_absolutetime_info = extern struct {
    total_user: u64 = @import("std").mem.zeroes(u64),
    total_system: u64 = @import("std").mem.zeroes(u64),
    threads_user: u64 = @import("std").mem.zeroes(u64),
    threads_system: u64 = @import("std").mem.zeroes(u64),
};
pub const task_absolutetime_info_data_t = struct_task_absolutetime_info;
pub const task_absolutetime_info_t = [*c]struct_task_absolutetime_info;
pub const struct_task_kernelmemory_info = extern struct {
    total_palloc: u64 = @import("std").mem.zeroes(u64),
    total_pfree: u64 = @import("std").mem.zeroes(u64),
    total_salloc: u64 = @import("std").mem.zeroes(u64),
    total_sfree: u64 = @import("std").mem.zeroes(u64),
};
pub const task_kernelmemory_info_data_t = struct_task_kernelmemory_info;
pub const task_kernelmemory_info_t = [*c]struct_task_kernelmemory_info;
pub const struct_task_affinity_tag_info = extern struct {
    set_count: integer_t = @import("std").mem.zeroes(integer_t),
    min: integer_t = @import("std").mem.zeroes(integer_t),
    max: integer_t = @import("std").mem.zeroes(integer_t),
    task_count: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const task_affinity_tag_info_data_t = struct_task_affinity_tag_info;
pub const task_affinity_tag_info_t = [*c]struct_task_affinity_tag_info;
pub const struct_task_dyld_info = extern struct {
    all_image_info_addr: mach_vm_address_t = @import("std").mem.zeroes(mach_vm_address_t),
    all_image_info_size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    all_image_info_format: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const task_dyld_info_data_t = struct_task_dyld_info;
pub const task_dyld_info_t = [*c]struct_task_dyld_info;
pub const struct_task_basic_info_64_2 = extern struct {
    suspend_count: integer_t = @import("std").mem.zeroes(integer_t),
    virtual_size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    resident_size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    user_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    system_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    policy: policy_t = @import("std").mem.zeroes(policy_t),
};
pub const task_basic_info_64_2_data_t = struct_task_basic_info_64_2;
pub const task_basic_info_64_2_t = [*c]struct_task_basic_info_64_2;
pub const struct_task_extmod_info = extern struct {
    task_uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    extmod_statistics: vm_extmod_statistics_data_t = @import("std").mem.zeroes(vm_extmod_statistics_data_t),
};
pub const task_extmod_info_data_t = struct_task_extmod_info;
pub const task_extmod_info_t = [*c]struct_task_extmod_info;
pub const struct_mach_task_basic_info = extern struct {
    virtual_size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    resident_size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    resident_size_max: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    user_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    system_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    policy: policy_t = @import("std").mem.zeroes(policy_t),
    suspend_count: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const mach_task_basic_info_data_t = struct_mach_task_basic_info;
pub const mach_task_basic_info_t = [*c]struct_mach_task_basic_info;
pub const struct_task_power_info = extern struct {
    total_user: u64 = @import("std").mem.zeroes(u64),
    total_system: u64 = @import("std").mem.zeroes(u64),
    task_interrupt_wakeups: u64 = @import("std").mem.zeroes(u64),
    task_platform_idle_wakeups: u64 = @import("std").mem.zeroes(u64),
    task_timer_wakeups_bin_1: u64 = @import("std").mem.zeroes(u64),
    task_timer_wakeups_bin_2: u64 = @import("std").mem.zeroes(u64),
};
pub const task_power_info_data_t = struct_task_power_info;
pub const task_power_info_t = [*c]struct_task_power_info;
pub const struct_task_vm_info = extern struct {
    virtual_size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    region_count: integer_t = @import("std").mem.zeroes(integer_t),
    page_size: integer_t = @import("std").mem.zeroes(integer_t),
    resident_size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    resident_size_peak: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    device: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    device_peak: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    internal: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    internal_peak: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    external: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    external_peak: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    reusable: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    reusable_peak: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    purgeable_volatile_pmap: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    purgeable_volatile_resident: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    purgeable_volatile_virtual: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    compressed: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    compressed_peak: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    compressed_lifetime: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    phys_footprint: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
    min_address: mach_vm_address_t = @import("std").mem.zeroes(mach_vm_address_t),
    max_address: mach_vm_address_t = @import("std").mem.zeroes(mach_vm_address_t),
    ledger_phys_footprint_peak: i64 = @import("std").mem.zeroes(i64),
    ledger_purgeable_nonvolatile: i64 = @import("std").mem.zeroes(i64),
    ledger_purgeable_novolatile_compressed: i64 = @import("std").mem.zeroes(i64),
    ledger_purgeable_volatile: i64 = @import("std").mem.zeroes(i64),
    ledger_purgeable_volatile_compressed: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_network_nonvolatile: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_network_nonvolatile_compressed: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_network_volatile: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_network_volatile_compressed: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_media_footprint: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_media_footprint_compressed: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_media_nofootprint: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_media_nofootprint_compressed: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_graphics_footprint: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_graphics_footprint_compressed: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_graphics_nofootprint: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_graphics_nofootprint_compressed: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_neural_footprint: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_neural_footprint_compressed: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_neural_nofootprint: i64 = @import("std").mem.zeroes(i64),
    ledger_tag_neural_nofootprint_compressed: i64 = @import("std").mem.zeroes(i64),
    limit_bytes_remaining: u64 = @import("std").mem.zeroes(u64),
    decompressions: integer_t = @import("std").mem.zeroes(integer_t),
    ledger_swapins: i64 = @import("std").mem.zeroes(i64),
};
pub const task_vm_info_data_t = struct_task_vm_info;
pub const task_vm_info_t = [*c]struct_task_vm_info;
pub const task_purgable_info_t = struct_vm_purgeable_info;
pub const struct_task_trace_memory_info = extern struct {
    user_memory_address: u64 = @import("std").mem.zeroes(u64),
    buffer_size: u64 = @import("std").mem.zeroes(u64),
    mailbox_array_size: u64 = @import("std").mem.zeroes(u64),
};
pub const task_trace_memory_info_data_t = struct_task_trace_memory_info;
pub const task_trace_memory_info_t = [*c]struct_task_trace_memory_info;
pub const struct_task_wait_state_info = extern struct {
    total_wait_state_time: u64 = @import("std").mem.zeroes(u64),
    total_wait_sfi_state_time: u64 = @import("std").mem.zeroes(u64),
    _reserved: [4]u32 = @import("std").mem.zeroes([4]u32),
};
pub const task_wait_state_info_data_t = struct_task_wait_state_info;
pub const task_wait_state_info_t = [*c]struct_task_wait_state_info;
pub const gpu_energy_data = extern struct {
    task_gpu_utilisation: u64 = @import("std").mem.zeroes(u64),
    task_gpu_stat_reserved0: u64 = @import("std").mem.zeroes(u64),
    task_gpu_stat_reserved1: u64 = @import("std").mem.zeroes(u64),
    task_gpu_stat_reserved2: u64 = @import("std").mem.zeroes(u64),
};
pub const gpu_energy_data_t = [*c]gpu_energy_data;
pub const struct_task_power_info_v2 = extern struct {
    cpu_energy: task_power_info_data_t = @import("std").mem.zeroes(task_power_info_data_t),
    gpu_energy: gpu_energy_data = @import("std").mem.zeroes(gpu_energy_data),
    task_energy: u64 = @import("std").mem.zeroes(u64),
    task_ptime: u64 = @import("std").mem.zeroes(u64),
    task_pset_switches: u64 = @import("std").mem.zeroes(u64),
};
pub const task_power_info_v2_data_t = struct_task_power_info_v2;
pub const task_power_info_v2_t = [*c]struct_task_power_info_v2;
pub const struct_task_flags_info = extern struct {
    flags: u32 = @import("std").mem.zeroes(u32),
};
pub const task_flags_info_data_t = struct_task_flags_info;
pub const task_flags_info_t = [*c]struct_task_flags_info;
pub const task_exc_guard_behavior_t = u32;
pub const task_corpse_forking_behavior_t = u32;
pub const task_inspect_flavor_t = natural_t;
pub const TASK_INSPECT_BASIC_COUNTS: c_int = 1;
pub const enum_task_inspect_flavor = c_uint;
pub const struct_task_inspect_basic_counts = extern struct {
    instructions: u64 = @import("std").mem.zeroes(u64),
    cycles: u64 = @import("std").mem.zeroes(u64),
};
pub const task_inspect_basic_counts_data_t = struct_task_inspect_basic_counts;
pub const task_inspect_basic_counts_t = [*c]struct_task_inspect_basic_counts;
pub const task_inspect_info_t = [*c]integer_t;
pub const task_policy_flavor_t = natural_t;
pub const task_policy_t = [*c]integer_t;
pub const TASK_RENICED: c_int = -1;
pub const TASK_UNSPECIFIED: c_int = 0;
pub const TASK_FOREGROUND_APPLICATION: c_int = 1;
pub const TASK_BACKGROUND_APPLICATION: c_int = 2;
pub const TASK_CONTROL_APPLICATION: c_int = 3;
pub const TASK_GRAPHICS_SERVER: c_int = 4;
pub const TASK_THROTTLE_APPLICATION: c_int = 5;
pub const TASK_NONUI_APPLICATION: c_int = 6;
pub const TASK_DEFAULT_APPLICATION: c_int = 7;
pub const TASK_DARWINBG_APPLICATION: c_int = 8;
pub const enum_task_role = c_int;
pub const task_role_t = enum_task_role;
pub const struct_task_category_policy = extern struct {
    role: task_role_t = @import("std").mem.zeroes(task_role_t),
};
pub const task_category_policy_data_t = struct_task_category_policy;
pub const task_category_policy_t = [*c]struct_task_category_policy;
pub const LATENCY_QOS_TIER_UNSPECIFIED: c_int = 0;
pub const LATENCY_QOS_TIER_0: c_int = 16711681;
pub const LATENCY_QOS_TIER_1: c_int = 16711682;
pub const LATENCY_QOS_TIER_2: c_int = 16711683;
pub const LATENCY_QOS_TIER_3: c_int = 16711684;
pub const LATENCY_QOS_TIER_4: c_int = 16711685;
pub const LATENCY_QOS_TIER_5: c_int = 16711686;
pub const enum_task_latency_qos = c_uint;
pub const task_latency_qos_t = integer_t;
pub const THROUGHPUT_QOS_TIER_UNSPECIFIED: c_int = 0;
pub const THROUGHPUT_QOS_TIER_0: c_int = 16646145;
pub const THROUGHPUT_QOS_TIER_1: c_int = 16646146;
pub const THROUGHPUT_QOS_TIER_2: c_int = 16646147;
pub const THROUGHPUT_QOS_TIER_3: c_int = 16646148;
pub const THROUGHPUT_QOS_TIER_4: c_int = 16646149;
pub const THROUGHPUT_QOS_TIER_5: c_int = 16646150;
pub const enum_task_throughput_qos = c_uint;
pub const task_throughput_qos_t = integer_t;
pub const struct_task_qos_policy = extern struct {
    task_latency_qos_tier: task_latency_qos_t = @import("std").mem.zeroes(task_latency_qos_t),
    task_throughput_qos_tier: task_throughput_qos_t = @import("std").mem.zeroes(task_throughput_qos_t),
};
pub const task_qos_policy_t = [*c]struct_task_qos_policy;
pub const task_special_port_t = c_int;
pub const thread_flavor_t = natural_t;
pub const thread_info_t = [*c]integer_t;
pub const thread_info_data_t = [32]integer_t;
pub const struct_thread_basic_info = extern struct {
    user_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    system_time: time_value_t = @import("std").mem.zeroes(time_value_t),
    cpu_usage: integer_t = @import("std").mem.zeroes(integer_t),
    policy: policy_t = @import("std").mem.zeroes(policy_t),
    run_state: integer_t = @import("std").mem.zeroes(integer_t),
    flags: integer_t = @import("std").mem.zeroes(integer_t),
    suspend_count: integer_t = @import("std").mem.zeroes(integer_t),
    sleep_time: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const thread_basic_info_data_t = struct_thread_basic_info;
pub const thread_basic_info_t = [*c]struct_thread_basic_info;
pub const struct_thread_identifier_info = extern struct {
    thread_id: u64 = @import("std").mem.zeroes(u64),
    thread_handle: u64 = @import("std").mem.zeroes(u64),
    dispatch_qaddr: u64 = @import("std").mem.zeroes(u64),
};
pub const thread_identifier_info_data_t = struct_thread_identifier_info;
pub const thread_identifier_info_t = [*c]struct_thread_identifier_info;
pub const struct_thread_extended_info = extern struct {
    pth_user_time: u64 = @import("std").mem.zeroes(u64),
    pth_system_time: u64 = @import("std").mem.zeroes(u64),
    pth_cpu_usage: i32 = @import("std").mem.zeroes(i32),
    pth_policy: i32 = @import("std").mem.zeroes(i32),
    pth_run_state: i32 = @import("std").mem.zeroes(i32),
    pth_flags: i32 = @import("std").mem.zeroes(i32),
    pth_sleep_time: i32 = @import("std").mem.zeroes(i32),
    pth_curpri: i32 = @import("std").mem.zeroes(i32),
    pth_priority: i32 = @import("std").mem.zeroes(i32),
    pth_maxpriority: i32 = @import("std").mem.zeroes(i32),
    pth_name: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const thread_extended_info_data_t = struct_thread_extended_info;
pub const thread_extended_info_t = [*c]struct_thread_extended_info;
pub const struct_io_stat_entry = extern struct {
    count: u64 = @import("std").mem.zeroes(u64),
    size: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_io_stat_info = extern struct {
    disk_reads: struct_io_stat_entry = @import("std").mem.zeroes(struct_io_stat_entry),
    io_priority: [4]struct_io_stat_entry = @import("std").mem.zeroes([4]struct_io_stat_entry),
    paging: struct_io_stat_entry = @import("std").mem.zeroes(struct_io_stat_entry),
    metadata: struct_io_stat_entry = @import("std").mem.zeroes(struct_io_stat_entry),
    total_io: struct_io_stat_entry = @import("std").mem.zeroes(struct_io_stat_entry),
};
pub const io_stat_info_t = [*c]struct_io_stat_info;
pub const thread_policy_flavor_t = natural_t;
pub const thread_policy_t = [*c]integer_t;
pub const struct_thread_standard_policy = extern struct {
    no_data: natural_t = @import("std").mem.zeroes(natural_t),
};
pub const thread_standard_policy_data_t = struct_thread_standard_policy;
pub const thread_standard_policy_t = [*c]struct_thread_standard_policy;
pub const struct_thread_extended_policy = extern struct {
    timeshare: boolean_t = @import("std").mem.zeroes(boolean_t),
};
pub const thread_extended_policy_data_t = struct_thread_extended_policy;
pub const thread_extended_policy_t = [*c]struct_thread_extended_policy;
pub const struct_thread_time_constraint_policy = extern struct {
    period: u32 = @import("std").mem.zeroes(u32),
    computation: u32 = @import("std").mem.zeroes(u32),
    constraint: u32 = @import("std").mem.zeroes(u32),
    preemptible: boolean_t = @import("std").mem.zeroes(boolean_t),
};
pub const thread_time_constraint_policy_data_t = struct_thread_time_constraint_policy;
pub const thread_time_constraint_policy_t = [*c]struct_thread_time_constraint_policy;
pub const struct_thread_precedence_policy = extern struct {
    importance: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const thread_precedence_policy_data_t = struct_thread_precedence_policy;
pub const thread_precedence_policy_t = [*c]struct_thread_precedence_policy;
pub const struct_thread_affinity_policy = extern struct {
    affinity_tag: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const thread_affinity_policy_data_t = struct_thread_affinity_policy;
pub const thread_affinity_policy_t = [*c]struct_thread_affinity_policy;
pub const struct_thread_background_policy = extern struct {
    priority: integer_t = @import("std").mem.zeroes(integer_t),
};
pub const thread_background_policy_data_t = struct_thread_background_policy;
pub const thread_background_policy_t = [*c]struct_thread_background_policy;
pub const thread_latency_qos_t = integer_t;
pub const struct_thread_latency_qos_policy = extern struct {
    thread_latency_qos_tier: thread_latency_qos_t = @import("std").mem.zeroes(thread_latency_qos_t),
};
pub const thread_latency_qos_policy_data_t = struct_thread_latency_qos_policy;
pub const thread_latency_qos_policy_t = [*c]struct_thread_latency_qos_policy;
pub const thread_throughput_qos_t = integer_t;
pub const struct_thread_throughput_qos_policy = extern struct {
    thread_throughput_qos_tier: thread_throughput_qos_t = @import("std").mem.zeroes(thread_throughput_qos_t),
};
pub const thread_throughput_qos_policy_data_t = struct_thread_throughput_qos_policy;
pub const thread_throughput_qos_policy_t = [*c]struct_thread_throughput_qos_policy;
pub const vm_machine_attribute_t = c_uint;
pub const vm_machine_attribute_val_t = c_int;
pub const vm_inherit_t = c_uint;
pub const vm_purgable_t = c_int;
pub const vm_behavior_t = c_int;
pub extern var vm_page_size: vm_size_t;
pub extern var vm_page_mask: vm_size_t;
pub extern var vm_page_shift: c_int;
pub extern var vm_kernel_page_size: vm_size_t;
pub extern var vm_kernel_page_mask: vm_size_t;
pub extern var vm_kernel_page_shift: c_int;
pub const vm32_object_id_t = u32;
pub const vm_region_info_t = [*c]c_int;
pub const vm_region_info_64_t = [*c]c_int;
pub const vm_region_recurse_info_t = [*c]c_int;
pub const vm_region_recurse_info_64_t = [*c]c_int;
pub const vm_region_flavor_t = c_int;
pub const vm_region_info_data_t = [1024]c_int;
pub const struct_vm_region_basic_info_64 = extern struct {
    protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    max_protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    inheritance: vm_inherit_t = @import("std").mem.zeroes(vm_inherit_t),
    shared: boolean_t = @import("std").mem.zeroes(boolean_t),
    reserved: boolean_t = @import("std").mem.zeroes(boolean_t),
    offset: memory_object_offset_t = @import("std").mem.zeroes(memory_object_offset_t),
    behavior: vm_behavior_t = @import("std").mem.zeroes(vm_behavior_t),
    user_wired_count: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const vm_region_basic_info_64_t = [*c]struct_vm_region_basic_info_64;
pub const vm_region_basic_info_data_64_t = struct_vm_region_basic_info_64;
pub const struct_vm_region_basic_info = extern struct {
    protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    max_protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    inheritance: vm_inherit_t = @import("std").mem.zeroes(vm_inherit_t),
    shared: boolean_t = @import("std").mem.zeroes(boolean_t),
    reserved: boolean_t = @import("std").mem.zeroes(boolean_t),
    offset: u32 = @import("std").mem.zeroes(u32),
    behavior: vm_behavior_t = @import("std").mem.zeroes(vm_behavior_t),
    user_wired_count: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const vm_region_basic_info_t = [*c]struct_vm_region_basic_info;
pub const vm_region_basic_info_data_t = struct_vm_region_basic_info;
pub const struct_vm_region_extended_info = extern struct {
    protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    user_tag: c_uint = @import("std").mem.zeroes(c_uint),
    pages_resident: c_uint = @import("std").mem.zeroes(c_uint),
    pages_shared_now_private: c_uint = @import("std").mem.zeroes(c_uint),
    pages_swapped_out: c_uint = @import("std").mem.zeroes(c_uint),
    pages_dirtied: c_uint = @import("std").mem.zeroes(c_uint),
    ref_count: c_uint = @import("std").mem.zeroes(c_uint),
    shadow_depth: c_ushort = @import("std").mem.zeroes(c_ushort),
    external_pager: u8 = @import("std").mem.zeroes(u8),
    share_mode: u8 = @import("std").mem.zeroes(u8),
    pages_reusable: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const vm_region_extended_info_t = [*c]struct_vm_region_extended_info;
pub const vm_region_extended_info_data_t = struct_vm_region_extended_info;
pub const struct_vm_region_top_info = extern struct {
    obj_id: c_uint = @import("std").mem.zeroes(c_uint),
    ref_count: c_uint = @import("std").mem.zeroes(c_uint),
    private_pages_resident: c_uint = @import("std").mem.zeroes(c_uint),
    shared_pages_resident: c_uint = @import("std").mem.zeroes(c_uint),
    share_mode: u8 = @import("std").mem.zeroes(u8),
};
pub const vm_region_top_info_t = [*c]struct_vm_region_top_info;
pub const vm_region_top_info_data_t = struct_vm_region_top_info;
pub const struct_vm_region_submap_info = extern struct {
    protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    max_protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    inheritance: vm_inherit_t = @import("std").mem.zeroes(vm_inherit_t),
    offset: u32 = @import("std").mem.zeroes(u32),
    user_tag: c_uint = @import("std").mem.zeroes(c_uint),
    pages_resident: c_uint = @import("std").mem.zeroes(c_uint),
    pages_shared_now_private: c_uint = @import("std").mem.zeroes(c_uint),
    pages_swapped_out: c_uint = @import("std").mem.zeroes(c_uint),
    pages_dirtied: c_uint = @import("std").mem.zeroes(c_uint),
    ref_count: c_uint = @import("std").mem.zeroes(c_uint),
    shadow_depth: c_ushort = @import("std").mem.zeroes(c_ushort),
    external_pager: u8 = @import("std").mem.zeroes(u8),
    share_mode: u8 = @import("std").mem.zeroes(u8),
    is_submap: boolean_t = @import("std").mem.zeroes(boolean_t),
    behavior: vm_behavior_t = @import("std").mem.zeroes(vm_behavior_t),
    object_id: vm32_object_id_t = @import("std").mem.zeroes(vm32_object_id_t),
    user_wired_count: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const vm_region_submap_info_t = [*c]struct_vm_region_submap_info;
pub const vm_region_submap_info_data_t = struct_vm_region_submap_info;
pub const struct_vm_region_submap_info_64 = extern struct {
    protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    max_protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    inheritance: vm_inherit_t = @import("std").mem.zeroes(vm_inherit_t),
    offset: memory_object_offset_t = @import("std").mem.zeroes(memory_object_offset_t),
    user_tag: c_uint = @import("std").mem.zeroes(c_uint),
    pages_resident: c_uint = @import("std").mem.zeroes(c_uint),
    pages_shared_now_private: c_uint = @import("std").mem.zeroes(c_uint),
    pages_swapped_out: c_uint = @import("std").mem.zeroes(c_uint),
    pages_dirtied: c_uint = @import("std").mem.zeroes(c_uint),
    ref_count: c_uint = @import("std").mem.zeroes(c_uint),
    shadow_depth: c_ushort = @import("std").mem.zeroes(c_ushort),
    external_pager: u8 = @import("std").mem.zeroes(u8),
    share_mode: u8 = @import("std").mem.zeroes(u8),
    is_submap: boolean_t = @import("std").mem.zeroes(boolean_t),
    behavior: vm_behavior_t = @import("std").mem.zeroes(vm_behavior_t),
    object_id: vm32_object_id_t = @import("std").mem.zeroes(vm32_object_id_t),
    user_wired_count: c_ushort = @import("std").mem.zeroes(c_ushort),
    pages_reusable: c_uint = @import("std").mem.zeroes(c_uint),
    object_id_full: vm_object_id_t = @import("std").mem.zeroes(vm_object_id_t),
};
pub const vm_region_submap_info_64_t = [*c]struct_vm_region_submap_info_64;
pub const vm_region_submap_info_data_64_t = struct_vm_region_submap_info_64;
pub const struct_vm_region_submap_short_info_64 = extern struct {
    protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    max_protection: vm_prot_t = @import("std").mem.zeroes(vm_prot_t),
    inheritance: vm_inherit_t = @import("std").mem.zeroes(vm_inherit_t),
    offset: memory_object_offset_t = @import("std").mem.zeroes(memory_object_offset_t),
    user_tag: c_uint = @import("std").mem.zeroes(c_uint),
    ref_count: c_uint = @import("std").mem.zeroes(c_uint),
    shadow_depth: c_ushort = @import("std").mem.zeroes(c_ushort),
    external_pager: u8 = @import("std").mem.zeroes(u8),
    share_mode: u8 = @import("std").mem.zeroes(u8),
    is_submap: boolean_t = @import("std").mem.zeroes(boolean_t),
    behavior: vm_behavior_t = @import("std").mem.zeroes(vm_behavior_t),
    object_id: vm32_object_id_t = @import("std").mem.zeroes(vm32_object_id_t),
    user_wired_count: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const vm_region_submap_short_info_64_t = [*c]struct_vm_region_submap_short_info_64;
pub const vm_region_submap_short_info_data_64_t = struct_vm_region_submap_short_info_64;
pub const struct_mach_vm_read_entry = extern struct {
    address: mach_vm_address_t = @import("std").mem.zeroes(mach_vm_address_t),
    size: mach_vm_size_t = @import("std").mem.zeroes(mach_vm_size_t),
};
pub const struct_vm_read_entry = extern struct {
    address: vm_address_t = @import("std").mem.zeroes(vm_address_t),
    size: vm_size_t = @import("std").mem.zeroes(vm_size_t),
};
pub const mach_vm_read_entry_t = [256]struct_mach_vm_read_entry;
pub const vm_read_entry_t = [256]struct_vm_read_entry;
pub const vm_page_info_t = [*c]c_int;
pub const vm_page_info_data_t = [*c]c_int;
pub const vm_page_info_flavor_t = c_int;
pub const struct_vm_page_info_basic = extern struct {
    disposition: c_int = @import("std").mem.zeroes(c_int),
    ref_count: c_int = @import("std").mem.zeroes(c_int),
    object_id: vm_object_id_t = @import("std").mem.zeroes(vm_object_id_t),
    offset: memory_object_offset_t = @import("std").mem.zeroes(memory_object_offset_t),
    depth: c_int = @import("std").mem.zeroes(c_int),
    __pad: c_int = @import("std").mem.zeroes(c_int),
};
pub const vm_page_info_basic_t = [*c]struct_vm_page_info_basic;
pub const vm_page_info_basic_data_t = struct_vm_page_info_basic;
pub const kmod_t = c_int;
pub const struct_kmod_reference = extern struct {
    next: [*c]struct_kmod_reference = @import("std").mem.zeroes([*c]struct_kmod_reference),
    info: [*c]struct_kmod_info = @import("std").mem.zeroes([*c]struct_kmod_info),
};
pub const kmod_reference_t = struct_kmod_reference;
pub const kmod_start_func_t = fn ([*c]struct_kmod_info, ?*anyopaque) callconv(.C) kern_return_t;
pub const kmod_stop_func_t = fn ([*c]struct_kmod_info, ?*anyopaque) callconv(.C) kern_return_t;
pub const struct_kmod_info = extern struct {
    next: [*c]struct_kmod_info = @import("std").mem.zeroes([*c]struct_kmod_info),
    info_version: i32 = @import("std").mem.zeroes(i32),
    id: u32 = @import("std").mem.zeroes(u32),
    name: [64]u8 = @import("std").mem.zeroes([64]u8),
    version: [64]u8 = @import("std").mem.zeroes([64]u8),
    reference_count: i32 = @import("std").mem.zeroes(i32),
    reference_list: [*c]kmod_reference_t = @import("std").mem.zeroes([*c]kmod_reference_t),
    address: vm_address_t = @import("std").mem.zeroes(vm_address_t),
    size: vm_size_t = @import("std").mem.zeroes(vm_size_t),
    hdr_size: vm_size_t = @import("std").mem.zeroes(vm_size_t),
    start: ?*const kmod_start_func_t = @import("std").mem.zeroes(?*const kmod_start_func_t),
    stop: ?*const kmod_stop_func_t = @import("std").mem.zeroes(?*const kmod_stop_func_t),
};
pub const kmod_info_t = struct_kmod_info;
pub const struct_kmod_info_32_v1 = extern struct {
    next_addr: u32 = @import("std").mem.zeroes(u32),
    info_version: i32 = @import("std").mem.zeroes(i32),
    id: u32 = @import("std").mem.zeroes(u32),
    name: [64]u8 = @import("std").mem.zeroes([64]u8),
    version: [64]u8 = @import("std").mem.zeroes([64]u8),
    reference_count: i32 = @import("std").mem.zeroes(i32),
    reference_list_addr: u32 = @import("std").mem.zeroes(u32),
    address: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    hdr_size: u32 = @import("std").mem.zeroes(u32),
    start_addr: u32 = @import("std").mem.zeroes(u32),
    stop_addr: u32 = @import("std").mem.zeroes(u32),
};
pub const kmod_info_32_v1_t = struct_kmod_info_32_v1;
pub const struct_kmod_info_64_v1 = extern struct {
    next_addr: u64 = @import("std").mem.zeroes(u64),
    info_version: i32 = @import("std").mem.zeroes(i32),
    id: u32 = @import("std").mem.zeroes(u32),
    name: [64]u8 = @import("std").mem.zeroes([64]u8),
    version: [64]u8 = @import("std").mem.zeroes([64]u8),
    reference_count: i32 = @import("std").mem.zeroes(i32),
    reference_list_addr: u64 = @import("std").mem.zeroes(u64),
    address: u64 = @import("std").mem.zeroes(u64),
    size: u64 = @import("std").mem.zeroes(u64),
    hdr_size: u64 = @import("std").mem.zeroes(u64),
    start_addr: u64 = @import("std").mem.zeroes(u64),
    stop_addr: u64 = @import("std").mem.zeroes(u64),
};
pub const kmod_info_64_v1_t = struct_kmod_info_64_v1;
pub const kmod_args_t = ?*anyopaque;
pub const kmod_control_flavor_t = c_int;
pub const kmod_info_array_t = [*c]kmod_info_t;
pub const struct_fsid = extern struct {
    val: [2]i32 = @import("std").mem.zeroes([2]i32),
};
pub const fsid_t = struct_fsid;
pub const struct_fsobj_id = extern struct {
    fid_objno: u_int32_t = @import("std").mem.zeroes(u_int32_t),
    fid_generation: u_int32_t = @import("std").mem.zeroes(u_int32_t),
};
pub const fsobj_id_t = struct_fsobj_id;
pub const struct_dyld_kernel_image_info = extern struct {
    uuid: uuid_t = @import("std").mem.zeroes(uuid_t),
    fsobjid: fsobj_id_t = @import("std").mem.zeroes(fsobj_id_t),
    fsid: fsid_t = @import("std").mem.zeroes(fsid_t),
    load_addr: u64 = @import("std").mem.zeroes(u64),
};
pub const struct_dyld_kernel_process_info = extern struct {
    cache_image_info: struct_dyld_kernel_image_info = @import("std").mem.zeroes(struct_dyld_kernel_image_info),
    timestamp: u64 = @import("std").mem.zeroes(u64),
    imageCount: u32 = @import("std").mem.zeroes(u32),
    initialImageCount: u32 = @import("std").mem.zeroes(u32),
    dyldState: u8 = @import("std").mem.zeroes(u8),
    no_cache: boolean_t = @import("std").mem.zeroes(boolean_t),
    private_cache: boolean_t = @import("std").mem.zeroes(boolean_t),
};
pub const dyld_kernel_image_info_t = struct_dyld_kernel_image_info;
pub const dyld_kernel_process_info_t = struct_dyld_kernel_process_info;
pub const dyld_kernel_image_info_array_t = [*c]dyld_kernel_image_info_t;
pub const task_t = mach_port_t;
pub const task_name_t = mach_port_t;
pub const task_policy_set_t = mach_port_t;
pub const task_policy_get_t = mach_port_t;
pub const task_inspect_t = mach_port_t;
pub const task_read_t = mach_port_t;
pub const task_suspension_token_t = mach_port_t;
pub const thread_t = mach_port_t;
pub const thread_act_t = mach_port_t;
pub const thread_inspect_t = mach_port_t;
pub const thread_read_t = mach_port_t;
pub const ipc_space_t = mach_port_t;
pub const ipc_space_read_t = mach_port_t;
pub const ipc_space_inspect_t = mach_port_t;
pub const coalition_t = mach_port_t;
pub const host_t = mach_port_t;
pub const host_priv_t = mach_port_t;
pub const host_security_t = mach_port_t;
pub const processor_t = mach_port_t;
pub const processor_set_t = mach_port_t;
pub const processor_set_control_t = mach_port_t;
pub const semaphore_t = mach_port_t;
pub const lock_set_t = mach_port_t;
pub const ledger_t = mach_port_t;
pub const alarm_t = mach_port_t;
pub const clock_serv_t = mach_port_t;
pub const clock_ctrl_t = mach_port_t;
pub const arcade_register_t = mach_port_t;
pub const ipc_eventlink_t = mach_port_t;
pub const eventlink_port_pair_t = [2]mach_port_t;
pub const task_id_token_t = mach_port_t;
pub const kcdata_object_t = mach_port_t;
pub const processor_set_name_t = processor_set_t;
pub const clock_reply_t = mach_port_t;
pub const bootstrap_t = mach_port_t;
pub const mem_entry_name_port_t = mach_port_t;
pub const exception_handler_t = mach_port_t;
pub const exception_handler_array_t = [*c]exception_handler_t;
pub const vm_task_entry_t = mach_port_t;
pub const io_main_t = mach_port_t;
pub const UNDServerRef = mach_port_t;
pub const mach_eventlink_t = mach_port_t;
pub const exception_handler_info_t = ipc_info_port_t;
pub const task_array_t = [*c]task_t;
pub const thread_array_t = [*c]thread_t;
pub const processor_set_array_t = [*c]processor_set_t;
pub const processor_set_name_array_t = [*c]processor_set_t;
pub const processor_array_t = [*c]processor_t;
pub const thread_act_array_t = [*c]thread_act_t;
pub const ledger_array_t = [*c]ledger_t;
pub const task_port_t = task_t;
pub const task_port_array_t = task_array_t;
pub const thread_port_t = thread_t;
pub const thread_port_array_t = thread_array_t;
pub const ipc_space_port_t = ipc_space_t;
pub const host_name_t = host_t;
pub const host_name_port_t = host_t;
pub const processor_set_port_t = processor_set_t;
pub const processor_set_name_port_t = processor_set_t;
pub const processor_set_name_port_array_t = processor_set_array_t;
pub const processor_set_control_port_t = processor_set_t;
pub const processor_port_t = processor_t;
pub const processor_port_array_t = processor_array_t;
pub const thread_act_port_t = thread_act_t;
pub const thread_act_port_array_t = thread_act_array_t;
pub const semaphore_port_t = semaphore_t;
pub const lock_set_port_t = lock_set_t;
pub const ledger_port_t = ledger_t;
pub const ledger_port_array_t = ledger_array_t;
pub const alarm_port_t = alarm_t;
pub const clock_serv_port_t = clock_serv_t;
pub const clock_ctrl_port_t = clock_ctrl_t;
pub const exception_port_t = exception_handler_t;
pub const exception_port_arrary_t = exception_handler_array_t;
pub const vfs_path_t = [4096]u8;
pub const nspace_path_t = [8192]u8;
pub const nspace_name_t = [8192]u8;
pub const mach_task_flavor_t = c_uint;
pub const mach_thread_flavor_t = c_uint;
pub const ledger_item_t = natural_t;
pub const ledger_amount_t = i64;
pub const emulation_vector_t = [*c]mach_vm_offset_t;
pub const user_subsystem_t = [*c]u8;
pub const labelstr_t = [*c]u8;
pub extern fn mach_host_self() mach_port_t;
pub extern fn mach_thread_self() mach_port_t;
pub extern fn mach_task_is_self(task: task_name_t) boolean_t;
pub extern fn host_page_size(host_t, [*c]vm_size_t) kern_return_t;
pub extern var mach_task_self_: mach_port_t;
pub extern fn clock_sleep_trap(clock_name: mach_port_name_t, sleep_type: sleep_type_t, sleep_sec: c_int, sleep_nsec: c_int, wakeup_time: [*c]mach_timespec_t) kern_return_t;
pub extern fn _kernelrpc_mach_vm_allocate_trap(target: mach_port_name_t, addr: [*c]mach_vm_offset_t, size: mach_vm_size_t, flags: c_int) kern_return_t;
pub extern fn _kernelrpc_mach_vm_deallocate_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t) kern_return_t;
pub extern fn task_dyld_process_info_notify_get(names_addr: mach_port_name_array_t, names_count_addr: [*c]natural_t) kern_return_t;
pub extern fn _kernelrpc_mach_vm_protect_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) kern_return_t;
pub extern fn _kernelrpc_mach_vm_map_trap(target: mach_port_name_t, address: [*c]mach_vm_offset_t, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: c_int, cur_protection: vm_prot_t) kern_return_t;
pub extern fn _kernelrpc_mach_vm_purgable_control_trap(target: mach_port_name_t, address: mach_vm_offset_t, control: vm_purgable_t, state: [*c]c_int) kern_return_t;
pub extern fn _kernelrpc_mach_port_allocate_trap(target: mach_port_name_t, right: mach_port_right_t, name: [*c]mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_deallocate_trap(target: mach_port_name_t, name: mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_mod_refs_trap(target: mach_port_name_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_move_member_trap(target: mach_port_name_t, member: mach_port_name_t, after: mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_insert_right_trap(target: mach_port_name_t, name: mach_port_name_t, poly: mach_port_name_t, polyPoly: mach_msg_type_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_get_attributes_trap(target: mach_port_name_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info_out: mach_port_info_t, port_info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_insert_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_extract_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_construct_trap(target: mach_port_name_t, options: [*c]mach_port_options_t, context: u64, name: [*c]mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_destruct_trap(target: mach_port_name_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: u64) kern_return_t;
pub extern fn _kernelrpc_mach_port_guard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: u64, strict: boolean_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_unguard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: u64) kern_return_t;
pub extern fn mach_generate_activity_id(target: mach_port_name_t, count: c_int, activity_id: [*c]u64) kern_return_t;
pub extern fn macx_swapon(filename: u64, flags: c_int, size: c_int, priority: c_int) kern_return_t;
pub extern fn macx_swapoff(filename: u64, flags: c_int) kern_return_t;
pub extern fn macx_triggers(hi_water: c_int, low_water: c_int, flags: c_int, alert_port: mach_port_t) kern_return_t;
pub extern fn macx_backing_store_suspend(@"suspend": boolean_t) kern_return_t;
pub extern fn macx_backing_store_recovery(pid: c_int) kern_return_t;
pub extern fn swtch_pri(pri: c_int) boolean_t;
pub extern fn swtch() boolean_t;
pub extern fn thread_switch(thread_name: mach_port_name_t, option: c_int, option_time: mach_msg_timeout_t) kern_return_t;
pub extern fn task_self_trap() mach_port_name_t;
pub extern fn host_create_mach_voucher_trap(host: mach_port_name_t, recipes: mach_voucher_attr_raw_recipe_array_t, recipes_size: c_int, voucher: [*c]mach_port_name_t) kern_return_t;
pub extern fn mach_voucher_extract_attr_recipe_trap(voucher_name: mach_port_name_t, key: mach_voucher_attr_key_t, recipe: mach_voucher_attr_raw_recipe_t, recipe_size: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_type_trap(task: ipc_space_t, name: mach_port_name_t, ptype: [*c]mach_port_type_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_request_notification_trap(task: ipc_space_t, name: mach_port_name_t, msgid: mach_msg_id_t, sync: mach_port_mscount_t, notify: mach_port_name_t, notifyPoly: mach_msg_type_name_t, previous: [*c]mach_port_name_t) kern_return_t;
pub extern fn task_for_pid(target_tport: mach_port_name_t, pid: c_int, t: [*c]mach_port_name_t) kern_return_t;
pub extern fn task_name_for_pid(target_tport: mach_port_name_t, pid: c_int, tn: [*c]mach_port_name_t) kern_return_t;
pub extern fn pid_for_task(t: mach_port_name_t, x: [*c]c_int) kern_return_t;
pub extern fn debug_control_port_for_pid(target_tport: mach_port_name_t, pid: c_int, t: [*c]mach_port_name_t) kern_return_t;
pub extern var bootstrap_port: mach_port_t;
pub extern var vprintf_stderr_func: ?*const fn ([*c]const u8, va_list) callconv(.C) c_int;
pub const mach_error_t = kern_return_t;
pub const mach_error_fn_t = ?*const fn () callconv(.C) mach_error_t;
pub const IOReturn = kern_return_t;
pub const UInt = c_uint;
pub const SInt = c_int;
pub const IOOptionBits = UInt32;
pub const IOFixed = SInt32;
pub const IOVersion = UInt32;
pub const IOItemCount = UInt32;
pub const IOCacheMode = UInt32;
pub const IOByteCount32 = UInt32;
pub const IOByteCount64 = UInt64;
pub const IOPhysicalAddress32 = UInt32;
pub const IOPhysicalAddress64 = UInt64;
pub const IOPhysicalLength32 = UInt32;
pub const IOPhysicalLength64 = UInt64;
pub const IOVirtualAddress = mach_vm_address_t;
pub const IOByteCount = IOByteCount64;
pub const IOLogicalAddress = IOVirtualAddress;
pub const IOPhysicalAddress = IOPhysicalAddress64;
pub const IOPhysicalLength = IOPhysicalLength64;
pub const IOPhysicalRange = extern struct {
    address: IOPhysicalAddress = @import("std").mem.zeroes(IOPhysicalAddress),
    length: IOByteCount = @import("std").mem.zeroes(IOByteCount),
};
pub const IOVirtualRange = extern struct {
    address: IOVirtualAddress = @import("std").mem.zeroes(IOVirtualAddress),
    length: IOByteCount = @import("std").mem.zeroes(IOByteCount),
};
pub const IOAddressRange = IOVirtualRange;
pub const IONamedValue = extern struct {
    value: c_int = @import("std").mem.zeroes(c_int),
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const IOAlignment = c_uint;
pub const io_object_t = mach_port_t;
pub const io_buf_ptr_t = [*c]u8;
pub const io_name_t = [128]u8;
pub const io_string_t = [512]u8;
pub const io_string_inband_t = [4096]u8;
pub const io_struct_inband_t = [4096]u8;
pub const io_user_scalar_t = u64;
pub const io_user_reference_t = u64;
pub const io_scalar_inband_t = [16]io_user_scalar_t;
pub const io_async_ref_t = [8]io_user_reference_t;
pub const io_scalar_inband64_t = [16]io_user_scalar_t;
pub const io_async_ref64_t = [8]io_user_reference_t;
pub const io_connect_t = io_object_t;
pub const io_enumerator_t = io_object_t;
pub const io_ident_t = io_object_t;
pub const io_iterator_t = io_object_t;
pub const io_registry_entry_t = io_object_t;
pub const io_service_t = io_object_t;
pub const uext_object_t = io_object_t;
pub const kIODefaultMemoryType: c_int = 0;
const enum_unnamed_115 = c_uint;
pub const kIODefaultCache: c_int = 0;
pub const kIOInhibitCache: c_int = 1;
pub const kIOWriteThruCache: c_int = 2;
pub const kIOCopybackCache: c_int = 3;
pub const kIOWriteCombineCache: c_int = 4;
pub const kIOCopybackInnerCache: c_int = 5;
pub const kIOPostedWrite: c_int = 6;
pub const kIORealTimeCache: c_int = 7;
pub const kIOPostedReordered: c_int = 8;
pub const kIOPostedCombinedReordered: c_int = 9;
const enum_unnamed_116 = c_uint;
pub const kIOMapAnywhere: c_int = 1;
pub const kIOMapCacheMask: c_int = 3840;
pub const kIOMapCacheShift: c_int = 8;
pub const kIOMapDefaultCache: c_int = 0;
pub const kIOMapInhibitCache: c_int = 256;
pub const kIOMapWriteThruCache: c_int = 512;
pub const kIOMapCopybackCache: c_int = 768;
pub const kIOMapWriteCombineCache: c_int = 1024;
pub const kIOMapCopybackInnerCache: c_int = 1280;
pub const kIOMapPostedWrite: c_int = 1536;
pub const kIOMapRealTimeCache: c_int = 1792;
pub const kIOMapPostedReordered: c_int = 2048;
pub const kIOMapPostedCombinedReordered: c_int = 2304;
pub const kIOMapUserOptionsMask: c_int = 4095;
pub const kIOMapReadOnly: c_int = 4096;
pub const kIOMapStatic: c_int = 16777216;
pub const kIOMapReference: c_int = 33554432;
pub const kIOMapUnique: c_int = 67108864;
pub const kIOMapPrefault: c_int = 268435456;
pub const kIOMapOverwrite: c_int = 536870912;
pub const kIOMapGuardedMask: c_uint = 3221225472;
pub const kIOMapGuardedSmall: c_int = 1073741824;
pub const kIOMapGuardedLarge: c_uint = 2147483648;
const enum_unnamed_117 = c_uint;
pub const kNanosecondScale: c_int = 1;
pub const kMicrosecondScale: c_int = 1000;
pub const kMillisecondScale: c_int = 1000000;
pub const kSecondScale: c_int = 1000000000;
pub const kTickScale: c_int = 10000000;
const enum_unnamed_118 = c_uint;
pub const kIOConnectMethodVarOutputSize: c_int = -3;
const enum_unnamed_119 = c_int;
pub const IODeviceNumber = c_uint;
pub const kIOMaxBusStall40usec: c_int = 40000;
pub const kIOMaxBusStall30usec: c_int = 30000;
pub const kIOMaxBusStall25usec: c_int = 25000;
pub const kIOMaxBusStall20usec: c_int = 20000;
pub const kIOMaxBusStall10usec: c_int = 10000;
pub const kIOMaxBusStall5usec: c_int = 5000;
pub const kIOMaxBusStallNone: c_int = 0;
const enum_unnamed_120 = c_uint;
pub const kFirstIOKitNotificationType: c_int = 100;
pub const kIOServicePublishNotificationType: c_int = 100;
pub const kIOServiceMatchedNotificationType: c_int = 101;
pub const kIOServiceTerminatedNotificationType: c_int = 102;
pub const kIOAsyncCompletionNotificationType: c_int = 150;
pub const kIOServiceMessageNotificationType: c_int = 160;
pub const kLastIOKitNotificationType: c_int = 199;
pub const kIOKitNoticationTypeMask: c_int = 4095;
pub const kIOKitNoticationTypeSizeAdjShift: c_int = 30;
pub const kIOKitNoticationMsgSizeMask: c_int = 3;
const enum_unnamed_121 = c_uint;
pub const kOSNotificationMessageID: c_int = 53;
pub const kOSAsyncCompleteMessageID: c_int = 57;
pub const kMaxAsyncArgs: c_int = 16;
const enum_unnamed_122 = c_uint;
pub const kIOAsyncReservedIndex: c_int = 0;
pub const kIOAsyncReservedCount: c_int = 1;
pub const kIOAsyncCalloutFuncIndex: c_int = 1;
pub const kIOAsyncCalloutRefconIndex: c_int = 2;
pub const kIOAsyncCalloutCount: c_int = 3;
pub const kIOMatchingCalloutFuncIndex: c_int = 1;
pub const kIOMatchingCalloutRefconIndex: c_int = 2;
pub const kIOMatchingCalloutCount: c_int = 3;
pub const kIOInterestCalloutFuncIndex: c_int = 1;
pub const kIOInterestCalloutRefconIndex: c_int = 2;
pub const kIOInterestCalloutServiceIndex: c_int = 3;
pub const kIOInterestCalloutCount: c_int = 4;
const enum_unnamed_123 = c_uint;
pub const kOSAsyncRef64Count: c_int = 8;
pub const kOSAsyncRef64Size: c_int = 64;
const enum_unnamed_124 = c_uint;
pub const OSAsyncReference64 = [8]io_user_reference_t;
pub const struct_OSNotificationHeader64 = extern struct {
    size: mach_msg_size_t align(8) = @import("std").mem.zeroes(mach_msg_size_t),
    type: natural_t = @import("std").mem.zeroes(natural_t),
    reference: OSAsyncReference64 = @import("std").mem.zeroes(OSAsyncReference64),
    pub fn content(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 72)));
    }
};
pub const struct_IOServiceInterestContent64 = extern struct {
    messageType: natural_t = @import("std").mem.zeroes(natural_t),
    messageArgument: [1]io_user_reference_t = @import("std").mem.zeroes([1]io_user_reference_t),
};
pub const kOSAsyncRefCount: c_int = 8;
pub const kOSAsyncRefSize: c_int = 32;
const enum_unnamed_125 = c_uint;
pub const OSAsyncReference = [8]natural_t;
pub const struct_OSNotificationHeader = extern struct {
    size: mach_msg_size_t align(4) = @import("std").mem.zeroes(mach_msg_size_t),
    type: natural_t = @import("std").mem.zeroes(natural_t),
    reference: OSAsyncReference = @import("std").mem.zeroes(OSAsyncReference),
    pub fn content(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 40)));
    }
};
pub const struct_IOServiceInterestContent = extern struct {
    messageType: natural_t = @import("std").mem.zeroes(natural_t),
    messageArgument: [1]?*anyopaque = @import("std").mem.zeroes([1]?*anyopaque),
};
pub const struct_IOAsyncCompletionContent = extern struct {
    result: IOReturn align(4) = @import("std").mem.zeroes(IOReturn),
    pub fn args(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), ?*anyopaque) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), ?*anyopaque);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 4)));
    }
};
pub const OSNotificationHeader = struct_OSNotificationHeader;
pub const IOServiceInterestContent = struct_IOServiceInterestContent;
pub const IOAsyncCompletionContent = struct_IOAsyncCompletionContent;
pub const struct_IONotificationPort = opaque {};
pub const IONotificationPortRef = ?*struct_IONotificationPort;
pub const IOServiceMatchingCallback = ?*const fn (?*anyopaque, io_iterator_t) callconv(.C) void;
pub const IOServiceInterestCallback = ?*const fn (?*anyopaque, io_service_t, u32, ?*anyopaque) callconv(.C) void;
pub extern const kIOMainPortDefault: mach_port_t;
pub extern fn IOMainPort(bootstrapPort: mach_port_t, mainPort: [*c]mach_port_t) kern_return_t;
pub extern const kIOMasterPortDefault: mach_port_t;
pub extern fn IOMasterPort(bootstrapPort: mach_port_t, mainPort: [*c]mach_port_t) kern_return_t;
pub extern fn IONotificationPortCreate(mainPort: mach_port_t) IONotificationPortRef;
pub extern fn IONotificationPortDestroy(notify: IONotificationPortRef) void;
pub extern fn IONotificationPortGetRunLoopSource(notify: IONotificationPortRef) CFRunLoopSourceRef;
pub extern fn IONotificationPortGetMachPort(notify: IONotificationPortRef) mach_port_t;
pub extern fn IONotificationPortSetImportanceReceiver(notify: IONotificationPortRef) kern_return_t;
pub extern fn IONotificationPortSetDispatchQueue(notify: IONotificationPortRef, queue: dispatch_queue_t) void;
pub extern fn IODispatchCalloutFromMessage(unused: ?*anyopaque, msg: [*c]mach_msg_header_t, reference: ?*anyopaque) void;
pub extern fn IOCreateReceivePort(msgType: u32, recvPort: [*c]mach_port_t) kern_return_t;
pub extern fn IOObjectRelease(object: io_object_t) kern_return_t;
pub extern fn IOObjectRetain(object: io_object_t) kern_return_t;
pub extern fn IOObjectGetClass(object: io_object_t, className: [*c]u8) kern_return_t;
pub extern fn IOObjectCopyClass(object: io_object_t) CFStringRef;
pub extern fn IOObjectCopySuperclassForClass(classname: CFStringRef) CFStringRef;
pub extern fn IOObjectCopyBundleIdentifierForClass(classname: CFStringRef) CFStringRef;
pub extern fn IOObjectConformsTo(object: io_object_t, className: [*c]const u8) boolean_t;
pub extern fn IOObjectIsEqualTo(object: io_object_t, anObject: io_object_t) boolean_t;
pub extern fn IOObjectGetKernelRetainCount(object: io_object_t) u32;
pub extern fn IOObjectGetUserRetainCount(object: io_object_t) u32;
pub extern fn IOObjectGetRetainCount(object: io_object_t) u32;
pub extern fn IOIteratorNext(iterator: io_iterator_t) io_object_t;
pub extern fn IOIteratorReset(iterator: io_iterator_t) void;
pub extern fn IOIteratorIsValid(iterator: io_iterator_t) boolean_t;
pub extern fn IOServiceGetMatchingService(mainPort: mach_port_t, matching: CFDictionaryRef) io_service_t;
pub extern fn IOServiceGetMatchingServices(mainPort: mach_port_t, matching: CFDictionaryRef, existing: [*c]io_iterator_t) kern_return_t;
pub extern fn IOServiceAddNotification(mainPort: mach_port_t, notificationType: [*c]const u8, matching: CFDictionaryRef, wakePort: mach_port_t, reference: usize, notification: [*c]io_iterator_t) kern_return_t;
pub extern fn IOServiceAddMatchingNotification(notifyPort: IONotificationPortRef, notificationType: [*c]const u8, matching: CFDictionaryRef, callback: IOServiceMatchingCallback, refCon: ?*anyopaque, notification: [*c]io_iterator_t) kern_return_t;
pub extern fn IOServiceAddInterestNotification(notifyPort: IONotificationPortRef, service: io_service_t, interestType: [*c]const u8, callback: IOServiceInterestCallback, refCon: ?*anyopaque, notification: [*c]io_object_t) kern_return_t;
pub extern fn IOServiceMatchPropertyTable(service: io_service_t, matching: CFDictionaryRef, matches: [*c]boolean_t) kern_return_t;
pub extern fn IOServiceGetBusyState(service: io_service_t, busyState: [*c]u32) kern_return_t;
pub extern fn IOServiceWaitQuiet(service: io_service_t, waitTime: [*c]mach_timespec_t) kern_return_t;
pub extern fn IOKitGetBusyState(mainPort: mach_port_t, busyState: [*c]u32) kern_return_t;
pub extern fn IOKitWaitQuietWithOptions(mainPort: mach_port_t, waitTime: [*c]mach_timespec_t, options: IOOptionBits) kern_return_t;
pub extern fn IOKitWaitQuiet(mainPort: mach_port_t, waitTime: [*c]mach_timespec_t) kern_return_t;
pub extern fn IOServiceOpen(service: io_service_t, owningTask: task_port_t, @"type": u32, connect: [*c]io_connect_t) kern_return_t;
pub extern fn IOServiceRequestProbe(service: io_service_t, options: u32) kern_return_t;
pub const kIOServiceInteractionAllowed: c_int = 1;
const enum_unnamed_126 = c_uint;
pub extern fn IOServiceAuthorize(service: io_service_t, options: u32) kern_return_t;
pub extern fn IOServiceOpenAsFileDescriptor(service: io_service_t, oflag: c_int) c_int;
pub extern fn IOServiceClose(connect: io_connect_t) kern_return_t;
pub extern fn IOConnectAddRef(connect: io_connect_t) kern_return_t;
pub extern fn IOConnectRelease(connect: io_connect_t) kern_return_t;
pub extern fn IOConnectGetService(connect: io_connect_t, service: [*c]io_service_t) kern_return_t;
pub extern fn IOConnectSetNotificationPort(connect: io_connect_t, @"type": u32, port: mach_port_t, reference: usize) kern_return_t;
pub extern fn IOConnectMapMemory(connect: io_connect_t, memoryType: u32, intoTask: task_port_t, atAddress: [*c]mach_vm_address_t, ofSize: [*c]mach_vm_size_t, options: IOOptionBits) kern_return_t;
pub extern fn IOConnectMapMemory64(connect: io_connect_t, memoryType: u32, intoTask: task_port_t, atAddress: [*c]mach_vm_address_t, ofSize: [*c]mach_vm_size_t, options: IOOptionBits) kern_return_t;
pub extern fn IOConnectUnmapMemory(connect: io_connect_t, memoryType: u32, fromTask: task_port_t, atAddress: mach_vm_address_t) kern_return_t;
pub extern fn IOConnectUnmapMemory64(connect: io_connect_t, memoryType: u32, fromTask: task_port_t, atAddress: mach_vm_address_t) kern_return_t;
pub extern fn IOConnectSetCFProperties(connect: io_connect_t, properties: CFTypeRef) kern_return_t;
pub extern fn IOConnectSetCFProperty(connect: io_connect_t, propertyName: CFStringRef, property: CFTypeRef) kern_return_t;
pub extern fn IOConnectCallMethod(connection: mach_port_t, selector: u32, input: [*c]const u64, inputCnt: u32, inputStruct: ?*const anyopaque, inputStructCnt: usize, output: [*c]u64, outputCnt: [*c]u32, outputStruct: ?*anyopaque, outputStructCnt: [*c]usize) kern_return_t;
pub extern fn IOConnectCallAsyncMethod(connection: mach_port_t, selector: u32, wake_port: mach_port_t, reference: [*c]u64, referenceCnt: u32, input: [*c]const u64, inputCnt: u32, inputStruct: ?*const anyopaque, inputStructCnt: usize, output: [*c]u64, outputCnt: [*c]u32, outputStruct: ?*anyopaque, outputStructCnt: [*c]usize) kern_return_t;
pub extern fn IOConnectCallStructMethod(connection: mach_port_t, selector: u32, inputStruct: ?*const anyopaque, inputStructCnt: usize, outputStruct: ?*anyopaque, outputStructCnt: [*c]usize) kern_return_t;
pub extern fn IOConnectCallAsyncStructMethod(connection: mach_port_t, selector: u32, wake_port: mach_port_t, reference: [*c]u64, referenceCnt: u32, inputStruct: ?*const anyopaque, inputStructCnt: usize, outputStruct: ?*anyopaque, outputStructCnt: [*c]usize) kern_return_t;
pub extern fn IOConnectCallScalarMethod(connection: mach_port_t, selector: u32, input: [*c]const u64, inputCnt: u32, output: [*c]u64, outputCnt: [*c]u32) kern_return_t;
pub extern fn IOConnectCallAsyncScalarMethod(connection: mach_port_t, selector: u32, wake_port: mach_port_t, reference: [*c]u64, referenceCnt: u32, input: [*c]const u64, inputCnt: u32, output: [*c]u64, outputCnt: [*c]u32) kern_return_t;
pub extern fn IOConnectTrap0(connect: io_connect_t, index: u32) kern_return_t;
pub extern fn IOConnectTrap1(connect: io_connect_t, index: u32, p1: usize) kern_return_t;
pub extern fn IOConnectTrap2(connect: io_connect_t, index: u32, p1: usize, p2: usize) kern_return_t;
pub extern fn IOConnectTrap3(connect: io_connect_t, index: u32, p1: usize, p2: usize, p3: usize) kern_return_t;
pub extern fn IOConnectTrap4(connect: io_connect_t, index: u32, p1: usize, p2: usize, p3: usize, p4: usize) kern_return_t;
pub extern fn IOConnectTrap5(connect: io_connect_t, index: u32, p1: usize, p2: usize, p3: usize, p4: usize, p5: usize) kern_return_t;
pub extern fn IOConnectTrap6(connect: io_connect_t, index: u32, p1: usize, p2: usize, p3: usize, p4: usize, p5: usize, p6: usize) kern_return_t;
pub extern fn IOConnectAddClient(connect: io_connect_t, client: io_connect_t) kern_return_t;
pub extern fn IORegistryGetRootEntry(mainPort: mach_port_t) io_registry_entry_t;
pub extern fn IORegistryEntryFromPath(mainPort: mach_port_t, path: [*c]const u8) io_registry_entry_t;
pub extern fn IORegistryEntryCopyFromPath(mainPort: mach_port_t, path: CFStringRef) io_registry_entry_t;
pub const kIORegistryIterateRecursively: c_int = 1;
pub const kIORegistryIterateParents: c_int = 2;
const enum_unnamed_127 = c_uint;
pub extern fn IORegistryCreateIterator(mainPort: mach_port_t, plane: [*c]const u8, options: IOOptionBits, iterator: [*c]io_iterator_t) kern_return_t;
pub extern fn IORegistryEntryCreateIterator(entry: io_registry_entry_t, plane: [*c]const u8, options: IOOptionBits, iterator: [*c]io_iterator_t) kern_return_t;
pub extern fn IORegistryIteratorEnterEntry(iterator: io_iterator_t) kern_return_t;
pub extern fn IORegistryIteratorExitEntry(iterator: io_iterator_t) kern_return_t;
pub extern fn IORegistryEntryGetName(entry: io_registry_entry_t, name: [*c]u8) kern_return_t;
pub extern fn IORegistryEntryGetNameInPlane(entry: io_registry_entry_t, plane: [*c]const u8, name: [*c]u8) kern_return_t;
pub extern fn IORegistryEntryGetLocationInPlane(entry: io_registry_entry_t, plane: [*c]const u8, location: [*c]u8) kern_return_t;
pub extern fn IORegistryEntryGetPath(entry: io_registry_entry_t, plane: [*c]const u8, path: [*c]u8) kern_return_t;
pub extern fn IORegistryEntryCopyPath(entry: io_registry_entry_t, plane: [*c]const u8) CFStringRef;
pub extern fn IORegistryEntryGetRegistryEntryID(entry: io_registry_entry_t, entryID: [*c]u64) kern_return_t;
pub extern fn IORegistryEntryCreateCFProperties(entry: io_registry_entry_t, properties: [*c]CFMutableDictionaryRef, allocator: CFAllocatorRef, options: IOOptionBits) kern_return_t;
pub extern fn IORegistryEntryCreateCFProperty(entry: io_registry_entry_t, key: CFStringRef, allocator: CFAllocatorRef, options: IOOptionBits) CFTypeRef;
pub extern fn IORegistryEntrySearchCFProperty(entry: io_registry_entry_t, plane: [*c]const u8, key: CFStringRef, allocator: CFAllocatorRef, options: IOOptionBits) CFTypeRef;
pub extern fn IORegistryEntryGetProperty(entry: io_registry_entry_t, propertyName: [*c]const u8, buffer: [*c]u8, size: [*c]u32) kern_return_t;
pub extern fn IORegistryEntrySetCFProperties(entry: io_registry_entry_t, properties: CFTypeRef) kern_return_t;
pub extern fn IORegistryEntrySetCFProperty(entry: io_registry_entry_t, propertyName: CFStringRef, property: CFTypeRef) kern_return_t;
pub extern fn IORegistryEntryGetChildIterator(entry: io_registry_entry_t, plane: [*c]const u8, iterator: [*c]io_iterator_t) kern_return_t;
pub extern fn IORegistryEntryGetChildEntry(entry: io_registry_entry_t, plane: [*c]const u8, child: [*c]io_registry_entry_t) kern_return_t;
pub extern fn IORegistryEntryGetParentIterator(entry: io_registry_entry_t, plane: [*c]const u8, iterator: [*c]io_iterator_t) kern_return_t;
pub extern fn IORegistryEntryGetParentEntry(entry: io_registry_entry_t, plane: [*c]const u8, parent: [*c]io_registry_entry_t) kern_return_t;
pub extern fn IORegistryEntryInPlane(entry: io_registry_entry_t, plane: [*c]const u8) boolean_t;
pub extern fn IOServiceMatching(name: [*c]const u8) CFMutableDictionaryRef;
pub extern fn IOServiceNameMatching(name: [*c]const u8) CFMutableDictionaryRef;
pub extern fn IOBSDNameMatching(mainPort: mach_port_t, options: u32, bsdName: [*c]const u8) CFMutableDictionaryRef;
pub extern fn IOOpenFirmwarePathMatching(mainPort: mach_port_t, options: u32, path: [*c]const u8) CFMutableDictionaryRef;
pub extern fn IORegistryEntryIDMatching(entryID: u64) CFMutableDictionaryRef;
pub extern fn IOServiceOFPathToBSDName(mainPort: mach_port_t, openFirmwarePath: [*c]const u8, bsdName: [*c]u8) kern_return_t;
pub const IOAsyncCallback0 = ?*const fn (?*anyopaque, IOReturn) callconv(.C) void;
pub const IOAsyncCallback1 = ?*const fn (?*anyopaque, IOReturn, ?*anyopaque) callconv(.C) void;
pub const IOAsyncCallback2 = ?*const fn (?*anyopaque, IOReturn, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const IOAsyncCallback = ?*const fn (?*anyopaque, IOReturn, [*c]?*anyopaque, u32) callconv(.C) void;
pub extern fn OSGetNotificationFromMessage(msg: [*c]mach_msg_header_t, index: u32, @"type": [*c]u32, reference: [*c]usize, content: [*c]?*anyopaque, size: [*c]vm_size_t) kern_return_t;
pub extern fn IOCatalogueSendData(mainPort: mach_port_t, flag: u32, buffer: [*c]const u8, size: u32) kern_return_t;
pub extern fn IOCatalogueTerminate(mainPort: mach_port_t, flag: u32, description: [*c]u8) kern_return_t;
pub extern fn IOCatalogueGetData(mainPort: mach_port_t, flag: u32, buffer: [*c][*c]u8, size: [*c]u32) kern_return_t;
pub extern fn IOCatalogueModuleLoaded(mainPort: mach_port_t, name: [*c]u8) kern_return_t;
pub extern fn IOCatalogueReset(mainPort: mach_port_t, flag: u32) kern_return_t;
pub const struct__CGDisplayConfigRef = opaque {};
pub const CGDisplayConfigRef = ?*struct__CGDisplayConfigRef;
pub extern fn CGBeginDisplayConfiguration(config: [*c]CGDisplayConfigRef) CGError;
pub extern fn CGConfigureDisplayOrigin(config: CGDisplayConfigRef, display: CGDirectDisplayID, x: i32, y: i32) CGError;
pub extern fn CGConfigureDisplayWithDisplayMode(config: CGDisplayConfigRef, display: CGDirectDisplayID, mode: CGDisplayModeRef, options: CFDictionaryRef) CGError;
pub extern fn CGConfigureDisplayStereoOperation(config: CGDisplayConfigRef, display: CGDirectDisplayID, stereo: boolean_t, forceBlueLine: boolean_t) CGError;
pub extern fn CGConfigureDisplayMirrorOfDisplay(config: CGDisplayConfigRef, display: CGDirectDisplayID, master: CGDirectDisplayID) CGError;
pub extern fn CGCancelDisplayConfiguration(config: CGDisplayConfigRef) CGError;
pub const CGConfigureOption = u32;
pub const kCGConfigureForAppOnly: c_int = 0;
pub const kCGConfigureForSession: c_int = 1;
pub const kCGConfigurePermanently: c_int = 2;
const enum_unnamed_128 = c_uint;
pub extern fn CGCompleteDisplayConfiguration(config: CGDisplayConfigRef, option: CGConfigureOption) CGError;
pub extern fn CGRestorePermanentDisplayConfiguration() void;
pub const CGDisplayChangeSummaryFlags = u32;
pub const kCGDisplayBeginConfigurationFlag: c_int = 1;
pub const kCGDisplayMovedFlag: c_int = 2;
pub const kCGDisplaySetMainFlag: c_int = 4;
pub const kCGDisplaySetModeFlag: c_int = 8;
pub const kCGDisplayAddFlag: c_int = 16;
pub const kCGDisplayRemoveFlag: c_int = 32;
pub const kCGDisplayEnabledFlag: c_int = 256;
pub const kCGDisplayDisabledFlag: c_int = 512;
pub const kCGDisplayMirrorFlag: c_int = 1024;
pub const kCGDisplayUnMirrorFlag: c_int = 2048;
pub const kCGDisplayDesktopShapeChangedFlag: c_int = 4096;
const enum_unnamed_129 = c_uint;
pub const CGDisplayReconfigurationCallBack = ?*const fn (CGDirectDisplayID, CGDisplayChangeSummaryFlags, ?*anyopaque) callconv(.C) void;
pub extern fn CGDisplayRegisterReconfigurationCallback(callback: CGDisplayReconfigurationCallBack, userInfo: ?*anyopaque) CGError;
pub extern fn CGDisplayRemoveReconfigurationCallback(callback: CGDisplayReconfigurationCallBack, userInfo: ?*anyopaque) CGError;
pub extern fn CGDisplaySetStereoOperation(display: CGDirectDisplayID, stereo: boolean_t, forceBlueLine: boolean_t, option: CGConfigureOption) CGError;
pub extern fn CGDisplayIsActive(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsAsleep(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsOnline(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsMain(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsBuiltin(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsInMirrorSet(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsAlwaysInMirrorSet(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsInHWMirrorSet(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayMirrorsDisplay(display: CGDirectDisplayID) CGDirectDisplayID;
pub extern fn CGDisplayUsesOpenGLAcceleration(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsStereo(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayPrimaryDisplay(display: CGDirectDisplayID) CGDirectDisplayID;
pub extern fn CGDisplayUnitNumber(display: CGDirectDisplayID) u32;
pub extern fn CGDisplayVendorNumber(display: CGDirectDisplayID) u32;
pub extern fn CGDisplayModelNumber(display: CGDirectDisplayID) u32;
pub extern fn CGDisplaySerialNumber(display: CGDirectDisplayID) u32;
pub extern fn CGDisplayIOServicePort(display: CGDirectDisplayID) io_service_t;
pub extern fn CGDisplayScreenSize(display: CGDirectDisplayID) CGSize;
pub extern fn CGDisplayRotation(display: CGDirectDisplayID) f64;
pub extern fn CGDisplayCopyColorSpace(display: CGDirectDisplayID) CGColorSpaceRef;
pub extern fn CGConfigureDisplayMode(config: CGDisplayConfigRef, display: CGDirectDisplayID, mode: CFDictionaryRef) CGError;
pub const CGDisplayFadeReservationToken = u32;
pub const CGDisplayBlendFraction = f32;
pub const CGDisplayFadeInterval = f32;
pub extern fn CGConfigureDisplayFadeEffect(config: CGDisplayConfigRef, fadeOutSeconds: CGDisplayFadeInterval, fadeInSeconds: CGDisplayFadeInterval, fadeRed: f32, fadeGreen: f32, fadeBlue: f32) CGError;
pub const CGDisplayReservationInterval = f32;
pub extern fn CGAcquireDisplayFadeReservation(seconds: CGDisplayReservationInterval, token: [*c]CGDisplayFadeReservationToken) CGError;
pub extern fn CGReleaseDisplayFadeReservation(token: CGDisplayFadeReservationToken) CGError;
pub extern fn CGDisplayFade(token: CGDisplayFadeReservationToken, duration: CGDisplayFadeInterval, startBlend: CGDisplayBlendFraction, endBlend: CGDisplayBlendFraction, redBlend: f32, greenBlend: f32, blueBlend: f32, synchronous: boolean_t) CGError;
pub extern fn CGDisplayFadeOperationInProgress() boolean_t;
pub const struct_CGDisplayStream = opaque {};
pub const CGDisplayStreamRef = ?*struct_CGDisplayStream;
pub const struct_CGDisplayStreamUpdate = opaque {};
pub const CGDisplayStreamUpdateRef = ?*const struct_CGDisplayStreamUpdate;
pub const CGDisplayStreamUpdateRectType = i32;
pub const kCGDisplayStreamUpdateRefreshedRects: c_int = 0;
pub const kCGDisplayStreamUpdateMovedRects: c_int = 1;
pub const kCGDisplayStreamUpdateDirtyRects: c_int = 2;
pub const kCGDisplayStreamUpdateReducedDirtyRects: c_int = 3;
const enum_unnamed_130 = c_uint;
pub const CGDisplayStreamFrameStatus = i32;
pub const kCGDisplayStreamFrameStatusFrameComplete: c_int = 0;
pub const kCGDisplayStreamFrameStatusFrameIdle: c_int = 1;
pub const kCGDisplayStreamFrameStatusFrameBlank: c_int = 2;
pub const kCGDisplayStreamFrameStatusStopped: c_int = 3;
const enum_unnamed_131 = c_uint; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGDisplayStream.h:86:16: warning: unsupported type: 'BlockPointer'
pub const CGDisplayStreamFrameAvailableHandler = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGDisplayStream.h:86:16
pub extern fn CGDisplayStreamUpdateGetTypeID() CFTypeID;
pub extern fn CGDisplayStreamUpdateGetRects(updateRef: CGDisplayStreamUpdateRef, rectType: CGDisplayStreamUpdateRectType, rectCount: [*c]usize) [*c]const CGRect;
pub extern fn CGDisplayStreamUpdateCreateMergedUpdate(firstUpdate: CGDisplayStreamUpdateRef, secondUpdate: CGDisplayStreamUpdateRef) CGDisplayStreamUpdateRef;
pub extern fn CGDisplayStreamUpdateGetMovedRectsDelta(updateRef: CGDisplayStreamUpdateRef, dx: [*c]CGFloat, dy: [*c]CGFloat) void;
pub extern fn CGDisplayStreamUpdateGetDropCount(updateRef: CGDisplayStreamUpdateRef) usize;
pub extern const kCGDisplayStreamSourceRect: CFStringRef;
pub extern const kCGDisplayStreamDestinationRect: CFStringRef;
pub extern const kCGDisplayStreamPreserveAspectRatio: CFStringRef;
pub extern const kCGDisplayStreamColorSpace: CFStringRef;
pub extern const kCGDisplayStreamMinimumFrameTime: CFStringRef;
pub extern const kCGDisplayStreamShowCursor: CFStringRef;
pub extern const kCGDisplayStreamQueueDepth: CFStringRef;
pub extern const kCGDisplayStreamYCbCrMatrix: CFStringRef;
pub extern const kCGDisplayStreamYCbCrMatrix_ITU_R_709_2: CFStringRef;
pub extern const kCGDisplayStreamYCbCrMatrix_ITU_R_601_4: CFStringRef;
pub extern const kCGDisplayStreamYCbCrMatrix_SMPTE_240M_1995: CFStringRef;
pub extern fn CGDisplayStreamGetTypeID() CFTypeID;
pub extern fn CGDisplayStreamCreate(display: CGDirectDisplayID, outputWidth: usize, outputHeight: usize, pixelFormat: i32, properties: CFDictionaryRef, handler: CGDisplayStreamFrameAvailableHandler) CGDisplayStreamRef;
pub extern fn CGDisplayStreamCreateWithDispatchQueue(display: CGDirectDisplayID, outputWidth: usize, outputHeight: usize, pixelFormat: i32, properties: CFDictionaryRef, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler) CGDisplayStreamRef;
pub extern fn CGDisplayStreamStart(displayStream: CGDisplayStreamRef) CGError;
pub extern fn CGDisplayStreamStop(displayStream: CGDisplayStreamRef) CGError;
pub extern fn CGDisplayStreamGetRunLoopSource(displayStream: CGDisplayStreamRef) CFRunLoopSourceRef;
pub const CGEventErr = CGError;
pub const CGButtonCount = u32;
pub const CGWheelCount = u32;
pub const CGCharCode = u16;
pub const CGKeyCode = u16;
pub const CGScreenRefreshCallback = ?*const fn (u32, [*c]const CGRect, ?*anyopaque) callconv(.C) void;
pub extern fn CGRegisterScreenRefreshCallback(callback: CGScreenRefreshCallback, userInfo: ?*anyopaque) CGError;
pub extern fn CGUnregisterScreenRefreshCallback(callback: CGScreenRefreshCallback, userInfo: ?*anyopaque) void;
pub extern fn CGWaitForScreenRefreshRects(rects: [*c][*c]CGRect, count: [*c]u32) CGError;
pub const CGScreenUpdateOperation = u32;
pub const kCGScreenUpdateOperationRefresh: c_int = 0;
pub const kCGScreenUpdateOperationMove: c_int = 1;
pub const kCGScreenUpdateOperationReducedDirtyRectangleCount: c_uint = 2147483648;
const enum_unnamed_132 = c_uint;
pub const struct_CGScreenUpdateMoveDelta = extern struct {
    dX: i32 = @import("std").mem.zeroes(i32),
    dY: i32 = @import("std").mem.zeroes(i32),
};
pub const CGScreenUpdateMoveDelta = struct_CGScreenUpdateMoveDelta;
pub const CGScreenUpdateMoveCallback = ?*const fn (CGScreenUpdateMoveDelta, usize, [*c]const CGRect, ?*anyopaque) callconv(.C) void;
pub extern fn CGScreenRegisterMoveCallback(callback: CGScreenUpdateMoveCallback, userInfo: ?*anyopaque) CGError;
pub extern fn CGScreenUnregisterMoveCallback(callback: CGScreenUpdateMoveCallback, userInfo: ?*anyopaque) void;
pub extern fn CGWaitForScreenUpdateRects(requestedOperations: CGScreenUpdateOperation, currentOperation: [*c]CGScreenUpdateOperation, rects: [*c][*c]CGRect, rectCount: [*c]usize, delta: [*c]CGScreenUpdateMoveDelta) CGError;
pub extern fn CGReleaseScreenRefreshRects(rects: [*c]CGRect) void;
pub extern fn CGCursorIsVisible() boolean_t;
pub extern fn CGCursorIsDrawnInFramebuffer() boolean_t;
pub extern fn CGWarpMouseCursorPosition(newCursorPosition: CGPoint) CGError;
pub extern fn CGAssociateMouseAndMouseCursorPosition(connected: boolean_t) CGError;
pub extern fn CGWindowServerCreateServerPort() CFMachPortRef;
pub extern fn CGEnableEventStateCombining(combineState: boolean_t) CGError;
pub extern fn CGInhibitLocalEvents(inhibit: boolean_t) CGError;
pub extern fn CGPostMouseEvent(mouseCursorPosition: CGPoint, updateMouseCursorPosition: boolean_t, buttonCount: CGButtonCount, mouseButtonDown: boolean_t, ...) CGError;
pub extern fn CGPostScrollWheelEvent(wheelCount: CGWheelCount, wheel1: i32, ...) CGError;
pub extern fn CGPostKeyboardEvent(keyChar: CGCharCode, virtualKey: CGKeyCode, keyDown: boolean_t) CGError;
pub const CGEventFilterMask = u32;
pub const kCGEventFilterMaskPermitLocalMouseEvents: c_int = 1;
pub const kCGEventFilterMaskPermitLocalKeyboardEvents: c_int = 2;
pub const kCGEventFilterMaskPermitSystemDefinedEvents: c_int = 4;
const enum_unnamed_133 = c_uint;
pub const CGEventSuppressionState = u32;
pub const kCGEventSuppressionStateSuppressionInterval: c_int = 0;
pub const kCGEventSuppressionStateRemoteMouseDrag: c_int = 1;
pub const kCGNumberOfEventSuppressionStates: c_int = 2;
const enum_unnamed_134 = c_uint;
pub extern fn CGSetLocalEventsFilterDuringSuppressionState(filter: CGEventFilterMask, state: CGEventSuppressionState) CGError;
pub extern fn CGSetLocalEventsSuppressionInterval(seconds: CFTimeInterval) CGError;
pub extern fn CGWindowServerCFMachPort() CFMachPortRef;
pub const CGRectCount = u32;
pub const OSAtomic_int64_aligned64_t = i64;
pub extern fn OSAtomicAdd32(__theAmount: i32, __theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicAdd32Barrier(__theAmount: i32, __theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicIncrement32(__theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicIncrement32Barrier(__theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicDecrement32(__theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicDecrement32Barrier(__theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicAdd64(__theAmount: i64, __theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicAdd64Barrier(__theAmount: i64, __theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicIncrement64(__theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicIncrement64Barrier(__theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicDecrement64(__theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicDecrement64Barrier(__theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicOr32(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicOr32Barrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicOr32Orig(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicOr32OrigBarrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicAnd32(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicAnd32Barrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicAnd32Orig(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicAnd32OrigBarrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicXor32(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicXor32Barrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicXor32Orig(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicXor32OrigBarrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicCompareAndSwap32(__oldValue: i32, __newValue: i32, __theValue: [*c]volatile i32) bool;
pub extern fn OSAtomicCompareAndSwap32Barrier(__oldValue: i32, __newValue: i32, __theValue: [*c]volatile i32) bool;
pub extern fn OSAtomicCompareAndSwapPtr(__oldValue: ?*anyopaque, __newValue: ?*anyopaque, __theValue: [*c]volatile ?*anyopaque) bool;
pub extern fn OSAtomicCompareAndSwapPtrBarrier(__oldValue: ?*anyopaque, __newValue: ?*anyopaque, __theValue: [*c]volatile ?*anyopaque) bool;
pub extern fn OSAtomicCompareAndSwapInt(__oldValue: c_int, __newValue: c_int, __theValue: [*c]volatile c_int) bool;
pub extern fn OSAtomicCompareAndSwapIntBarrier(__oldValue: c_int, __newValue: c_int, __theValue: [*c]volatile c_int) bool;
pub extern fn OSAtomicCompareAndSwapLong(__oldValue: c_long, __newValue: c_long, __theValue: [*c]volatile c_long) bool;
pub extern fn OSAtomicCompareAndSwapLongBarrier(__oldValue: c_long, __newValue: c_long, __theValue: [*c]volatile c_long) bool;
pub extern fn OSAtomicCompareAndSwap64(__oldValue: i64, __newValue: i64, __theValue: [*c]volatile OSAtomic_int64_aligned64_t) bool;
pub extern fn OSAtomicCompareAndSwap64Barrier(__oldValue: i64, __newValue: i64, __theValue: [*c]volatile OSAtomic_int64_aligned64_t) bool;
pub extern fn OSAtomicTestAndSet(__n: u32, __theAddress: ?*volatile anyopaque) bool;
pub extern fn OSAtomicTestAndSetBarrier(__n: u32, __theAddress: ?*volatile anyopaque) bool;
pub extern fn OSAtomicTestAndClear(__n: u32, __theAddress: ?*volatile anyopaque) bool;
pub extern fn OSAtomicTestAndClearBarrier(__n: u32, __theAddress: ?*volatile anyopaque) bool;
pub extern fn OSMemoryBarrier() void;
pub const OSFifoQueueHead = extern struct {
    opaque1: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    opaque2: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    opaque3: c_int = @import("std").mem.zeroes(c_int),
};
pub extern fn OSAtomicFifoEnqueue(__list: [*c]volatile OSFifoQueueHead, __new: ?*anyopaque, __offset: usize) void;
pub extern fn OSAtomicFifoDequeue(__list: [*c]volatile OSFifoQueueHead, __offset: usize) ?*anyopaque;
pub const OSSpinLock = i32;
pub extern fn OSSpinLockTry(__lock: [*c]volatile OSSpinLock) bool;
pub extern fn OSSpinLockLock(__lock: [*c]volatile OSSpinLock) void;
pub extern fn OSSpinLockUnlock(__lock: [*c]volatile OSSpinLock) void;
pub const OSQueueHead = extern struct {
    opaque1: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    opaque2: c_long = @import("std").mem.zeroes(c_long),
};
pub extern fn OSAtomicEnqueue(__list: [*c]volatile OSQueueHead, __new: ?*anyopaque, __offset: usize) void;
pub extern fn OSAtomicDequeue(__list: [*c]volatile OSQueueHead, __offset: usize) ?*anyopaque;
pub const IOIndex = SInt32;
pub const IOSelect = UInt32;
pub const IOFixed1616 = UInt32;
pub const IODisplayVendorID = UInt32;
pub const IODisplayProductID = UInt32;
pub const IODisplayModeID = SInt32;
pub const kIODisplayModeIDBootProgrammable: c_int = -5;
pub const kIODisplayModeIDReservedBase: c_int = -2147483648;
const enum_unnamed_135 = c_int;
pub const kIOMaxPixelBits: c_int = 64;
const enum_unnamed_136 = c_uint;
pub const IOPixelEncoding = [64]u8;
pub const kIOCLUTPixels: c_int = 0;
pub const kIOFixedCLUTPixels: c_int = 1;
pub const kIORGBDirectPixels: c_int = 2;
pub const kIOMonoDirectPixels: c_int = 3;
pub const kIOMonoInverseDirectPixels: c_int = 4;
pub const kIORGBSignedDirectPixels: c_int = 5;
pub const kIORGBSignedFloatingPointPixels: c_int = 6;
const enum_unnamed_137 = c_uint;
pub const struct_IOPixelInformation = extern struct {
    bytesPerRow: UInt32 = @import("std").mem.zeroes(UInt32),
    bytesPerPlane: UInt32 = @import("std").mem.zeroes(UInt32),
    bitsPerPixel: UInt32 = @import("std").mem.zeroes(UInt32),
    pixelType: UInt32 = @import("std").mem.zeroes(UInt32),
    componentCount: UInt32 = @import("std").mem.zeroes(UInt32),
    bitsPerComponent: UInt32 = @import("std").mem.zeroes(UInt32),
    componentMasks: [16]UInt32 = @import("std").mem.zeroes([16]UInt32),
    pixelFormat: IOPixelEncoding = @import("std").mem.zeroes(IOPixelEncoding),
    flags: UInt32 = @import("std").mem.zeroes(UInt32),
    activeWidth: UInt32 = @import("std").mem.zeroes(UInt32),
    activeHeight: UInt32 = @import("std").mem.zeroes(UInt32),
    reserved: [2]UInt32 = @import("std").mem.zeroes([2]UInt32),
};
pub const IOPixelInformation = struct_IOPixelInformation;
pub const IOAppleTimingID = UInt32;
pub const struct_IODisplayModeInformation = extern struct {
    nominalWidth: UInt32 = @import("std").mem.zeroes(UInt32),
    nominalHeight: UInt32 = @import("std").mem.zeroes(UInt32),
    refreshRate: IOFixed1616 = @import("std").mem.zeroes(IOFixed1616),
    maxDepthIndex: IOIndex = @import("std").mem.zeroes(IOIndex),
    flags: UInt32 = @import("std").mem.zeroes(UInt32),
    imageWidth: UInt16 = @import("std").mem.zeroes(UInt16),
    imageHeight: UInt16 = @import("std").mem.zeroes(UInt16),
    reserved: [3]UInt32 = @import("std").mem.zeroes([3]UInt32),
};
pub const IODisplayModeInformation = struct_IODisplayModeInformation;
pub const kDisplayModeSafetyFlags: c_int = 7;
pub const kDisplayModeAlwaysShowFlag: c_int = 8;
pub const kDisplayModeNeverShowFlag: c_int = 128;
pub const kDisplayModeNotResizeFlag: c_int = 16;
pub const kDisplayModeRequiresPanFlag: c_int = 32;
pub const kDisplayModeInterlacedFlag: c_int = 64;
pub const kDisplayModeSimulscanFlag: c_int = 256;
pub const kDisplayModeBuiltInFlag: c_int = 1024;
pub const kDisplayModeNotPresetFlag: c_int = 512;
pub const kDisplayModeStretchedFlag: c_int = 2048;
pub const kDisplayModeNotGraphicsQualityFlag: c_int = 4096;
pub const kDisplayModeValidateAgainstDisplay: c_int = 8192;
pub const kDisplayModeTelevisionFlag: c_int = 1048576;
pub const kDisplayModeValidForMirroringFlag: c_int = 2097152;
pub const kDisplayModeAcceleratorBackedFlag: c_int = 4194304;
pub const kDisplayModeValidForHiResFlag: c_int = 8388608;
pub const kDisplayModeValidForAirPlayFlag: c_int = 16777216;
pub const kDisplayModeNativeFlag: c_int = 33554432;
const enum_unnamed_138 = c_uint;
pub const kDisplayModeValidFlag: c_int = 1;
pub const kDisplayModeSafeFlag: c_int = 2;
pub const kDisplayModeDefaultFlag: c_int = 4;
const enum_unnamed_139 = c_uint;
pub const struct_IOFramebufferInformation = extern struct {
    baseAddress: IOPhysicalAddress = @import("std").mem.zeroes(IOPhysicalAddress),
    activeWidth: UInt32 = @import("std").mem.zeroes(UInt32),
    activeHeight: UInt32 = @import("std").mem.zeroes(UInt32),
    bytesPerRow: IOByteCount = @import("std").mem.zeroes(IOByteCount),
    bytesPerPlane: IOByteCount = @import("std").mem.zeroes(IOByteCount),
    bitsPerPixel: UInt32 = @import("std").mem.zeroes(UInt32),
    pixelType: UInt32 = @import("std").mem.zeroes(UInt32),
    flags: UInt32 = @import("std").mem.zeroes(UInt32),
    reserved: [4]UInt32 = @import("std").mem.zeroes([4]UInt32),
};
pub const IOFramebufferInformation = struct_IOFramebufferInformation;
pub const kFramebufferSupportsCopybackCache: c_int = 65536;
pub const kFramebufferSupportsWritethruCache: c_int = 131072;
pub const kFramebufferSupportsGammaCorrection: c_int = 262144;
pub const kFramebufferDisableAltivecAccess: c_int = 524288;
const enum_unnamed_140 = c_uint;
pub const IOPixelAperture = IOIndex;
pub const kIOFBSystemAperture: c_int = 0;
const enum_unnamed_141 = c_uint;
pub const IOColorComponent = UInt16;
pub const struct_IOColorEntry = extern struct {
    index: UInt16 = @import("std").mem.zeroes(UInt16),
    red: IOColorComponent = @import("std").mem.zeroes(IOColorComponent),
    green: IOColorComponent = @import("std").mem.zeroes(IOColorComponent),
    blue: IOColorComponent = @import("std").mem.zeroes(IOColorComponent),
};
pub const IOColorEntry = struct_IOColorEntry;
pub const kSetCLUTByValue: c_int = 1;
pub const kSetCLUTImmediately: c_int = 2;
pub const kSetCLUTWithLuminance: c_int = 4;
const enum_unnamed_142 = c_uint;
pub const kIOPowerStateAttribute: c_int = 1886876275;
pub const kIOPowerAttribute: c_int = 1886353266;
pub const kIODriverPowerAttribute: c_int = 1685090167;
pub const kIOHardwareCursorAttribute: c_int = 1668445042;
pub const kIOMirrorAttribute: c_int = 1835627122;
pub const kIOMirrorDefaultAttribute: c_int = 1836213350;
pub const kIOCapturedAttribute: c_int = 1667330148;
pub const kIOCursorControlAttribute: c_int = 1668445027;
pub const kIOSystemPowerAttribute: c_int = 1936750450;
pub const kIOWindowServerActiveAttribute: c_int = 2004054646;
pub const kIOVRAMSaveAttribute: c_int = 1987212150;
pub const kIODeferCLUTSetAttribute: c_int = 1986227316;
pub const kIOClamshellStateAttribute: c_int = 1668047213;
pub const kIOFBDisplayPortTrainingAttribute: c_int = 1685091425;
pub const kIOFBDisplayState: c_int = 1685288052;
pub const kIOFBVariableRefreshRate: c_int = 1987211839;
pub const kIOFBLimitHDCPAttribute: c_int = 1751409520;
pub const kIOFBLimitHDCPStateAttribute: c_int = 1934115907;
pub const kIOFBStop: c_int = 1937010544;
pub const kIOFBRedGammaScaleAttribute: c_int = 1735617650;
pub const kIOFBGreenGammaScaleAttribute: c_int = 1735617639;
pub const kIOFBBlueGammaScaleAttribute: c_int = 1735617634;
pub const kIOFBHDRMetaDataAttribute: c_int = 1751413357;
pub const kIOBuiltinPanelPowerAttribute: c_int = 1886284912;
const enum_unnamed_143 = c_uint;
pub const kIOFBHDCPLimit_AllowAll: c_int = 0;
pub const kIOFBHDCPLimit_NoHDCP1x: c_int = 1;
pub const kIOFBHDCPLimit_NoHDCP20Type0: c_int = 2;
pub const kIOFBHDCPLimit_NoHDCP20Type1: c_int = 4;
const enum_unnamed_144 = c_uint;
pub const struct_IOFBHDRMetaDataV1 = extern struct {
    displayPrimary_X0: u16 = @import("std").mem.zeroes(u16),
    displayPrimary_Y0: u16 = @import("std").mem.zeroes(u16),
    displayPrimary_X1: u16 = @import("std").mem.zeroes(u16),
    displayPrimary_Y1: u16 = @import("std").mem.zeroes(u16),
    displayPrimary_X2: u16 = @import("std").mem.zeroes(u16),
    displayPrimary_Y2: u16 = @import("std").mem.zeroes(u16),
    displayPrimary_X: u16 = @import("std").mem.zeroes(u16),
    displayPrimary_Y: u16 = @import("std").mem.zeroes(u16),
    desiredLuminance_Max: u16 = @import("std").mem.zeroes(u16),
    desiredLuminance_Min: u16 = @import("std").mem.zeroes(u16),
    desiredLightLevel_Avg: u16 = @import("std").mem.zeroes(u16),
    desiredLightLevel_Max: u16 = @import("std").mem.zeroes(u16),
    __reservedA: [5]u64 = @import("std").mem.zeroes([5]u64),
};
pub const IOFBHDRMetaDataV1 = struct_IOFBHDRMetaDataV1;
pub const IOFBHDRMetaData = extern union {
    v1: IOFBHDRMetaDataV1,
};
pub const kIOFBDisplayState_AlreadyActive: c_int = 1;
pub const kIOFBDisplayState_RestoredProfile: c_int = 2;
pub const kIOFBDisplayState_PipelineBlack: c_int = 4;
pub const kIOFBDisplayState_Mask: c_int = 7;
const enum_unnamed_145 = c_uint;
pub const kIOWSAA_Unaccelerated: c_int = 0;
pub const kIOWSAA_Accelerated: c_int = 1;
pub const kIOWSAA_From_Accelerated: c_int = 2;
pub const kIOWSAA_To_Accelerated: c_int = 3;
pub const kIOWSAA_Sleep: c_int = 4;
pub const kIOWSAA_Hibernate: c_int = 4;
pub const kIOWSAA_DriverOpen: c_int = 5;
pub const kIOWSAA_StateMask: c_int = 15;
pub const kIOWSAA_Transactional: c_int = 16;
pub const kIOWSAA_DeferStart: c_int = 256;
pub const kIOWSAA_DeferEnd: c_int = 512;
pub const kIOWSAA_NonConsoleDevice: c_int = 1024;
pub const kIOWSAA_Reserved: c_uint = 4026531840;
const enum_unnamed_146 = c_uint;
pub const kIOFBNS_Rendezvous: c_uint = 2271560481;
pub const kIOFBNS_MessageMask: c_int = 15;
pub const kIOFBNS_Sleep: c_int = 0;
pub const kIOFBNS_Wake: c_int = 1;
pub const kIOFBNS_Doze: c_int = 2;
pub const kIOFBNS_Dim: c_int = 3;
pub const kIOFBNS_UnDim: c_int = 4;
pub const kIOFBNS_DisplayStateMask: c_int = 3840;
pub const kIOFBNS_DisplayStateShift: c_int = 8;
pub const kIOFBNS_GenerationMask: c_int = 2147418112;
pub const kIOFBNS_GenerationShift: c_int = 16;
const enum_unnamed_147 = c_uint;
pub const kIOMirrorIsPrimary: c_uint = 2147483648;
pub const kIOMirrorHWClipped: c_int = 1073741824;
pub const kIOMirrorIsMirrored: c_int = 536870912;
const enum_unnamed_148 = c_uint;
pub const kIOMirrorDefault: c_int = 1;
pub const kIOMirrorForced: c_int = 2;
const enum_unnamed_149 = c_uint;
pub const struct_IODetailedTimingInformationV1 = extern struct {
    pixelClock: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalActive: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalBlanking: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalBorder: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalSyncOffset: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalSyncWidth: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalActive: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalBlanking: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalBorder: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalSyncOffset: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalSyncWidth: UInt32 = @import("std").mem.zeroes(UInt32),
};
pub const IODetailedTimingInformationV1 = struct_IODetailedTimingInformationV1;
pub const struct_IODetailedTimingInformationV2 = extern struct {
    __reservedA: [3]UInt32 = @import("std").mem.zeroes([3]UInt32),
    horizontalScaledInset: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalScaledInset: UInt32 = @import("std").mem.zeroes(UInt32),
    scalerFlags: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalScaled: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalScaled: UInt32 = @import("std").mem.zeroes(UInt32),
    signalConfig: UInt32 = @import("std").mem.zeroes(UInt32),
    signalLevels: UInt32 = @import("std").mem.zeroes(UInt32),
    pixelClock: UInt64 = @import("std").mem.zeroes(UInt64),
    minPixelClock: UInt64 = @import("std").mem.zeroes(UInt64),
    maxPixelClock: UInt64 = @import("std").mem.zeroes(UInt64),
    horizontalActive: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalBlanking: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalSyncOffset: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalSyncPulseWidth: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalActive: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalBlanking: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalSyncOffset: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalSyncPulseWidth: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalBorderLeft: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalBorderRight: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalBorderTop: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalBorderBottom: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalSyncConfig: UInt32 = @import("std").mem.zeroes(UInt32),
    horizontalSyncLevel: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalSyncConfig: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalSyncLevel: UInt32 = @import("std").mem.zeroes(UInt32),
    numLinks: UInt32 = @import("std").mem.zeroes(UInt32),
    verticalBlankingExtension: UInt32 = @import("std").mem.zeroes(UInt32),
    pixelEncoding: UInt16 = @import("std").mem.zeroes(UInt16),
    bitsPerColorComponent: UInt16 = @import("std").mem.zeroes(UInt16),
    colorimetry: UInt16 = @import("std").mem.zeroes(UInt16),
    dynamicRange: UInt16 = @import("std").mem.zeroes(UInt16),
    dscCompressedBitsPerPixel: UInt16 = @import("std").mem.zeroes(UInt16),
    dscSliceHeight: UInt16 = @import("std").mem.zeroes(UInt16),
    dscSliceWidth: UInt16 = @import("std").mem.zeroes(UInt16),
    verticalBlankingMaxStretchPerFrame: UInt16 = @import("std").mem.zeroes(UInt16),
    verticalBlankingMaxShrinkPerFrame: UInt16 = @import("std").mem.zeroes(UInt16),
    __reservedB: [3]UInt16 = @import("std").mem.zeroes([3]UInt16),
};
pub const IODetailedTimingInformationV2 = struct_IODetailedTimingInformationV2;
pub const IODetailedTimingInformation = struct_IODetailedTimingInformationV2;
const union_unnamed_150 = extern union {
    v1: IODetailedTimingInformationV1,
    v2: IODetailedTimingInformationV2,
};
pub const struct_IOTimingInformation = extern struct {
    appleTimingID: IOAppleTimingID = @import("std").mem.zeroes(IOAppleTimingID),
    flags: UInt32 = @import("std").mem.zeroes(UInt32),
    detailedInfo: union_unnamed_150 = @import("std").mem.zeroes(union_unnamed_150),
};
pub const IOTimingInformation = struct_IOTimingInformation;
pub const kIODetailedTimingValid: c_uint = 2147483648;
pub const kIOScalingInfoValid: c_int = 1073741824;
const enum_unnamed_151 = c_uint;
pub const kIOScaleStretchToFit: c_int = 1;
pub const kIOScaleRotateFlags: c_int = 240;
pub const kIOScaleSwapAxes: c_int = 16;
pub const kIOScaleInvertX: c_int = 32;
pub const kIOScaleInvertY: c_int = 64;
pub const kIOScaleRotate0: c_int = 0;
pub const kIOScaleRotate90: c_int = 48;
pub const kIOScaleRotate180: c_int = 96;
pub const kIOScaleRotate270: c_int = 80;
const enum_unnamed_152 = c_uint;
pub const kIOPixelEncodingNotSupported: c_int = 0;
pub const kIOPixelEncodingRGB444: c_int = 1;
pub const kIOPixelEncodingYCbCr444: c_int = 2;
pub const kIOPixelEncodingYCbCr422: c_int = 4;
pub const kIOPixelEncodingYCbCr420: c_int = 8;
const enum_unnamed_153 = c_uint;
pub const kIOBitsPerColorComponentNotSupported: c_int = 0;
pub const kIOBitsPerColorComponent6: c_int = 1;
pub const kIOBitsPerColorComponent8: c_int = 2;
pub const kIOBitsPerColorComponent10: c_int = 4;
pub const kIOBitsPerColorComponent12: c_int = 8;
pub const kIOBitsPerColorComponent16: c_int = 16;
const enum_unnamed_154 = c_uint;
pub const kIOColorimetryNotSupported: c_int = 0;
pub const kIOColorimetryNativeRGB: c_int = 1;
pub const kIOColorimetrysRGB: c_int = 2;
pub const kIOColorimetryDCIP3: c_int = 4;
pub const kIOColorimetryAdobeRGB: c_int = 8;
pub const kIOColorimetryxvYCC: c_int = 16;
pub const kIOColorimetryWGRGB: c_int = 32;
pub const kIOColorimetryBT601: c_int = 64;
pub const kIOColorimetryBT709: c_int = 128;
pub const kIOColorimetryBT2020: c_int = 256;
pub const kIOColorimetryBT2100: c_int = 512;
const enum_unnamed_155 = c_uint;
pub const kIODynamicRangeNotSupported: c_int = 0;
pub const kIODynamicRangeSDR: c_int = 1;
pub const kIODynamicRangeHDR10: c_int = 2;
pub const kIODynamicRangeDolbyNormalMode: c_int = 4;
pub const kIODynamicRangeDolbyTunnelMode: c_int = 8;
pub const kIODynamicRangeTraditionalGammaHDR: c_int = 16;
pub const kIODynamicRangeTraditionalGammaSDR: c_int = 32;
const enum_unnamed_156 = c_uint;
pub const struct_IOFBDisplayModeDescription = extern struct {
    info: IODisplayModeInformation = @import("std").mem.zeroes(IODisplayModeInformation),
    timingInfo: IOTimingInformation = @import("std").mem.zeroes(IOTimingInformation),
};
pub const IOFBDisplayModeDescription = struct_IOFBDisplayModeDescription;
pub const struct_IODisplayTimingRangeV1 = extern struct {
    __reservedA: [2]UInt32 = @import("std").mem.zeroes([2]UInt32),
    version: UInt32 = @import("std").mem.zeroes(UInt32),
    __reservedB: [5]UInt32 = @import("std").mem.zeroes([5]UInt32),
    minPixelClock: UInt64 = @import("std").mem.zeroes(UInt64),
    maxPixelClock: UInt64 = @import("std").mem.zeroes(UInt64),
    maxPixelError: UInt32 = @import("std").mem.zeroes(UInt32),
    supportedSyncFlags: UInt32 = @import("std").mem.zeroes(UInt32),
    supportedSignalLevels: UInt32 = @import("std").mem.zeroes(UInt32),
    supportedSignalConfigs: UInt32 = @import("std").mem.zeroes(UInt32),
    minFrameRate: UInt32 = @import("std").mem.zeroes(UInt32),
    maxFrameRate: UInt32 = @import("std").mem.zeroes(UInt32),
    minLineRate: UInt32 = @import("std").mem.zeroes(UInt32),
    maxLineRate: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalTotal: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalTotal: UInt32 = @import("std").mem.zeroes(UInt32),
    __reservedD: [2]UInt32 = @import("std").mem.zeroes([2]UInt32),
    charSizeHorizontalActive: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalBlanking: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalSyncOffset: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalSyncPulse: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalActive: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalBlanking: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalSyncOffset: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalSyncPulse: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalBorderLeft: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalBorderRight: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalBorderTop: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalBorderBottom: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalTotal: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalTotal: UInt8 = @import("std").mem.zeroes(UInt8),
    __reservedE: UInt16 = @import("std").mem.zeroes(UInt16),
    minHorizontalActiveClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalActiveClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalBlankingClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalBlankingClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalSyncOffsetClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalSyncOffsetClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalPulseWidthClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalPulseWidthClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalActiveClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalActiveClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalBlankingClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalBlankingClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalSyncOffsetClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalSyncOffsetClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalPulseWidthClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalPulseWidthClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalBorderLeft: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalBorderLeft: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalBorderRight: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalBorderRight: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalBorderTop: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalBorderTop: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalBorderBottom: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalBorderBottom: UInt32 = @import("std").mem.zeroes(UInt32),
    maxNumLinks: UInt32 = @import("std").mem.zeroes(UInt32),
    minLink0PixelClock: UInt32 = @import("std").mem.zeroes(UInt32),
    maxLink0PixelClock: UInt32 = @import("std").mem.zeroes(UInt32),
    minLink1PixelClock: UInt32 = @import("std").mem.zeroes(UInt32),
    maxLink1PixelClock: UInt32 = @import("std").mem.zeroes(UInt32),
    supportedPixelEncoding: UInt16 = @import("std").mem.zeroes(UInt16),
    supportedBitsPerColorComponent: UInt16 = @import("std").mem.zeroes(UInt16),
    supportedColorimetryModes: UInt16 = @import("std").mem.zeroes(UInt16),
    supportedDynamicRangeModes: UInt16 = @import("std").mem.zeroes(UInt16),
    __reservedF: [1]UInt32 = @import("std").mem.zeroes([1]UInt32),
};
pub const IODisplayTimingRangeV1 = struct_IODisplayTimingRangeV1;
pub const struct_IODisplayTimingRangeV2 = extern struct {
    __reservedA: [2]UInt32 = @import("std").mem.zeroes([2]UInt32),
    version: UInt32 = @import("std").mem.zeroes(UInt32),
    __reservedB: [5]UInt32 = @import("std").mem.zeroes([5]UInt32),
    minPixelClock: UInt64 = @import("std").mem.zeroes(UInt64),
    maxPixelClock: UInt64 = @import("std").mem.zeroes(UInt64),
    maxPixelError: UInt32 = @import("std").mem.zeroes(UInt32),
    supportedSyncFlags: UInt32 = @import("std").mem.zeroes(UInt32),
    supportedSignalLevels: UInt32 = @import("std").mem.zeroes(UInt32),
    supportedSignalConfigs: UInt32 = @import("std").mem.zeroes(UInt32),
    minFrameRate: UInt32 = @import("std").mem.zeroes(UInt32),
    maxFrameRate: UInt32 = @import("std").mem.zeroes(UInt32),
    minLineRate: UInt32 = @import("std").mem.zeroes(UInt32),
    maxLineRate: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalTotal: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalTotal: UInt32 = @import("std").mem.zeroes(UInt32),
    __reservedD: [2]UInt32 = @import("std").mem.zeroes([2]UInt32),
    charSizeHorizontalActive: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalBlanking: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalSyncOffset: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalSyncPulse: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalActive: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalBlanking: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalSyncOffset: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalSyncPulse: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalBorderLeft: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalBorderRight: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalBorderTop: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalBorderBottom: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeHorizontalTotal: UInt8 = @import("std").mem.zeroes(UInt8),
    charSizeVerticalTotal: UInt8 = @import("std").mem.zeroes(UInt8),
    __reservedE: UInt16 = @import("std").mem.zeroes(UInt16),
    minHorizontalActiveClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalActiveClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalBlankingClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalBlankingClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalSyncOffsetClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalSyncOffsetClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalPulseWidthClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalPulseWidthClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalActiveClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalActiveClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalBlankingClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalBlankingClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalSyncOffsetClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalSyncOffsetClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalPulseWidthClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalPulseWidthClocks: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalBorderLeft: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalBorderLeft: UInt32 = @import("std").mem.zeroes(UInt32),
    minHorizontalBorderRight: UInt32 = @import("std").mem.zeroes(UInt32),
    maxHorizontalBorderRight: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalBorderTop: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalBorderTop: UInt32 = @import("std").mem.zeroes(UInt32),
    minVerticalBorderBottom: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalBorderBottom: UInt32 = @import("std").mem.zeroes(UInt32),
    maxNumLinks: UInt32 = @import("std").mem.zeroes(UInt32),
    minLink0PixelClock: UInt32 = @import("std").mem.zeroes(UInt32),
    maxLink0PixelClock: UInt32 = @import("std").mem.zeroes(UInt32),
    minLink1PixelClock: UInt32 = @import("std").mem.zeroes(UInt32),
    maxLink1PixelClock: UInt32 = @import("std").mem.zeroes(UInt32),
    supportedPixelEncoding: UInt16 = @import("std").mem.zeroes(UInt16),
    supportedBitsPerColorComponent: UInt16 = @import("std").mem.zeroes(UInt16),
    supportedColorimetryModes: UInt16 = @import("std").mem.zeroes(UInt16),
    supportedDynamicRangeModes: UInt16 = @import("std").mem.zeroes(UInt16),
    __reservedF: [1]UInt32 = @import("std").mem.zeroes([1]UInt32),
    maxBandwidth: UInt64 = @import("std").mem.zeroes(UInt64),
    dscMinSliceHeight: UInt32 = @import("std").mem.zeroes(UInt32),
    dscMaxSliceHeight: UInt32 = @import("std").mem.zeroes(UInt32),
    dscMinSliceWidth: UInt32 = @import("std").mem.zeroes(UInt32),
    dscMaxSliceWidth: UInt32 = @import("std").mem.zeroes(UInt32),
    dscMinSlicePerLine: UInt32 = @import("std").mem.zeroes(UInt32),
    dscMaxSlicePerLine: UInt32 = @import("std").mem.zeroes(UInt32),
    dscMinBPC: UInt16 = @import("std").mem.zeroes(UInt16),
    dscMaxBPC: UInt16 = @import("std").mem.zeroes(UInt16),
    dscMinBPP: UInt16 = @import("std").mem.zeroes(UInt16),
    dscMaxBPP: UInt16 = @import("std").mem.zeroes(UInt16),
    dscVBR: UInt8 = @import("std").mem.zeroes(UInt8),
    dscBlockPredEnable: UInt8 = @import("std").mem.zeroes(UInt8),
    __reservedC: [6]UInt32 = @import("std").mem.zeroes([6]UInt32),
};
pub const IODisplayTimingRangeV2 = struct_IODisplayTimingRangeV2;
pub const IODisplayTimingRange = struct_IODisplayTimingRangeV2;
pub const kIOTimingRangeV2: c_int = 2;
pub const kIOTimingRangeV1: c_int = 0;
const enum_unnamed_157 = c_uint;
pub const kIORangePixelEncodingNotSupported: c_int = 0;
pub const kIORangePixelEncodingRGB444: c_int = 1;
pub const kIORangePixelEncodingYCbCr444: c_int = 2;
pub const kIORangePixelEncodingYCbCr422: c_int = 4;
pub const kIORangePixelEncodingYCbCr420: c_int = 8;
const enum_unnamed_158 = c_uint;
pub const kIORangeBitsPerColorComponentNotSupported: c_int = 0;
pub const kIORangeBitsPerColorComponent6: c_int = 1;
pub const kIORangeBitsPerColorComponent8: c_int = 2;
pub const kIORangeBitsPerColorComponent10: c_int = 4;
pub const kIORangeBitsPerColorComponent12: c_int = 8;
pub const kIORangeBitsPerColorComponent16: c_int = 16;
const enum_unnamed_159 = c_uint;
pub const kIORangeColorimetryNotSupported: c_int = 0;
pub const kIORangeColorimetryNativeRGB: c_int = 1;
pub const kIORangeColorimetrysRGB: c_int = 2;
pub const kIORangeColorimetryDCIP3: c_int = 4;
pub const kIORangeColorimetryAdobeRGB: c_int = 8;
pub const kIORangeColorimetryxvYCC: c_int = 16;
pub const kIORangeColorimetryWGRGB: c_int = 32;
pub const kIORangeColorimetryBT601: c_int = 64;
pub const kIORangeColorimetryBT709: c_int = 128;
pub const kIORangeColorimetryBT2020: c_int = 256;
pub const kIORangeColorimetryBT2100: c_int = 512;
const enum_unnamed_160 = c_uint;
pub const kIORangeDynamicRangeNotSupported: c_int = 0;
pub const kIORangeDynamicRangeSDR: c_int = 1;
pub const kIORangeDynamicRangeHDR10: c_int = 2;
pub const kIORangeDynamicRangeDolbyNormalMode: c_int = 4;
pub const kIORangeDynamicRangeDolbyTunnelMode: c_int = 8;
pub const kIORangeDynamicRangeTraditionalGammaHDR: c_int = 16;
pub const kIORangeDynamicRangeTraditionalGammaSDR: c_int = 32;
const enum_unnamed_161 = c_uint;
pub const kIORangeSupportsSignal_0700_0300: c_int = 1;
pub const kIORangeSupportsSignal_0714_0286: c_int = 2;
pub const kIORangeSupportsSignal_1000_0400: c_int = 4;
pub const kIORangeSupportsSignal_0700_0000: c_int = 8;
const enum_unnamed_162 = c_uint;
pub const kIORangeSupportsSeparateSyncs: c_int = 1;
pub const kIORangeSupportsSyncOnGreen: c_int = 2;
pub const kIORangeSupportsCompositeSync: c_int = 4;
pub const kIORangeSupportsVSyncSerration: c_int = 8;
pub const kIORangeSupportsVRR: c_int = 16;
const enum_unnamed_163 = c_uint;
pub const kIORangeSupportsInterlacedCEATiming: c_int = 4;
pub const kIORangeSupportsInterlacedCEATimingWithConfirm: c_int = 8;
pub const kIORangeSupportsMultiAlignedTiming: c_int = 64;
const enum_unnamed_164 = c_uint;
pub const kIODigitalSignal: c_int = 1;
pub const kIOAnalogSetupExpected: c_int = 2;
pub const kIOInterlacedCEATiming: c_int = 4;
pub const kIONTSCTiming: c_int = 8;
pub const kIOPALTiming: c_int = 16;
pub const kIODSCBlockPredEnable: c_int = 32;
pub const kIOMultiAlignedTiming: c_int = 64;
const enum_unnamed_165 = c_uint;
pub const kIOAnalogSignalLevel_0700_0300: c_int = 0;
pub const kIOAnalogSignalLevel_0714_0286: c_int = 1;
pub const kIOAnalogSignalLevel_1000_0400: c_int = 2;
pub const kIOAnalogSignalLevel_0700_0000: c_int = 3;
const enum_unnamed_166 = c_uint;
pub const kIOSyncPositivePolarity: c_int = 1;
const enum_unnamed_167 = c_uint;
pub const struct_IODisplayScalerInformation = extern struct {
    __reservedA: [1]UInt32 = @import("std").mem.zeroes([1]UInt32),
    version: UInt32 = @import("std").mem.zeroes(UInt32),
    __reservedB: [2]UInt32 = @import("std").mem.zeroes([2]UInt32),
    scalerFeatures: IOOptionBits = @import("std").mem.zeroes(IOOptionBits),
    maxHorizontalPixels: UInt32 = @import("std").mem.zeroes(UInt32),
    maxVerticalPixels: UInt32 = @import("std").mem.zeroes(UInt32),
    __reservedC: [5]UInt32 = @import("std").mem.zeroes([5]UInt32),
};
pub const IODisplayScalerInformation = struct_IODisplayScalerInformation;
pub const kIOScaleStretchOnly: c_int = 1;
pub const kIOScaleCanUpSamplePixels: c_int = 2;
pub const kIOScaleCanDownSamplePixels: c_int = 4;
pub const kIOScaleCanScaleInterlaced: c_int = 8;
pub const kIOScaleCanSupportInset: c_int = 16;
pub const kIOScaleCanRotate: c_int = 32;
pub const kIOScaleCanBorderInsetOnly: c_int = 64;
const enum_unnamed_168 = c_uint;
pub const kOrConnections: c_int = 268435454;
pub const kAndConnections: c_int = 268435453;
const enum_unnamed_169 = c_uint;
pub const kConnectionFlags: c_int = 1718380403;
pub const kConnectionSyncEnable: c_int = 1937337955;
pub const kConnectionSyncFlags: c_int = 1937335142;
pub const kConnectionSupportsAppleSense: c_int = 1634954867;
pub const kConnectionSupportsLLDDCSense: c_int = 1818518627;
pub const kConnectionSupportsHLDDCSense: c_int = 1751409763;
pub const kConnectionEnable: c_int = 1701732706;
pub const kConnectionCheckEnable: c_int = 1667591777;
pub const kConnectionProbe: c_int = 1886547810;
pub const kConnectionIgnore: c_int = 6907762;
pub const kConnectionChanged: c_int = 1667788391;
pub const kConnectionPower: c_int = 1886353266;
pub const kConnectionPostWake: c_int = 1886871915;
pub const kConnectionDisplayParameterCount: c_int = 1885564532;
pub const kConnectionDisplayParameters: c_int = 1885434477;
pub const kConnectionOverscan: c_int = 1869833070;
pub const kConnectionVideoBest: c_int = 1986163572;
pub const kConnectionRedGammaScale: c_int = 1919382371;
pub const kConnectionGreenGammaScale: c_int = 1734832995;
pub const kConnectionBlueGammaScale: c_int = 1650946915;
pub const kConnectionGammaScale: c_int = 1735615264;
pub const kConnectionFlushParameters: c_int = 1718383987;
pub const kConnectionVBLMultiplier: c_int = 1986161773;
pub const kConnectionHandleDisplayPortEvent: c_int = 1685088626;
pub const kConnectionPanelTimingDisable: c_int = 1886284916;
pub const kConnectionColorMode: c_int = 1668904310;
pub const kConnectionColorModesSupported: c_int = 1668246642;
pub const kConnectionColorDepthsSupported: c_int = 543322211;
pub const kConnectionControllerDepthsSupported: c_int = 6779492;
pub const kConnectionControllerColorDepth: c_int = 6582372;
pub const kConnectionControllerDitherControl: c_int = 6775907;
pub const kConnectionDisplayFlags: c_int = 1684434023;
pub const kConnectionEnableAudio: c_int = 1635083296;
pub const kConnectionAudioStreaming: c_int = 1635083379;
pub const kConnectionStartOfFrameTime: c_int = 1936680564;
const enum_unnamed_170 = c_uint;
pub const kIOConnectionBuiltIn: c_int = 2048;
pub const kIOConnectionStereoSync: c_int = 32768;
const enum_unnamed_171 = c_uint;
pub const kIOHSyncDisable: c_int = 1;
pub const kIOVSyncDisable: c_int = 2;
pub const kIOCSyncDisable: c_int = 4;
pub const kIONoSeparateSyncControl: c_int = 64;
pub const kIOTriStateSyncs: c_int = 128;
pub const kIOSyncOnBlue: c_int = 8;
pub const kIOSyncOnGreen: c_int = 16;
pub const kIOSyncOnRed: c_int = 32;
const enum_unnamed_172 = c_uint;
pub const kIODPEventStart: c_int = 1;
pub const kIODPEventIdle: c_int = 2;
pub const kIODPEventForceRetrain: c_int = 3;
pub const kIODPEventRemoteControlCommandPending: c_int = 256;
pub const kIODPEventAutomatedTestRequest: c_int = 257;
pub const kIODPEventContentProtection: c_int = 258;
pub const kIODPEventMCCS: c_int = 259;
pub const kIODPEventSinkSpecific: c_int = 260;
const enum_unnamed_173 = c_uint;
pub const kIODisplayColorMode: c_int = 1668904310;
const enum_unnamed_174 = c_uint;
pub const kIODisplayRGBColorComponentBitsUnknown: c_int = 0;
pub const kIODisplayRGBColorComponentBits6: c_int = 1;
pub const kIODisplayRGBColorComponentBits8: c_int = 2;
pub const kIODisplayRGBColorComponentBits10: c_int = 4;
pub const kIODisplayRGBColorComponentBits12: c_int = 8;
pub const kIODisplayRGBColorComponentBits14: c_int = 16;
pub const kIODisplayRGBColorComponentBits16: c_int = 32;
pub const kIODisplayYCbCr444ColorComponentBitsUnknown: c_int = 0;
pub const kIODisplayYCbCr444ColorComponentBits6: c_int = 256;
pub const kIODisplayYCbCr444ColorComponentBits8: c_int = 512;
pub const kIODisplayYCbCr444ColorComponentBits10: c_int = 1024;
pub const kIODisplayYCbCr444ColorComponentBits12: c_int = 2048;
pub const kIODisplayYCbCr444ColorComponentBits14: c_int = 4096;
pub const kIODisplayYCbCr444ColorComponentBits16: c_int = 8192;
pub const kIODisplayYCbCr422ColorComponentBitsUnknown: c_int = 0;
pub const kIODisplayYCbCr422ColorComponentBits6: c_int = 65536;
pub const kIODisplayYCbCr422ColorComponentBits8: c_int = 131072;
pub const kIODisplayYCbCr422ColorComponentBits10: c_int = 262144;
pub const kIODisplayYCbCr422ColorComponentBits12: c_int = 524288;
pub const kIODisplayYCbCr422ColorComponentBits14: c_int = 1048576;
pub const kIODisplayYCbCr422ColorComponentBits16: c_int = 2097152;
const enum_unnamed_175 = c_uint;
pub const kIODisplayDitherDisable: c_int = 0;
pub const kIODisplayDitherSpatial: c_int = 1;
pub const kIODisplayDitherTemporal: c_int = 2;
pub const kIODisplayDitherFrameRateControl: c_int = 4;
pub const kIODisplayDitherDefault: c_int = 128;
pub const kIODisplayDitherAll: c_int = 255;
pub const kIODisplayDitherRGBShift: c_int = 0;
pub const kIODisplayDitherYCbCr444Shift: c_int = 8;
pub const kIODisplayDitherYCbCr422Shift: c_int = 16;
const enum_unnamed_176 = c_uint;
pub const kIODisplayNeedsCEAUnderscan: c_int = 1;
const enum_unnamed_177 = c_uint;
pub const kIODisplayPowerStateOff: c_int = 0;
pub const kIODisplayPowerStateMinUsable: c_int = 1;
pub const kIODisplayPowerStateOn: c_int = 2;
const enum_unnamed_178 = c_uint;
pub const kIOFBServerConnectType: c_int = 0;
pub const kIOFBSharedConnectType: c_int = 1;
pub const kIOGDiagnoseGTraceType: c_int = 11452;
pub const kIOGDiagnoseConnectType: c_int = 38744;
pub const kIODisplayAssertionConnectType: c_int = 61074;
const enum_unnamed_179 = c_uint;
pub const kIOFBUserRequestProbe: c_int = 1;
const enum_unnamed_180 = c_uint;
pub const struct_IOGPoint = extern struct {
    x: SInt16 = @import("std").mem.zeroes(SInt16),
    y: SInt16 = @import("std").mem.zeroes(SInt16),
};
pub const IOGPoint = struct_IOGPoint;
pub const struct_IOGSize = extern struct {
    width: SInt16 = @import("std").mem.zeroes(SInt16),
    height: SInt16 = @import("std").mem.zeroes(SInt16),
};
pub const IOGSize = struct_IOGSize;
pub const struct_IOGBounds = extern struct {
    minx: SInt16 = @import("std").mem.zeroes(SInt16),
    maxx: SInt16 = @import("std").mem.zeroes(SInt16),
    miny: SInt16 = @import("std").mem.zeroes(SInt16),
    maxy: SInt16 = @import("std").mem.zeroes(SInt16),
};
pub const IOGBounds = struct_IOGBounds;
pub const kTransparentEncoding: c_int = 0;
pub const kInvertingEncoding: c_int = 1;
const enum_unnamed_181 = c_uint;
pub const kTransparentEncodingShift: c_int = 0;
pub const kTransparentEncodedPixel: c_int = 1;
pub const kInvertingEncodingShift: c_int = 2;
pub const kInvertingEncodedPixel: c_int = 4;
const enum_unnamed_182 = c_uint;
pub const kHardwareCursorDescriptorMajorVersion: c_int = 1;
pub const kHardwareCursorDescriptorMinorVersion: c_int = 0;
const enum_unnamed_183 = c_uint;
pub const struct_IOHardwareCursorDescriptor = extern struct {
    majorVersion: UInt16 = @import("std").mem.zeroes(UInt16),
    minorVersion: UInt16 = @import("std").mem.zeroes(UInt16),
    height: UInt32 = @import("std").mem.zeroes(UInt32),
    width: UInt32 = @import("std").mem.zeroes(UInt32),
    bitDepth: UInt32 = @import("std").mem.zeroes(UInt32),
    maskBitDepth: UInt32 = @import("std").mem.zeroes(UInt32),
    numColors: UInt32 = @import("std").mem.zeroes(UInt32),
    colorEncodings: [*c]UInt32 = @import("std").mem.zeroes([*c]UInt32),
    flags: UInt32 = @import("std").mem.zeroes(UInt32),
    supportedSpecialEncodings: UInt32 = @import("std").mem.zeroes(UInt32),
    specialEncodings: [16]UInt32 = @import("std").mem.zeroes([16]UInt32),
};
pub const IOHardwareCursorDescriptor = struct_IOHardwareCursorDescriptor;
pub const kHardwareCursorInfoMajorVersion: c_int = 1;
pub const kHardwareCursorInfoMinorVersion: c_int = 0;
const enum_unnamed_184 = c_uint;
pub const struct_IOHardwareCursorInfo = extern struct {
    majorVersion: UInt16 = @import("std").mem.zeroes(UInt16),
    minorVersion: UInt16 = @import("std").mem.zeroes(UInt16),
    cursorHeight: UInt32 = @import("std").mem.zeroes(UInt32),
    cursorWidth: UInt32 = @import("std").mem.zeroes(UInt32),
    colorMap: [*c]IOColorEntry = @import("std").mem.zeroes([*c]IOColorEntry),
    hardwareCursorData: [*c]UInt8 = @import("std").mem.zeroes([*c]UInt8),
    cursorHotSpotX: UInt16 = @import("std").mem.zeroes(UInt16),
    cursorHotSpotY: UInt16 = @import("std").mem.zeroes(UInt16),
    reserved: [5]UInt32 = @import("std").mem.zeroes([5]UInt32),
};
pub const IOHardwareCursorInfo = struct_IOHardwareCursorInfo;
pub const kIOFBVBLInterruptType: c_int = 1986161696;
pub const kIOFBHBLInterruptType: c_int = 1751280672;
pub const kIOFBFrameInterruptType: c_int = 1718772077;
pub const kIOFBConnectInterruptType: c_int = 1684236576;
pub const kIOFBChangedInterruptType: c_int = 1667788391;
pub const kIOFBOfflineInterruptType: c_int = 1919249782;
pub const kIOFBOnlineInterruptType: c_int = 1633969184;
pub const kIOFBDisplayPortInterruptType: c_int = 1685088626;
pub const kIOFBDisplayPortLinkChangeInterruptType: c_int = 1685089387;
pub const kIOFBMCCSInterruptType: c_int = 1835230067;
pub const kIOFBWakeInterruptType: c_int = 1987535211;
const enum_unnamed_185 = c_uint;
pub const kIOTimingIDInvalid: c_int = 0;
pub const kIOTimingIDApple_FixedRateLCD: c_int = 42;
pub const kIOTimingIDApple_512x384_60hz: c_int = 130;
pub const kIOTimingIDApple_560x384_60hz: c_int = 135;
pub const kIOTimingIDApple_640x480_67hz: c_int = 140;
pub const kIOTimingIDApple_640x400_67hz: c_int = 145;
pub const kIOTimingIDVESA_640x480_60hz: c_int = 150;
pub const kIOTimingIDVESA_640x480_72hz: c_int = 152;
pub const kIOTimingIDVESA_640x480_75hz: c_int = 154;
pub const kIOTimingIDVESA_640x480_85hz: c_int = 158;
pub const kIOTimingIDGTF_640x480_120hz: c_int = 159;
pub const kIOTimingIDApple_640x870_75hz: c_int = 160;
pub const kIOTimingIDApple_640x818_75hz: c_int = 165;
pub const kIOTimingIDApple_832x624_75hz: c_int = 170;
pub const kIOTimingIDVESA_800x600_56hz: c_int = 180;
pub const kIOTimingIDVESA_800x600_60hz: c_int = 182;
pub const kIOTimingIDVESA_800x600_72hz: c_int = 184;
pub const kIOTimingIDVESA_800x600_75hz: c_int = 186;
pub const kIOTimingIDVESA_800x600_85hz: c_int = 188;
pub const kIOTimingIDVESA_1024x768_60hz: c_int = 190;
pub const kIOTimingIDVESA_1024x768_70hz: c_int = 200;
pub const kIOTimingIDVESA_1024x768_75hz: c_int = 204;
pub const kIOTimingIDVESA_1024x768_85hz: c_int = 208;
pub const kIOTimingIDApple_1024x768_75hz: c_int = 210;
pub const kIOTimingIDVESA_1152x864_75hz: c_int = 215;
pub const kIOTimingIDApple_1152x870_75hz: c_int = 220;
pub const kIOTimingIDAppleNTSC_ST: c_int = 230;
pub const kIOTimingIDAppleNTSC_FF: c_int = 232;
pub const kIOTimingIDAppleNTSC_STconv: c_int = 234;
pub const kIOTimingIDAppleNTSC_FFconv: c_int = 236;
pub const kIOTimingIDApplePAL_ST: c_int = 238;
pub const kIOTimingIDApplePAL_FF: c_int = 240;
pub const kIOTimingIDApplePAL_STconv: c_int = 242;
pub const kIOTimingIDApplePAL_FFconv: c_int = 244;
pub const kIOTimingIDVESA_1280x960_75hz: c_int = 250;
pub const kIOTimingIDVESA_1280x960_60hz: c_int = 252;
pub const kIOTimingIDVESA_1280x960_85hz: c_int = 254;
pub const kIOTimingIDVESA_1280x1024_60hz: c_int = 260;
pub const kIOTimingIDVESA_1280x1024_75hz: c_int = 262;
pub const kIOTimingIDVESA_1280x1024_85hz: c_int = 268;
pub const kIOTimingIDVESA_1600x1200_60hz: c_int = 280;
pub const kIOTimingIDVESA_1600x1200_65hz: c_int = 282;
pub const kIOTimingIDVESA_1600x1200_70hz: c_int = 284;
pub const kIOTimingIDVESA_1600x1200_75hz: c_int = 286;
pub const kIOTimingIDVESA_1600x1200_80hz: c_int = 288;
pub const kIOTimingIDVESA_1600x1200_85hz: c_int = 289;
pub const kIOTimingIDVESA_1792x1344_60hz: c_int = 296;
pub const kIOTimingIDVESA_1792x1344_75hz: c_int = 298;
pub const kIOTimingIDVESA_1856x1392_60hz: c_int = 300;
pub const kIOTimingIDVESA_1856x1392_75hz: c_int = 302;
pub const kIOTimingIDVESA_1920x1440_60hz: c_int = 304;
pub const kIOTimingIDVESA_1920x1440_75hz: c_int = 306;
pub const kIOTimingIDSMPTE240M_60hz: c_int = 400;
pub const kIOTimingIDFilmRate_48hz: c_int = 410;
pub const kIOTimingIDSony_1600x1024_76hz: c_int = 500;
pub const kIOTimingIDSony_1920x1080_60hz: c_int = 510;
pub const kIOTimingIDSony_1920x1080_72hz: c_int = 520;
pub const kIOTimingIDSony_1920x1200_76hz: c_int = 540;
pub const kIOTimingIDApple_0x0_0hz_Offline: c_int = 550;
pub const kIOTimingIDVESA_848x480_60hz: c_int = 570;
pub const kIOTimingIDVESA_1360x768_60hz: c_int = 590;
const enum_unnamed_186 = c_uint;
pub const kIOHibernatePreviewActive: c_int = 1;
pub const kIOHibernatePreviewUpdates: c_int = 2;
const enum_unnamed_187 = c_uint;
pub const kIOFBAVSignalTypeUnknown: c_int = 0;
pub const kIOFBAVSignalTypeVGA: c_int = 1;
pub const kIOFBAVSignalTypeDVI: c_int = 2;
pub const kIOFBAVSignalTypeHDMI: c_int = 8;
pub const kIOFBAVSignalTypeDP: c_int = 16;
const enum_unnamed_188 = c_uint;
pub const struct_IOFBDPLinkConfig = extern struct {
    version: u16 = @import("std").mem.zeroes(u16),
    bitRate: u8 = @import("std").mem.zeroes(u8),
    __reservedA: [1]u8 = @import("std").mem.zeroes([1]u8),
    t1Time: u16 = @import("std").mem.zeroes(u16),
    t2Time: u16 = @import("std").mem.zeroes(u16),
    t3Time: u16 = @import("std").mem.zeroes(u16),
    idlePatterns: u8 = @import("std").mem.zeroes(u8),
    laneCount: u8 = @import("std").mem.zeroes(u8),
    voltage: u8 = @import("std").mem.zeroes(u8),
    preEmphasis: u8 = @import("std").mem.zeroes(u8),
    downspread: u8 = @import("std").mem.zeroes(u8),
    scrambler: u8 = @import("std").mem.zeroes(u8),
    maxBitRate: u8 = @import("std").mem.zeroes(u8),
    maxLaneCount: u8 = @import("std").mem.zeroes(u8),
    maxDownspread: u8 = @import("std").mem.zeroes(u8),
    __reservedB: [9]u8 = @import("std").mem.zeroes([9]u8),
};
pub const IOFBDPLinkConfig = struct_IOFBDPLinkConfig;
pub const kIOFBBitRateRBR: c_int = 6;
pub const kIOFBBitRateHBR: c_int = 10;
pub const kIOFBBitRateHBR2: c_int = 20;
const enum_unnamed_189 = c_uint;
pub const kIOFBLinkVoltageLevel0: c_int = 0;
pub const kIOFBLinkVoltageLevel1: c_int = 1;
pub const kIOFBLinkVoltageLevel2: c_int = 2;
pub const kIOFBLinkVoltageLevel3: c_int = 3;
const enum_unnamed_190 = c_uint;
pub const kIOFBLinkPreEmphasisLevel0: c_int = 0;
pub const kIOFBLinkPreEmphasisLevel1: c_int = 1;
pub const kIOFBLinkPreEmphasisLevel2: c_int = 2;
pub const kIOFBLinkPreEmphasisLevel3: c_int = 3;
const enum_unnamed_191 = c_uint;
pub const kIOFBLinkDownspreadNone: c_int = 0;
pub const kIOFBLinkDownspreadMax: c_int = 1;
const enum_unnamed_192 = c_uint;
pub const kIOFBLinkScramblerNormal: c_int = 0;
pub const kIOFBLinkScramblerAlternate: c_int = 1;
const enum_unnamed_193 = c_uint;
pub const kDisplayVendorIDUnknown: c_int = 1970170734;
pub const kDisplayProductIDGeneric: c_int = 1815;
const enum_unnamed_194 = c_uint;
pub const kDisplaySubPixelLayoutUndefined: c_int = 0;
pub const kDisplaySubPixelLayoutRGB: c_int = 1;
pub const kDisplaySubPixelLayoutBGR: c_int = 2;
pub const kDisplaySubPixelLayoutQuadGBL: c_int = 3;
pub const kDisplaySubPixelLayoutQuadGBR: c_int = 4;
pub const kDisplaySubPixelConfigurationUndefined: c_int = 0;
pub const kDisplaySubPixelConfigurationDelta: c_int = 1;
pub const kDisplaySubPixelConfigurationStripe: c_int = 2;
pub const kDisplaySubPixelConfigurationStripeOffset: c_int = 3;
pub const kDisplaySubPixelConfigurationQuad: c_int = 4;
pub const kDisplaySubPixelShapeUndefined: c_int = 0;
pub const kDisplaySubPixelShapeRound: c_int = 1;
pub const kDisplaySubPixelShapeSquare: c_int = 2;
pub const kDisplaySubPixelShapeRectangular: c_int = 3;
pub const kDisplaySubPixelShapeOval: c_int = 4;
pub const kDisplaySubPixelShapeElliptical: c_int = 5;
const enum_unnamed_195 = c_uint;
pub const struct_evsioKeymapping = extern struct {
    size: c_int = @import("std").mem.zeroes(c_int),
    mapping: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const NXKeyMapping = struct_evsioKeymapping;
pub const struct_evsioMouseScaling = extern struct {
    numScaleLevels: c_int = @import("std").mem.zeroes(c_int),
    scaleThresholds: [20]c_short = @import("std").mem.zeroes([20]c_short),
    scaleFactors: [20]c_short = @import("std").mem.zeroes([20]c_short),
};
pub const NXMouseScaling = struct_evsioMouseScaling;
pub const NX_OneButton: c_int = 0;
pub const NX_LeftButton: c_int = 1;
pub const NX_RightButton: c_int = 2;
pub const NXMouseButton = c_uint;
pub const struct___IOFixedPoint32 = extern struct {
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
};
pub const IOFixedPoint32 = struct___IOFixedPoint32;
pub const NXEventSystemInfoType = [*c]c_int;
pub const NXEventSystemInfoData = [1024]c_int;
pub const NXEventSystemDevice = extern struct {
    interface: c_int = @import("std").mem.zeroes(c_int),
    interface_addr: c_int = @import("std").mem.zeroes(c_int),
    dev_type: c_int = @import("std").mem.zeroes(c_int),
    id: c_int = @import("std").mem.zeroes(c_int),
};
pub const NXEventSystemDeviceList = extern struct {
    dev: [16]NXEventSystemDevice = @import("std").mem.zeroes([16]NXEventSystemDevice),
};
pub const EVNOP: c_int = 0;
pub const EVHIDE: c_int = 1;
pub const EVSHOW: c_int = 2;
pub const EVMOVE: c_int = 3;
pub const EVLEVEL: c_int = 4;
pub const EvCmd = c_uint;
pub const NXCoord = f32;
pub const struct__NXPoint = extern struct {
    x: NXCoord = @import("std").mem.zeroes(NXCoord),
    y: NXCoord = @import("std").mem.zeroes(NXCoord),
};
pub const NXPoint = struct__NXPoint;
pub const struct__NXSize = extern struct {
    width: NXCoord = @import("std").mem.zeroes(NXCoord),
    height: NXCoord = @import("std").mem.zeroes(NXCoord),
};
pub const NXSize = struct__NXSize;
const struct_unnamed_196 = extern struct {
    x: SInt16 = @import("std").mem.zeroes(SInt16),
    y: SInt16 = @import("std").mem.zeroes(SInt16),
};
pub const struct__NXTabletPointData = extern struct {
    x: SInt32 = @import("std").mem.zeroes(SInt32),
    y: SInt32 = @import("std").mem.zeroes(SInt32),
    z: SInt32 = @import("std").mem.zeroes(SInt32),
    buttons: UInt16 = @import("std").mem.zeroes(UInt16),
    pressure: UInt16 = @import("std").mem.zeroes(UInt16),
    tilt: struct_unnamed_196 = @import("std").mem.zeroes(struct_unnamed_196),
    rotation: UInt16 = @import("std").mem.zeroes(UInt16),
    tangentialPressure: SInt16 = @import("std").mem.zeroes(SInt16),
    deviceID: UInt16 = @import("std").mem.zeroes(UInt16),
    vendor1: SInt16 = @import("std").mem.zeroes(SInt16),
    vendor2: SInt16 = @import("std").mem.zeroes(SInt16),
    vendor3: SInt16 = @import("std").mem.zeroes(SInt16),
};
pub const NXTabletPointData = struct__NXTabletPointData;
pub const NXTabletPointDataPtr = [*c]struct__NXTabletPointData;
pub const struct__NXTabletProximityData = extern struct {
    vendorID: UInt16 = @import("std").mem.zeroes(UInt16),
    tabletID: UInt16 = @import("std").mem.zeroes(UInt16),
    pointerID: UInt16 = @import("std").mem.zeroes(UInt16),
    deviceID: UInt16 = @import("std").mem.zeroes(UInt16),
    systemTabletID: UInt16 = @import("std").mem.zeroes(UInt16),
    vendorPointerType: UInt16 = @import("std").mem.zeroes(UInt16),
    pointerSerialNumber: UInt32 = @import("std").mem.zeroes(UInt32),
    uniqueID: UInt64 align(1) = @import("std").mem.zeroes(UInt64),
    capabilityMask: UInt32 = @import("std").mem.zeroes(UInt32),
    pointerType: UInt8 = @import("std").mem.zeroes(UInt8),
    enterProximity: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved1: SInt16 = @import("std").mem.zeroes(SInt16),
};
pub const NXTabletProximityData = struct__NXTabletProximityData;
pub const NXTabletProximityDataPtr = [*c]struct__NXTabletProximityData;
const union_unnamed_198 = extern union {
    point: NXTabletPointData,
    proximity: NXTabletProximityData,
};
const struct_unnamed_197 = extern struct {
    subx: UInt8 = @import("std").mem.zeroes(UInt8),
    suby: UInt8 = @import("std").mem.zeroes(UInt8),
    eventNum: SInt16 = @import("std").mem.zeroes(SInt16),
    click: SInt32 = @import("std").mem.zeroes(SInt32),
    pressure: UInt8 = @import("std").mem.zeroes(UInt8),
    buttonNumber: UInt8 = @import("std").mem.zeroes(UInt8),
    subType: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved2: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved3: SInt32 = @import("std").mem.zeroes(SInt32),
    tablet: union_unnamed_198 = @import("std").mem.zeroes(union_unnamed_198),
};
const union_unnamed_200 = extern union {
    point: NXTabletPointData,
    proximity: NXTabletProximityData,
};
const struct_unnamed_199 = extern struct {
    dx: SInt32 = @import("std").mem.zeroes(SInt32),
    dy: SInt32 = @import("std").mem.zeroes(SInt32),
    subx: UInt8 = @import("std").mem.zeroes(UInt8),
    suby: UInt8 = @import("std").mem.zeroes(UInt8),
    subType: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved1: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved2: SInt32 = @import("std").mem.zeroes(SInt32),
    tablet: union_unnamed_200 = @import("std").mem.zeroes(union_unnamed_200),
};
const struct_unnamed_201 = extern struct {
    origCharSet: UInt16 = @import("std").mem.zeroes(UInt16),
    repeat: SInt16 = @import("std").mem.zeroes(SInt16),
    charSet: UInt16 = @import("std").mem.zeroes(UInt16),
    charCode: UInt16 = @import("std").mem.zeroes(UInt16),
    keyCode: UInt16 = @import("std").mem.zeroes(UInt16),
    origCharCode: UInt16 = @import("std").mem.zeroes(UInt16),
    reserved1: SInt32 = @import("std").mem.zeroes(SInt32),
    keyboardType: UInt32 = @import("std").mem.zeroes(UInt32),
    reserved2: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved3: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved4: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved5: [4]SInt32 = @import("std").mem.zeroes([4]SInt32),
};
const struct_unnamed_202 = extern struct {
    reserved: SInt16 = @import("std").mem.zeroes(SInt16),
    eventNum: SInt16 = @import("std").mem.zeroes(SInt16),
    trackingNum: SInt32 = @import("std").mem.zeroes(SInt32),
    userData: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved1: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved2: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved3: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved4: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved5: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved6: [4]SInt32 = @import("std").mem.zeroes([4]SInt32),
};
const struct_unnamed_203 = extern struct {
    deltaAxis1: SInt16 = @import("std").mem.zeroes(SInt16),
    deltaAxis2: SInt16 = @import("std").mem.zeroes(SInt16),
    deltaAxis3: SInt16 = @import("std").mem.zeroes(SInt16),
    reserved1: SInt16 = @import("std").mem.zeroes(SInt16),
    fixedDeltaAxis1: SInt32 = @import("std").mem.zeroes(SInt32),
    fixedDeltaAxis2: SInt32 = @import("std").mem.zeroes(SInt32),
    fixedDeltaAxis3: SInt32 = @import("std").mem.zeroes(SInt32),
    pointDeltaAxis1: SInt32 = @import("std").mem.zeroes(SInt32),
    pointDeltaAxis2: SInt32 = @import("std").mem.zeroes(SInt32),
    pointDeltaAxis3: SInt32 = @import("std").mem.zeroes(SInt32),
    reserved8: [4]SInt32 = @import("std").mem.zeroes([4]SInt32),
};
const union_unnamed_205 = extern union {
    F: [11]f32,
    L: [11]SInt32,
    S: [22]SInt16,
    C: [44]u8,
};
const struct_unnamed_204 = extern struct {
    reserved: SInt16 = @import("std").mem.zeroes(SInt16),
    subType: SInt16 = @import("std").mem.zeroes(SInt16),
    misc: union_unnamed_205 = @import("std").mem.zeroes(union_unnamed_205),
};
const struct_unnamed_207 = extern struct {
    x: SInt16 = @import("std").mem.zeroes(SInt16),
    y: SInt16 = @import("std").mem.zeroes(SInt16),
};
const struct_unnamed_206 = extern struct {
    x: SInt32 = @import("std").mem.zeroes(SInt32),
    y: SInt32 = @import("std").mem.zeroes(SInt32),
    z: SInt32 = @import("std").mem.zeroes(SInt32),
    buttons: UInt16 = @import("std").mem.zeroes(UInt16),
    pressure: UInt16 = @import("std").mem.zeroes(UInt16),
    tilt: struct_unnamed_207 = @import("std").mem.zeroes(struct_unnamed_207),
    rotation: UInt16 = @import("std").mem.zeroes(UInt16),
    tangentialPressure: SInt16 = @import("std").mem.zeroes(SInt16),
    deviceID: UInt16 = @import("std").mem.zeroes(UInt16),
    vendor1: SInt16 = @import("std").mem.zeroes(SInt16),
    vendor2: SInt16 = @import("std").mem.zeroes(SInt16),
    vendor3: SInt16 = @import("std").mem.zeroes(SInt16),
    reserved: [4]SInt32 = @import("std").mem.zeroes([4]SInt32),
};
const struct_unnamed_208 = extern struct {
    vendorID: UInt16 = @import("std").mem.zeroes(UInt16),
    tabletID: UInt16 = @import("std").mem.zeroes(UInt16),
    pointerID: UInt16 = @import("std").mem.zeroes(UInt16),
    deviceID: UInt16 = @import("std").mem.zeroes(UInt16),
    systemTabletID: UInt16 = @import("std").mem.zeroes(UInt16),
    vendorPointerType: UInt16 = @import("std").mem.zeroes(UInt16),
    pointerSerialNumber: UInt32 = @import("std").mem.zeroes(UInt32),
    uniqueID: UInt64 align(1) = @import("std").mem.zeroes(UInt64),
    capabilityMask: UInt32 = @import("std").mem.zeroes(UInt32),
    pointerType: UInt8 = @import("std").mem.zeroes(UInt8),
    enterProximity: UInt8 = @import("std").mem.zeroes(UInt8),
    reserved1: SInt16 = @import("std").mem.zeroes(SInt16),
    reserved2: [4]SInt32 = @import("std").mem.zeroes([4]SInt32),
};
pub const NXEventData = extern union {
    mouse: struct_unnamed_197,
    mouseMove: struct_unnamed_199,
    key: struct_unnamed_201,
    tracking: struct_unnamed_202,
    scrollWheel: struct_unnamed_203,
    zoom: struct_unnamed_203,
    compound: struct_unnamed_204,
    tablet: struct_unnamed_206,
    proximity: struct_unnamed_208,
};
const struct_unnamed_209 = extern struct {
    x: SInt32 = @import("std").mem.zeroes(SInt32),
    y: SInt32 = @import("std").mem.zeroes(SInt32),
};
pub const struct__NXEvent = extern struct {
    type: SInt32 = @import("std").mem.zeroes(SInt32),
    location: struct_unnamed_209 = @import("std").mem.zeroes(struct_unnamed_209),
    time: UInt64 align(1) = @import("std").mem.zeroes(UInt64),
    flags: SInt32 = @import("std").mem.zeroes(SInt32),
    window: UInt32 = @import("std").mem.zeroes(UInt32),
    service_id: UInt64 align(1) = @import("std").mem.zeroes(UInt64),
    ext_pid: SInt32 = @import("std").mem.zeroes(SInt32),
    data: NXEventData = @import("std").mem.zeroes(NXEventData),
};
pub const NXEvent = struct__NXEvent;
pub const NXEventPtr = [*c]struct__NXEvent;
pub const struct__NXEventExtension = extern struct {
    flags: UInt32 = @import("std").mem.zeroes(UInt32),
    audit: audit_token_t = @import("std").mem.zeroes(audit_token_t),
};
pub const NXEventExtension = struct__NXEventExtension;
pub const struct__NXEventExt = extern struct {
    payload: NXEvent = @import("std").mem.zeroes(NXEvent),
    extension: NXEventExtension = @import("std").mem.zeroes(NXEventExtension),
};
pub const NXEventExt = struct__NXEventExt;
pub const struct___CGEvent = opaque {};
pub const CGEventRef = ?*struct___CGEvent;
pub const CGMouseButton = u32;
pub const kCGMouseButtonLeft: c_int = 0;
pub const kCGMouseButtonRight: c_int = 1;
pub const kCGMouseButtonCenter: c_int = 2;
const enum_unnamed_210 = c_uint;
pub const CGScrollEventUnit = u32;
pub const kCGScrollEventUnitPixel: c_int = 0;
pub const kCGScrollEventUnitLine: c_int = 1;
const enum_unnamed_211 = c_uint;
pub const CGMomentumScrollPhase = u32;
pub const kCGMomentumScrollPhaseNone: c_int = 0;
pub const kCGMomentumScrollPhaseBegin: c_int = 1;
pub const kCGMomentumScrollPhaseContinue: c_int = 2;
pub const kCGMomentumScrollPhaseEnd: c_int = 3;
const enum_unnamed_212 = c_uint;
pub const CGScrollPhase = u32;
pub const kCGScrollPhaseBegan: c_int = 1;
pub const kCGScrollPhaseChanged: c_int = 2;
pub const kCGScrollPhaseEnded: c_int = 4;
pub const kCGScrollPhaseCancelled: c_int = 8;
pub const kCGScrollPhaseMayBegin: c_int = 128;
const enum_unnamed_213 = c_uint;
pub const CGGesturePhase = u32;
pub const kCGGesturePhaseNone: c_int = 0;
pub const kCGGesturePhaseBegan: c_int = 1;
pub const kCGGesturePhaseChanged: c_int = 2;
pub const kCGGesturePhaseEnded: c_int = 4;
pub const kCGGesturePhaseCancelled: c_int = 8;
pub const kCGGesturePhaseMayBegin: c_int = 128;
const enum_unnamed_214 = c_uint;
pub const CGEventFlags = u64;
pub const kCGEventFlagMaskAlphaShift: c_int = 65536;
pub const kCGEventFlagMaskShift: c_int = 131072;
pub const kCGEventFlagMaskControl: c_int = 262144;
pub const kCGEventFlagMaskAlternate: c_int = 524288;
pub const kCGEventFlagMaskCommand: c_int = 1048576;
pub const kCGEventFlagMaskHelp: c_int = 4194304;
pub const kCGEventFlagMaskSecondaryFn: c_int = 8388608;
pub const kCGEventFlagMaskNumericPad: c_int = 2097152;
pub const kCGEventFlagMaskNonCoalesced: c_int = 256;
const enum_unnamed_215 = c_uint;
pub const CGEventType = u32;
pub const kCGEventNull: c_int = 0;
pub const kCGEventLeftMouseDown: c_int = 1;
pub const kCGEventLeftMouseUp: c_int = 2;
pub const kCGEventRightMouseDown: c_int = 3;
pub const kCGEventRightMouseUp: c_int = 4;
pub const kCGEventMouseMoved: c_int = 5;
pub const kCGEventLeftMouseDragged: c_int = 6;
pub const kCGEventRightMouseDragged: c_int = 7;
pub const kCGEventKeyDown: c_int = 10;
pub const kCGEventKeyUp: c_int = 11;
pub const kCGEventFlagsChanged: c_int = 12;
pub const kCGEventScrollWheel: c_int = 22;
pub const kCGEventTabletPointer: c_int = 23;
pub const kCGEventTabletProximity: c_int = 24;
pub const kCGEventOtherMouseDown: c_int = 25;
pub const kCGEventOtherMouseUp: c_int = 26;
pub const kCGEventOtherMouseDragged: c_int = 27;
pub const kCGEventTapDisabledByTimeout: c_uint = 4294967294;
pub const kCGEventTapDisabledByUserInput: c_uint = 4294967295;
const enum_unnamed_216 = c_uint;
pub const CGEventTimestamp = u64;
pub const CGEventField = u32;
pub const kCGMouseEventNumber: c_int = 0;
pub const kCGMouseEventClickState: c_int = 1;
pub const kCGMouseEventPressure: c_int = 2;
pub const kCGMouseEventButtonNumber: c_int = 3;
pub const kCGMouseEventDeltaX: c_int = 4;
pub const kCGMouseEventDeltaY: c_int = 5;
pub const kCGMouseEventInstantMouser: c_int = 6;
pub const kCGMouseEventSubtype: c_int = 7;
pub const kCGKeyboardEventAutorepeat: c_int = 8;
pub const kCGKeyboardEventKeycode: c_int = 9;
pub const kCGKeyboardEventKeyboardType: c_int = 10;
pub const kCGScrollWheelEventDeltaAxis1: c_int = 11;
pub const kCGScrollWheelEventDeltaAxis2: c_int = 12;
pub const kCGScrollWheelEventDeltaAxis3: c_int = 13;
pub const kCGScrollWheelEventFixedPtDeltaAxis1: c_int = 93;
pub const kCGScrollWheelEventFixedPtDeltaAxis2: c_int = 94;
pub const kCGScrollWheelEventFixedPtDeltaAxis3: c_int = 95;
pub const kCGScrollWheelEventPointDeltaAxis1: c_int = 96;
pub const kCGScrollWheelEventPointDeltaAxis2: c_int = 97;
pub const kCGScrollWheelEventPointDeltaAxis3: c_int = 98;
pub const kCGScrollWheelEventScrollPhase: c_int = 99;
pub const kCGScrollWheelEventScrollCount: c_int = 100;
pub const kCGScrollWheelEventMomentumPhase: c_int = 123;
pub const kCGScrollWheelEventInstantMouser: c_int = 14;
pub const kCGTabletEventPointX: c_int = 15;
pub const kCGTabletEventPointY: c_int = 16;
pub const kCGTabletEventPointZ: c_int = 17;
pub const kCGTabletEventPointButtons: c_int = 18;
pub const kCGTabletEventPointPressure: c_int = 19;
pub const kCGTabletEventTiltX: c_int = 20;
pub const kCGTabletEventTiltY: c_int = 21;
pub const kCGTabletEventRotation: c_int = 22;
pub const kCGTabletEventTangentialPressure: c_int = 23;
pub const kCGTabletEventDeviceID: c_int = 24;
pub const kCGTabletEventVendor1: c_int = 25;
pub const kCGTabletEventVendor2: c_int = 26;
pub const kCGTabletEventVendor3: c_int = 27;
pub const kCGTabletProximityEventVendorID: c_int = 28;
pub const kCGTabletProximityEventTabletID: c_int = 29;
pub const kCGTabletProximityEventPointerID: c_int = 30;
pub const kCGTabletProximityEventDeviceID: c_int = 31;
pub const kCGTabletProximityEventSystemTabletID: c_int = 32;
pub const kCGTabletProximityEventVendorPointerType: c_int = 33;
pub const kCGTabletProximityEventVendorPointerSerialNumber: c_int = 34;
pub const kCGTabletProximityEventVendorUniqueID: c_int = 35;
pub const kCGTabletProximityEventCapabilityMask: c_int = 36;
pub const kCGTabletProximityEventPointerType: c_int = 37;
pub const kCGTabletProximityEventEnterProximity: c_int = 38;
pub const kCGEventTargetProcessSerialNumber: c_int = 39;
pub const kCGEventTargetUnixProcessID: c_int = 40;
pub const kCGEventSourceUnixProcessID: c_int = 41;
pub const kCGEventSourceUserData: c_int = 42;
pub const kCGEventSourceUserID: c_int = 43;
pub const kCGEventSourceGroupID: c_int = 44;
pub const kCGEventSourceStateID: c_int = 45;
pub const kCGScrollWheelEventIsContinuous: c_int = 88;
pub const kCGMouseEventWindowUnderMousePointer: c_int = 91;
pub const kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent: c_int = 92;
pub const kCGEventUnacceleratedPointerMovementX: c_int = 170;
pub const kCGEventUnacceleratedPointerMovementY: c_int = 171;
const enum_unnamed_217 = c_uint;
pub const CGEventMouseSubtype = u32;
pub const kCGEventMouseSubtypeDefault: c_int = 0;
pub const kCGEventMouseSubtypeTabletPoint: c_int = 1;
pub const kCGEventMouseSubtypeTabletProximity: c_int = 2;
const enum_unnamed_218 = c_uint;
pub const CGEventTapLocation = u32;
pub const kCGHIDEventTap: c_int = 0;
pub const kCGSessionEventTap: c_int = 1;
pub const kCGAnnotatedSessionEventTap: c_int = 2;
const enum_unnamed_219 = c_uint;
pub const CGEventTapPlacement = u32;
pub const kCGHeadInsertEventTap: c_int = 0;
pub const kCGTailAppendEventTap: c_int = 1;
const enum_unnamed_220 = c_uint;
pub const CGEventTapOptions = u32;
pub const kCGEventTapOptionDefault: c_int = 0;
pub const kCGEventTapOptionListenOnly: c_int = 1;
const enum_unnamed_221 = c_uint;
pub const CGEventMask = u64;
pub const struct___CGEventTapProxy = opaque {};
pub const CGEventTapProxy = ?*struct___CGEventTapProxy;
pub const CGEventTapCallBack = ?*const fn (CGEventTapProxy, CGEventType, CGEventRef, ?*anyopaque) callconv(.C) CGEventRef;
pub const struct___CGEventTapInformation = extern struct {
    eventTapID: u32 = @import("std").mem.zeroes(u32),
    tapPoint: CGEventTapLocation = @import("std").mem.zeroes(CGEventTapLocation),
    options: CGEventTapOptions = @import("std").mem.zeroes(CGEventTapOptions),
    eventsOfInterest: CGEventMask = @import("std").mem.zeroes(CGEventMask),
    tappingProcess: pid_t = @import("std").mem.zeroes(pid_t),
    processBeingTapped: pid_t = @import("std").mem.zeroes(pid_t),
    enabled: bool = @import("std").mem.zeroes(bool),
    minUsecLatency: f32 = @import("std").mem.zeroes(f32),
    avgUsecLatency: f32 = @import("std").mem.zeroes(f32),
    maxUsecLatency: f32 = @import("std").mem.zeroes(f32),
};
pub const CGEventTapInformation = struct___CGEventTapInformation;
pub const struct___CGEventSource = opaque {};
pub const CGEventSourceRef = ?*struct___CGEventSource;
pub const CGEventSourceStateID = i32;
pub const kCGEventSourceStatePrivate: c_int = -1;
pub const kCGEventSourceStateCombinedSessionState: c_int = 0;
pub const kCGEventSourceStateHIDSystemState: c_int = 1;
const enum_unnamed_222 = c_int;
pub const CGEventSourceKeyboardType = u32;
pub extern fn CGEventGetTypeID() CFTypeID;
pub extern fn CGEventCreate(source: CGEventSourceRef) CGEventRef;
pub extern fn CGEventCreateData(allocator: CFAllocatorRef, event: CGEventRef) CFDataRef;
pub extern fn CGEventCreateFromData(allocator: CFAllocatorRef, data: CFDataRef) CGEventRef;
pub extern fn CGEventCreateMouseEvent(source: CGEventSourceRef, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton) CGEventRef;
pub extern fn CGEventCreateKeyboardEvent(source: CGEventSourceRef, virtualKey: CGKeyCode, keyDown: bool) CGEventRef;
pub extern fn CGEventCreateScrollWheelEvent(source: CGEventSourceRef, units: CGScrollEventUnit, wheelCount: u32, wheel1: i32, ...) CGEventRef;
pub extern fn CGEventCreateScrollWheelEvent2(source: CGEventSourceRef, units: CGScrollEventUnit, wheelCount: u32, wheel1: i32, wheel2: i32, wheel3: i32) CGEventRef;
pub extern fn CGEventCreateCopy(event: CGEventRef) CGEventRef;
pub extern fn CGEventCreateSourceFromEvent(event: CGEventRef) CGEventSourceRef;
pub extern fn CGEventSetSource(event: CGEventRef, source: CGEventSourceRef) void;
pub extern fn CGEventGetType(event: CGEventRef) CGEventType;
pub extern fn CGEventSetType(event: CGEventRef, @"type": CGEventType) void;
pub extern fn CGEventGetTimestamp(event: CGEventRef) CGEventTimestamp;
pub extern fn CGEventSetTimestamp(event: CGEventRef, timestamp: CGEventTimestamp) void;
pub extern fn CGEventGetLocation(event: CGEventRef) CGPoint;
pub extern fn CGEventGetUnflippedLocation(event: CGEventRef) CGPoint;
pub extern fn CGEventSetLocation(event: CGEventRef, location: CGPoint) void;
pub extern fn CGEventGetFlags(event: CGEventRef) CGEventFlags;
pub extern fn CGEventSetFlags(event: CGEventRef, flags: CGEventFlags) void;
pub extern fn CGEventKeyboardGetUnicodeString(event: CGEventRef, maxStringLength: UniCharCount, actualStringLength: [*c]UniCharCount, unicodeString: [*c]UniChar) void;
pub extern fn CGEventKeyboardSetUnicodeString(event: CGEventRef, stringLength: UniCharCount, unicodeString: [*c]const UniChar) void;
pub extern fn CGEventGetIntegerValueField(event: CGEventRef, field: CGEventField) i64;
pub extern fn CGEventSetIntegerValueField(event: CGEventRef, field: CGEventField, value: i64) void;
pub extern fn CGEventGetDoubleValueField(event: CGEventRef, field: CGEventField) f64;
pub extern fn CGEventSetDoubleValueField(event: CGEventRef, field: CGEventField, value: f64) void;
pub extern fn CGEventTapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: ?*anyopaque) CFMachPortRef;
pub extern fn CGEventTapCreateForPSN(processSerialNumber: ?*anyopaque, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: ?*anyopaque) CFMachPortRef;
pub extern fn CGEventTapCreateForPid(pid: pid_t, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: ?*anyopaque) CFMachPortRef;
pub extern fn CGEventTapEnable(tap: CFMachPortRef, enable: bool) void;
pub extern fn CGEventTapIsEnabled(tap: CFMachPortRef) bool;
pub extern fn CGEventTapPostEvent(proxy: CGEventTapProxy, event: CGEventRef) void;
pub extern fn CGEventPost(tap: CGEventTapLocation, event: CGEventRef) void;
pub extern fn CGEventPostToPSN(processSerialNumber: ?*anyopaque, event: CGEventRef) void;
pub extern fn CGEventPostToPid(pid: pid_t, event: CGEventRef) void;
pub extern fn CGGetEventTapList(maxNumberOfTaps: u32, tapList: [*c]CGEventTapInformation, eventTapCount: [*c]u32) CGError;
pub extern fn CGPreflightListenEventAccess() bool;
pub extern fn CGRequestListenEventAccess() bool;
pub extern fn CGPreflightPostEventAccess() bool;
pub extern fn CGRequestPostEventAccess() bool;
pub extern fn CGEventSourceGetTypeID() CFTypeID;
pub extern fn CGEventSourceCreate(stateID: CGEventSourceStateID) CGEventSourceRef;
pub extern fn CGEventSourceGetKeyboardType(source: CGEventSourceRef) CGEventSourceKeyboardType;
pub extern fn CGEventSourceSetKeyboardType(source: CGEventSourceRef, keyboardType: CGEventSourceKeyboardType) void;
pub extern fn CGEventSourceGetPixelsPerLine(source: CGEventSourceRef) f64;
pub extern fn CGEventSourceSetPixelsPerLine(source: CGEventSourceRef, pixelsPerLine: f64) void;
pub extern fn CGEventSourceGetSourceStateID(source: CGEventSourceRef) CGEventSourceStateID;
pub extern fn CGEventSourceButtonState(stateID: CGEventSourceStateID, button: CGMouseButton) bool;
pub extern fn CGEventSourceKeyState(stateID: CGEventSourceStateID, key: CGKeyCode) bool;
pub extern fn CGEventSourceFlagsState(stateID: CGEventSourceStateID) CGEventFlags;
pub extern fn CGEventSourceSecondsSinceLastEventType(stateID: CGEventSourceStateID, eventType: CGEventType) CFTimeInterval;
pub extern fn CGEventSourceCounterForEventType(stateID: CGEventSourceStateID, eventType: CGEventType) u32;
pub extern fn CGEventSourceSetUserData(source: CGEventSourceRef, userData: i64) void;
pub extern fn CGEventSourceGetUserData(source: CGEventSourceRef) i64;
pub extern fn CGEventSourceSetLocalEventsFilterDuringSuppressionState(source: CGEventSourceRef, filter: CGEventFilterMask, state: CGEventSuppressionState) void;
pub extern fn CGEventSourceGetLocalEventsFilterDuringSuppressionState(source: CGEventSourceRef, state: CGEventSuppressionState) CGEventFilterMask;
pub extern fn CGEventSourceSetLocalEventsSuppressionInterval(source: CGEventSourceRef, seconds: CFTimeInterval) void;
pub extern fn CGEventSourceGetLocalEventsSuppressionInterval(source: CGEventSourceRef) CFTimeInterval;
pub const struct_CGPSConverter = opaque {};
pub const CGPSConverterRef = ?*struct_CGPSConverter;
pub const CGPSConverterBeginDocumentCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const CGPSConverterEndDocumentCallback = ?*const fn (?*anyopaque, bool) callconv(.C) void;
pub const CGPSConverterBeginPageCallback = ?*const fn (?*anyopaque, usize, CFDictionaryRef) callconv(.C) void;
pub const CGPSConverterEndPageCallback = ?*const fn (?*anyopaque, usize, CFDictionaryRef) callconv(.C) void;
pub const CGPSConverterProgressCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const CGPSConverterMessageCallback = ?*const fn (?*anyopaque, CFStringRef) callconv(.C) void;
pub const CGPSConverterReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGPSConverterCallbacks = extern struct {
    version: c_uint = @import("std").mem.zeroes(c_uint),
    beginDocument: CGPSConverterBeginDocumentCallback = @import("std").mem.zeroes(CGPSConverterBeginDocumentCallback),
    endDocument: CGPSConverterEndDocumentCallback = @import("std").mem.zeroes(CGPSConverterEndDocumentCallback),
    beginPage: CGPSConverterBeginPageCallback = @import("std").mem.zeroes(CGPSConverterBeginPageCallback),
    endPage: CGPSConverterEndPageCallback = @import("std").mem.zeroes(CGPSConverterEndPageCallback),
    noteProgress: CGPSConverterProgressCallback = @import("std").mem.zeroes(CGPSConverterProgressCallback),
    noteMessage: CGPSConverterMessageCallback = @import("std").mem.zeroes(CGPSConverterMessageCallback),
    releaseInfo: CGPSConverterReleaseInfoCallback = @import("std").mem.zeroes(CGPSConverterReleaseInfoCallback),
};
pub const CGPSConverterCallbacks = struct_CGPSConverterCallbacks;
pub extern fn CGPSConverterCreate(info: ?*anyopaque, callbacks: [*c]const CGPSConverterCallbacks, options: CFDictionaryRef) CGPSConverterRef;
pub extern fn CGPSConverterConvert(converter: CGPSConverterRef, provider: CGDataProviderRef, consumer: CGDataConsumerRef, options: CFDictionaryRef) bool;
pub extern fn CGPSConverterAbort(converter: CGPSConverterRef) bool;
pub extern fn CGPSConverterIsConverting(converter: CGPSConverterRef) bool;
pub extern fn CGPSConverterGetTypeID() CFTypeID;
pub extern fn CGSessionCopyCurrentDictionary() CFDictionaryRef;
pub const __block = @compileError("unable to translate macro: undefined identifier `__blocks__`"); // (no file):37:9
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):93:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):99:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):195:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):217:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):225:9
pub const __USER_LABEL_PREFIX__ = @compileError("unable to translate macro: undefined identifier `_`"); // (no file):316:9
pub const __nonnull = @compileError("unable to translate macro: undefined identifier `_Nonnull`"); // (no file):345:9
pub const __null_unspecified = @compileError("unable to translate macro: undefined identifier `_Null_unspecified`"); // (no file):346:9
pub const __nullable = @compileError("unable to translate macro: undefined identifier `_Nullable`"); // (no file):347:9
pub const __weak = @compileError("unable to translate macro: undefined identifier `objc_gc`"); // (no file):406:9
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Users/srijan-paul/zig/lib/include/stddef.h:116:9
pub const FLT_EVAL_METHOD = @compileError("unable to translate macro: undefined identifier `__FLT_EVAL_METHOD__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/float.h:75:9
pub const FLT_ROUNDS = @compileError("unable to translate macro: undefined identifier `__builtin_flt_rounds`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/float.h:76:9
pub const __AVAILABILITY_INTERNAL_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:109:9
pub const __AVAILABILITY_INTERNAL_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `deprecated`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:112:17
pub const __AVAILABILITY_INTERNAL_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `unavailable`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:121:9
pub const __AVAILABILITY_INTERNAL_WEAK_IMPORT = @compileError("unable to translate macro: undefined identifier `weak_import`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:122:9
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2922:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2923:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2924:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2926:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2930:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2932:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2937:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2941:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2942:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2944:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2948:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2950:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2954:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2956:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2961:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2965:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2966:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2968:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2972:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2974:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2978:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2980:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2985:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2990:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2994:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:2996:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3000:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3002:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3006:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3008:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3012:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3014:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3018:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3020:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3024:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3026:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3030:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3032:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3036:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3038:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3042:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3043:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3044:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3045:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3046:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3047:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3049:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3053:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3055:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3060:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3064:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3065:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3067:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3071:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3073:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3077:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3079:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3084:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3088:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3089:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3091:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3095:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3097:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3101:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3103:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3108:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3112:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3113:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3115:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3119:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3121:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3125:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3127:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3131:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3133:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3137:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3139:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3143:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3145:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3149:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3151:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3155:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3157:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3161:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3162:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3163:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3164:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3165:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3166:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3168:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3172:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3174:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3179:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3183:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3184:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3186:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3190:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3192:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3196:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3198:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3203:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3207:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3208:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3210:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3214:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3216:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3220:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3222:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3227:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3231:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3232:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3234:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3238:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3240:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3244:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3246:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3250:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3252:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3256:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3258:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3262:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3264:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3268:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3270:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3274:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3275:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3276:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3277:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3278:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3279:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3281:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3285:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3287:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3292:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3296:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3297:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3299:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3303:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3305:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3309:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3311:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3316:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3320:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3321:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3323:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3327:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3329:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3333:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3335:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3340:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3344:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3345:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3347:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3351:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3353:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3357:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3359:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3363:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3365:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3369:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3371:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3375:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3377:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3381:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3382:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3383:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3384:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3385:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3386:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3387:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3389:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3393:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3395:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3400:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3404:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3405:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3407:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3411:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3413:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3417:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3419:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3424:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3428:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3429:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3431:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3435:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3437:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3441:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3443:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3448:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3452:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3454:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3458:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3460:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3464:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3466:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3470:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3472:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3476:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3478:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3482:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3483:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3484:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3485:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3486:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3487:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3489:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3493:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3495:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3500:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3504:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3505:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3507:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3511:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3513:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3517:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3519:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3524:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3528:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3529:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3531:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3535:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3537:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3541:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3543:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3548:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3552:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3553:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3555:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3559:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3561:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3565:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3567:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3571:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3573:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3577:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3578:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3579:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3580:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3581:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3582:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3584:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3588:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3590:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3595:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3599:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3600:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3602:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3606:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3608:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3612:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3614:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3619:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3623:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3624:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3626:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3630:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3632:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3636:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3638:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3643:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3647:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3648:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3650:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3654:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3656:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3660:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3662:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3666:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3667:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3668:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3669:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3670:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3671:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3673:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3677:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3679:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3684:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3688:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3689:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3691:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3695:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3697:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3701:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3703:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3708:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3712:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3713:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3715:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3719:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3721:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3725:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3727:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3732:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3736:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3737:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3739:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3743:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3745:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3749:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3750:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3751:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3752:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3753:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3754:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3756:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3760:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3762:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3767:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3771:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3772:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3774:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3778:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3780:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3784:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3786:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3791:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3795:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3796:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3798:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3802:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3804:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3808:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3810:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3815:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3819:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3820:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3821:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3823:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3827:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3828:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3829:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3830:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3832:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3836:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3837:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3838:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3840:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3844:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3846:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3851:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3855:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3856:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3858:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3862:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3864:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3868:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3870:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3875:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3879:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3880:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3882:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3886:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3888:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3892:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3894:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3899:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3903:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3905:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3909:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3911:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3915:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3917:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3921:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3923:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3927:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3929:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3933:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3935:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3939:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3941:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3945:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3947:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3951:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3953:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3958:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3962:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3963:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3964:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3965:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3966:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3967:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3969:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3973:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3975:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3979:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3980:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3982:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3986:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3988:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3992:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3994:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:3999:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4003:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4004:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4006:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4010:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4012:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4016:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4018:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4023:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4027:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4028:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4029:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4030:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4032:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4036:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4037:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4039:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4043:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4045:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4049:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4051:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4056:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4060:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4061:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4063:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4067:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4069:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4073:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4075:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4080:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4084:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4085:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4086:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4087:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4088:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4090:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4094:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4096:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4101:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4105:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4106:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4108:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4112:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4114:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4118:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4120:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4125:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4129:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4130:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4132:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4136:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4138:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4142:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4144:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4149:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4153:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4155:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4159:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4160:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4161:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4162:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4163:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4164:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4166:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4170:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4172:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4176:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4178:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4182:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4183:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4185:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4189:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4191:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4195:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4197:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4202:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4206:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4207:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4208:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4209:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4211:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4215:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4217:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4221:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4222:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4224:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4228:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4230:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4234:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4236:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4241:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4245:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4246:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4247:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4248:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4250:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4254:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4255:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4257:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4261:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4263:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4267:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4269:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4274:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4278:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4279:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4280:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4281:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4282:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4284:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4288:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4290:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4294:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4296:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4301:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4305:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4306:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4308:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4312:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4314:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4318:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4320:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4325:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4329:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4330:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4331:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4332:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4333:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4335:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4339:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4341:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4345:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4347:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4351:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4352:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4353:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4354:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4356:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4360:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4362:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4366:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4367:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4368:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4369:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4371:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4375:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4376:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4377:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4378:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4380:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4384:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4386:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4390:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4392:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4397:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4401:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4403:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4407:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4408:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4409:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4410:21
pub const __AVAILABILITY_INTERNAL__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4411:21
pub const __AVAILABILITY_INTERNAL__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4412:21
pub const __AVAILABILITY_INTERNAL__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4413:21
pub const __AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4414:21
pub const __AVAILABILITY_INTERNAL__MAC_10_15 = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4415:21
pub const __AVAILABILITY_INTERNAL__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4417:21
pub const __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4418:21
pub const __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4419:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4421:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4422:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4423:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4424:21
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4427:22
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4428:22
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4429:22
pub const __API_AVAILABLE_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4445:13
pub const __API_AVAILABLE_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4446:13
pub const __API_AVAILABLE_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4447:13
pub const __API_AVAILABLE_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4448:13
pub const __API_AVAILABLE_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4449:13
pub const __API_AVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4451:13
pub const __API_AVAILABLE_PLATFORM_uikitformac = @compileError("unable to translate macro: undefined identifier `uikitformac`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4454:14
pub const __API_AVAILABLE_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4456:13
pub const __API_A = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4461:17
pub const __API_AVAILABLE2 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4470:13
pub const __API_AVAILABLE3 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4471:13
pub const __API_AVAILABLE4 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4472:13
pub const __API_AVAILABLE5 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4473:13
pub const __API_AVAILABLE6 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4474:13
pub const __API_AVAILABLE7 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4475:13
pub const __API_AVAILABLE8 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4476:13
pub const __API_AVAILABLE_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4477:13
pub const __API_APPLY_TO = @compileError("unable to translate macro: undefined identifier `any`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4479:13
pub const __API_RANGE_STRINGIFY2 = @compileError("unable to translate C expr: unexpected token '#'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4481:13
pub const __API_A_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4483:13
pub const __API_AVAILABLE_BEGIN2 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4486:13
pub const __API_AVAILABLE_BEGIN3 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4487:13
pub const __API_AVAILABLE_BEGIN4 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4488:13
pub const __API_AVAILABLE_BEGIN5 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4489:13
pub const __API_AVAILABLE_BEGIN6 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4490:13
pub const __API_AVAILABLE_BEGIN7 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4491:13
pub const __API_AVAILABLE_BEGIN8 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4492:13
pub const __API_AVAILABLE_BEGIN_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4493:13
pub const __API_DEPRECATED_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4496:13
pub const __API_DEPRECATED_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4497:13
pub const __API_DEPRECATED_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4498:13
pub const __API_DEPRECATED_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4499:13
pub const __API_DEPRECATED_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4500:13
pub const __API_DEPRECATED_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4502:13
pub const __API_DEPRECATED_PLATFORM_uikitformac = @compileError("unable to translate macro: undefined identifier `uikitformac`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4505:14
pub const __API_DEPRECATED_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4507:13
pub const __API_D = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4512:17
pub const __API_DEPRECATED_MSG3 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4521:13
pub const __API_DEPRECATED_MSG4 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4522:13
pub const __API_DEPRECATED_MSG5 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4523:13
pub const __API_DEPRECATED_MSG6 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4524:13
pub const __API_DEPRECATED_MSG7 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4525:13
pub const __API_DEPRECATED_MSG8 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4526:13
pub const __API_DEPRECATED_MSG9 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4527:13
pub const __API_DEPRECATED_MSG_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4528:13
pub const __API_D_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4530:13
pub const __API_DEPRECATED_BEGIN_MSG3 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4533:13
pub const __API_DEPRECATED_BEGIN_MSG4 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4534:13
pub const __API_DEPRECATED_BEGIN_MSG5 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4535:13
pub const __API_DEPRECATED_BEGIN_MSG6 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4536:13
pub const __API_DEPRECATED_BEGIN_MSG7 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4537:13
pub const __API_DEPRECATED_BEGIN_MSG8 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4538:13
pub const __API_DEPRECATED_BEGIN_MSG9 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4539:13
pub const __API_DEPRECATED_BEGIN_MSG_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4540:13
pub const __API_R = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4543:17
pub const __API_DEPRECATED_REP3 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4549:13
pub const __API_DEPRECATED_REP4 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4550:13
pub const __API_DEPRECATED_REP5 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4551:13
pub const __API_DEPRECATED_REP6 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4552:13
pub const __API_DEPRECATED_REP7 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4553:13
pub const __API_DEPRECATED_REP8 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4554:13
pub const __API_DEPRECATED_REP9 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4555:13
pub const __API_DEPRECATED_REP_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4556:13
pub const __API_R_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4559:17
pub const __API_DEPRECATED_BEGIN_REP3 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4565:13
pub const __API_DEPRECATED_BEGIN_REP4 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4566:13
pub const __API_DEPRECATED_BEGIN_REP5 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4567:13
pub const __API_DEPRECATED_BEGIN_REP6 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4568:13
pub const __API_DEPRECATED_BEGIN_REP7 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4569:13
pub const __API_DEPRECATED_BEGIN_REP8 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4570:13
pub const __API_DEPRECATED_BEGIN_REP9 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4571:13
pub const __API_DEPRECATED_BEGIN_REP_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4573:13
pub const __API_UNAVAILABLE_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4583:13
pub const __API_UNAVAILABLE_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4584:13
pub const __API_UNAVAILABLE_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4585:13
pub const __API_UNAVAILABLE_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4586:13
pub const __API_UNAVAILABLE_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4587:13
pub const __API_UNAVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4589:13
pub const __API_UNAVAILABLE_PLATFORM_uikitformac = @compileError("unable to translate macro: undefined identifier `uikitformac`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4592:14
pub const __API_UNAVAILABLE_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4594:13
pub const __API_U = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4599:17
pub const __API_UNAVAILABLE2 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4608:13
pub const __API_UNAVAILABLE3 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4609:13
pub const __API_UNAVAILABLE4 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4610:13
pub const __API_UNAVAILABLE5 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4611:13
pub const __API_UNAVAILABLE6 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4612:13
pub const __API_UNAVAILABLE7 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4613:13
pub const __API_UNAVAILABLE8 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4614:13
pub const __API_UNAVAILABLE_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4615:13
pub const __API_U_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4617:13
pub const __API_UNAVAILABLE_BEGIN2 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4620:13
pub const __API_UNAVAILABLE_BEGIN3 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4621:13
pub const __API_UNAVAILABLE_BEGIN4 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4622:13
pub const __API_UNAVAILABLE_BEGIN5 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4623:13
pub const __API_UNAVAILABLE_BEGIN6 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4624:13
pub const __API_UNAVAILABLE_BEGIN7 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4625:13
pub const __API_UNAVAILABLE_BEGIN8 = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4626:13
pub const __API_UNAVAILABLE_BEGIN_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4627:13
pub const __swift_compiler_version_at_least = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4676:13
pub const __SPI_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityInternal.h:4684:11
pub const __OSX_AVAILABLE_STARTING = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:202:17
pub const __OSX_AVAILABLE_BUT_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:203:17
pub const __OSX_AVAILABLE_BUT_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:205:17
pub const __OS_AVAILABILITY = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:228:13
pub const __OS_AVAILABILITY_MSG = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:229:13
pub const __OSX_EXTENSION_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx_app_extension`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:246:13
pub const __IOS_EXTENSION_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `ios_app_extension`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:247:13
pub const __OS_EXTENSION_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:257:9
pub const __OSX_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:264:13
pub const __OSX_AVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:265:13
pub const __OSX_DEPRECATED = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:266:13
pub const __IOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:286:13
pub const __IOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:287:13
pub const __IOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:288:13
pub const __IOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:289:13
pub const __TVOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:313:13
pub const __TVOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:314:13
pub const __TVOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:315:13
pub const __TVOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:316:13
pub const __WATCHOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:340:13
pub const __WATCHOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:341:13
pub const __WATCHOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:342:13
pub const __WATCHOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:343:13
pub const __SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `swift`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:369:13
pub const __SWIFT_UNAVAILABLE_MSG = @compileError("unable to translate macro: undefined identifier `swift`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:370:13
pub const __API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:413:13
pub const __API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:415:13
pub const __API_AVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:416:13
pub const __API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:434:13
pub const __API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:435:13
pub const __API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:437:13
pub const __API_DEPRECATED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:438:13
pub const __API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:440:13
pub const __API_DEPRECATED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:441:13
pub const __API_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:451:13
pub const __API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:453:13
pub const __API_UNAVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:454:13
pub const __SPI_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:507:11
pub const __SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Availability.h:511:11
pub const API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:91:13
pub const API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:93:13
pub const API_AVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:94:13
pub const API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:113:13
pub const API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:114:13
pub const API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:116:13
pub const API_DEPRECATED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:117:13
pub const API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:119:13
pub const API_DEPRECATED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:120:13
pub const API_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:132:13
pub const API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:134:13
pub const API_UNAVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:135:13
pub const SPI_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:184:11
pub const SPI_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:188:11
pub const SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/availability.h:192:11
pub const WEAK_IMPORT_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `weak_import`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityMacros.h:174:13
pub const DEPRECATED_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `deprecated`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityMacros.h:186:17
pub const DEPRECATED_MSG_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `deprecated`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityMacros.h:188:21
pub const UNAVAILABLE_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `unavailable`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityMacros.h:212:13
pub const __IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `__IPHONE_NA`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/AvailabilityMacros.h:250:9
pub const CF_AVAILABLE = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:46:9
pub const CF_AVAILABLE_MAC = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:47:9
pub const CF_AVAILABLE_IOS = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:48:9
pub const CF_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:49:9
pub const CF_DEPRECATED_MAC = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:50:9
pub const CF_DEPRECATED_IOS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:51:9
pub const CF_ENUM_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:100:9
pub const CF_ENUM_DEPRECATED_MAC = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:101:9
pub const CF_ENUM_DEPRECATED_IOS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:102:9
pub const __CF_ENUM_ATTRIBUTES = @compileError("unable to translate macro: undefined identifier `enum_extensibility`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:125:9
pub const __CF_CLOSED_ENUM_ATTRIBUTES = @compileError("unable to translate macro: undefined identifier `enum_extensibility`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:126:9
pub const __CF_OPTIONS_ATTRIBUTES = @compileError("unable to translate macro: undefined identifier `flag_enum`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:127:9
pub const __CF_ENUM_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:134:9
pub const __CF_ENUM_FIXED_IS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `__cplusplus`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:136:9
pub const __CF_NAMED_ENUM = @compileError("unable to translate C expr: unexpected token ';'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:151:9
pub const __CF_ANON_ENUM = @compileError("unable to translate C expr: expected 'an identifier' instead got ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:152:9
pub const CF_CLOSED_ENUM = @compileError("unable to translate C expr: unexpected token ';'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:153:9
pub const CF_OPTIONS = @compileError("unable to translate C expr: unexpected token ';'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:154:9
pub const CF_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:169:9
pub const _CF_TYPED_ENUM = @compileError("unable to translate macro: undefined identifier `swift_wrapper`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:172:9
pub const _CF_TYPED_EXTENSIBLE_ENUM = @compileError("unable to translate macro: undefined identifier `swift_wrapper`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:178:9
pub const __CF_ERROR_ENUM_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:197:9
pub const CF_ERROR_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:218:9
pub const CF_SWIFT_BRIDGED_TYPEDEF = @compileError("unable to translate macro: undefined identifier `swift_bridged_typedef`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:222:9
pub const CF_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `availability`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:235:9
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:113:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:114:9
pub const __const = @compileError("unable to translate C expr: unexpected token 'const'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:116:9
pub const __volatile = @compileError("unable to translate C expr: unexpected token 'volatile'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:118:9
pub const __dead2 = @compileError("unable to translate macro: undefined identifier `__noreturn__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:162:9
pub const __pure2 = @compileError("unable to translate C expr: unexpected token '__attribute__'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:163:9
pub const __stateful_pure = @compileError("unable to translate macro: undefined identifier `__pure__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:164:9
pub const __unused = @compileError("unable to translate macro: undefined identifier `__unused__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:169:9
pub const __used = @compileError("unable to translate macro: undefined identifier `__used__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:174:9
pub const __cold = @compileError("unable to translate macro: undefined identifier `__cold__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:180:9
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `returns_nonnull`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:187:9
pub const __exported = @compileError("unable to translate macro: undefined identifier `__visibility__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:197:9
pub const __exported_push = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:198:9
pub const __exported_pop = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:199:9
pub const __deprecated = @compileError("unable to translate macro: undefined identifier `__deprecated__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:211:9
pub const __deprecated_msg = @compileError("unable to translate macro: undefined identifier `__deprecated__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:215:10
pub const __kpi_deprecated = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:226:9
pub const __unavailable = @compileError("unable to translate macro: undefined identifier `__unavailable__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:232:9
pub const __restrict = @compileError("unable to translate C expr: unexpected token 'restrict'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:254:9
pub const __disable_tail_calls = @compileError("unable to translate macro: undefined identifier `__disable_tail_calls__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:287:9
pub const __not_tail_called = @compileError("unable to translate macro: undefined identifier `__not_tail_called__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:299:9
pub const __result_use_check = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:310:9
pub const __swift_unavailable = @compileError("unable to translate macro: undefined identifier `__availability__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:320:9
pub const __header_inline = @compileError("unable to translate C expr: unexpected token 'inline'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:354:10
pub const __header_always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:367:10
pub const __unreachable_ok_push = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:380:10
pub const __unreachable_ok_pop = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:383:10
pub const __printflike = @compileError("unable to translate macro: undefined identifier `__format__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:404:9
pub const __printf0like = @compileError("unable to translate macro: undefined identifier `__format__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:406:9
pub const __scanflike = @compileError("unable to translate macro: undefined identifier `__format__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:408:9
pub const __osloglike = @compileError("unable to translate macro: undefined identifier `__format__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:410:9
pub const __IDSTRING = @compileError("unable to translate C expr: unexpected token 'static'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:413:9
pub const __COPYRIGHT = @compileError("unable to translate macro: undefined identifier `copyright`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:416:9
pub const __RCSID = @compileError("unable to translate macro: undefined identifier `rcsid`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:420:9
pub const __SCCSID = @compileError("unable to translate macro: undefined identifier `sccsid`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:424:9
pub const __PROJECT_VERSION = @compileError("unable to translate macro: undefined identifier `project_version`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:428:9
pub const __FBSDID = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:433:9
pub const __DECONST = @compileError("unable to translate C expr: unexpected token 'const'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:437:9
pub const __DEVOLATILE = @compileError("unable to translate C expr: unexpected token 'volatile'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:441:9
pub const __DEQUALIFY = @compileError("unable to translate C expr: unexpected token 'const'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:445:9
pub const __alloc_size = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:463:9
pub const __DARWIN_ALIAS = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:648:9
pub const __DARWIN_ALIAS_C = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:649:9
pub const __DARWIN_ALIAS_I = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:650:9
pub const __DARWIN_NOCANCEL = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:651:9
pub const __DARWIN_INODE64 = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:652:9
pub const __DARWIN_1050 = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:654:9
pub const __DARWIN_1050ALIAS = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:655:9
pub const __DARWIN_1050ALIAS_C = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:656:9
pub const __DARWIN_1050ALIAS_I = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:657:9
pub const __DARWIN_1050INODE64 = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:658:9
pub const __DARWIN_EXTSN = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:660:9
pub const __DARWIN_EXTSN_C = @compileError("unable to translate C expr: unexpected token '__asm'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:661:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:35:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:41:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:47:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:53:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:59:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:65:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:71:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:77:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:83:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:89:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:95:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:101:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:107:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:113:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:119:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:125:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:131:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:137:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:143:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:149:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_4 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:155:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:161:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:167:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:173:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:179:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:185:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:191:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:197:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:203:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:209:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:215:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:221:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:227:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_4 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:233:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:239:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:245:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:251:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:257:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_4 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:263:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:269:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:275:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:281:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:287:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_4 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:293:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_5 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:299:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_6 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:305:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_7 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:311:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:317:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:323:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:329:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:335:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_5 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:341:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:347:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:353:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:359:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:365:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_4 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:371:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_0 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:377:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:383:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_2 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:389:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_3 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:395:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_4 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_symbol_aliasing.h:401:9
pub const __DARWIN_ALIAS_STARTING = @compileError("unable to translate macro: undefined identifier `__DARWIN_ALIAS_STARTING_MAC_`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:671:9
pub const __POSIX_C_DEPRECATED = @compileError("unable to translate macro: undefined identifier `___POSIX_C_DEPRECATED_STARTING_`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:734:9
pub const __CAST_AWAY_QUALIFIER = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:832:9
pub const __XNU_PRIVATE_EXTERN = @compileError("unable to translate macro: undefined identifier `visibility`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:846:9
pub const __counted_by = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:860:9
pub const __sized_by = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:861:9
pub const __ended_by = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:862:9
pub const __terminated_by = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:863:9
pub const __ptrcheck_abi_assume_single = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:873:9
pub const __ptrcheck_abi_assume_unsafe_indexable = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:874:9
pub const __unsafe_terminated_by_from_indexable = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:883:9
pub const __unsafe_null_terminated_from_indexable = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:884:9
pub const __compiler_barrier = @compileError("unable to translate C expr: unexpected token '__asm__'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:918:9
pub const __enum_open = @compileError("unable to translate macro: undefined identifier `__enum_extensibility__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:921:9
pub const __enum_closed = @compileError("unable to translate macro: undefined identifier `__enum_extensibility__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:922:9
pub const __enum_options = @compileError("unable to translate macro: undefined identifier `__flag_enum__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:929:9
pub const __enum_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:942:9
pub const __enum_closed_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:944:9
pub const __options_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:946:9
pub const __options_closed_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/cdefs.h:948:9
pub const __offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types.h:83:9
pub const BLOCK_EXPORT = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Block.h:17:16
pub const Block_copy = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Block.h:66:9
pub const Block_release = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/Block.h:67:9
pub const EXTERN_API = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:367:13
pub const EXTERN_API_C = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:368:13
pub const EXTERN_API_STDCALL = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:369:13
pub const EXTERN_API_C_STDCALL = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:370:13
pub const PRAGMA_ALIGN_SUPPORTED = @compileError("unable to translate macro: undefined identifier `PRAGMA_ALIGN_SUPPORTED_is_obsolete`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:478:9
pub const GENERATINGPOWERPC = @compileError("unable to translate macro: undefined identifier `GENERATINGPOWERPC_is_obsolete`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:479:9
pub const GENERATING68K = @compileError("unable to translate macro: undefined identifier `GENERATING68K_is_obsolete`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:480:9
pub const GENERATING68881 = @compileError("unable to translate macro: undefined identifier `GENERATING68881_is_obsolete`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:481:9
pub const GENERATINGCFM = @compileError("unable to translate macro: undefined identifier `GENERATINGCFM_is_obsolete`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:482:9
pub const CFMSYSTEMCALLS = @compileError("unable to translate macro: undefined identifier `CFMSYSTEMCALLS_is_obsolete`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:483:9
pub const ONEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:535:11
pub const TWOWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:536:11
pub const THREEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:537:12
pub const FOURWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:538:11
pub const FIVEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:539:13
pub const SIXWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:540:10
pub const SEVENWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:541:12
pub const EIGHTWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:542:11
pub const NINEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:543:12
pub const TENWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:544:10
pub const ELEVENWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:545:11
pub const TWELVEWORDINLINE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/ConditionalMacros.h:546:12
pub const __DARWIN_OS_INLINE = @compileError("unable to translate C expr: unexpected token 'static'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/libkern/_OSByteOrder.h:67:17
pub const NTOHL = @compileError("unable to translate C expr: unexpected token '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_endian.h:143:9
pub const NTOHS = @compileError("unable to translate C expr: unexpected token '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_endian.h:144:9
pub const NTOHLL = @compileError("unable to translate C expr: unexpected token '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_endian.h:145:9
pub const HTONL = @compileError("unable to translate C expr: unexpected token '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_endian.h:146:9
pub const HTONS = @compileError("unable to translate C expr: unexpected token '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_endian.h:147:9
pub const HTONLL = @compileError("unable to translate C expr: unexpected token '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_endian.h:148:9
pub const __DARWIN_FD_ZERO = @compileError("unable to translate macro: undefined identifier `__builtin_bzero`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_fd_def.h:115:9
pub const __DARWIN_FD_COPY = @compileError("unable to translate C expr: unexpected token '*'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_fd_def.h:120:9
pub const StrLength = @compileError("unable to translate C expr: unexpected token 'const'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/MacTypes.h:503:9
pub const CF_EXPORT = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:153:9
pub const CF_INLINE = @compileError("unable to translate macro: undefined identifier `always_inline`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:178:17
pub const CF_RETURNS_RETAINED = @compileError("unable to translate macro: undefined identifier `cf_returns_retained`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:194:9
pub const CF_RETURNS_NOT_RETAINED = @compileError("unable to translate macro: undefined identifier `cf_returns_not_retained`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:204:9
pub const CF_RELEASES_ARGUMENT = @compileError("unable to translate macro: undefined identifier `cf_consumed`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:213:9
pub const CF_CONSUMED = @compileError("unable to translate macro: undefined identifier `cf_consumed`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:222:9
pub const CF_IMPLICIT_BRIDGING_ENABLED = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:237:9
pub const CF_IMPLICIT_BRIDGING_DISABLED = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:245:9
pub const CF_BRIDGED_TYPE = @compileError("unable to translate macro: undefined identifier `objc_bridge`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:270:9
pub const CF_BRIDGED_MUTABLE_TYPE = @compileError("unable to translate macro: undefined identifier `objc_bridge_mutable`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:271:9
pub const CF_RELATED_TYPE = @compileError("unable to translate macro: undefined identifier `objc_bridge_related`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:272:9
pub const CF_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:281:9
pub const CF_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:282:9
pub const CF_REFINED_FOR_SWIFT = @compileError("unable to translate macro: undefined identifier `swift_private`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:303:10
pub const CF_SWIFT_NAME = @compileError("unable to translate macro: undefined identifier `swift_name`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:310:10
pub const CF_SWIFT_UNAVAILABLE_FROM_ASYNC = @compileError("unable to translate macro: undefined identifier `__swift_attr__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:316:11
pub const CF_NOESCAPE = @compileError("unable to translate macro: undefined identifier `noescape`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:322:9
pub const CF_NO_TAIL_CALL = @compileError("unable to translate macro: undefined identifier `not_tail_called`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:328:9
pub const CF_WARN_UNUSED_RESULT = @compileError("unable to translate macro: undefined identifier `warn_unused_result`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:334:9
pub const CF_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `fallthrough`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:340:9
pub const CF_BOXABLE = @compileError("unable to translate macro: undefined identifier `objc_boxable`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFCGTypes.h:21:10
pub const __CG_HAS_COMPILER_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `__has_attribute`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:20:11
pub const __CG_HAS_COMPILER_EXTENSION = @compileError("unable to translate macro: undefined identifier `__has_extension`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:32:11
pub const CG_EXTERN = @compileError("unable to translate macro: undefined identifier `visibility`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:69:12
pub const CG_LOCAL = @compileError("unable to translate macro: undefined identifier `visibility`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:81:12
pub const CG_EXTERN_32 = @compileError("unable to translate macro: undefined identifier `unused`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:116:11
pub const CG_LOCAL_32 = @compileError("unable to translate macro: undefined identifier `unused`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:136:11
pub const __CG_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:146:11
pub const __CG_DEPRECATED_WITH_MSG = @compileError("unable to translate macro: undefined identifier `deprecated`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:158:11
pub const __CG_DEPRECATED_ENUMERATOR = @compileError("unable to translate macro: undefined identifier `deprecated`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:170:11
pub const __CG_DEPRECATED_ENUMERATOR_WITH_MSG = @compileError("unable to translate macro: undefined identifier `deprecated`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:183:11
pub const GET_CG_AVAIL_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:191:9
pub const CG_AVAILABLE_STARTING = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:192:9
pub const CG_AVAILABLE_STARTING_IOS = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:193:9
pub const CG_AVAILABLE_STARTING1 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:194:9
pub const CG_AVAILABLE_STARTING2 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:195:9
pub const GET_CG_AVAIL_BUT_DEPR_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:197:9
pub const CG_AVAILABLE_BUT_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:198:9
pub const CG_AVAILABLE_BUT_DEPRECATED1 = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:199:9
pub const CG_AVAILABLE_BUT_DEPRECATED2 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:200:9
pub const CG_AVAILABLE_BUT_DEPRECATED3 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:201:9
pub const CG_AVAILABLE_BUT_DEPRECATED4 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:202:9
pub const CG_AVAILABLE_BUT_DEPRECATED5 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:203:9
pub const CG_UNAVAILABLE_DESKTOP = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:204:9
pub const CG_UNAVAILABLE_EMBEDDED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:205:9
pub const __CG_STATIC_ASSERT = @compileError("unable to translate C expr: unexpected token '_Static_assert'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:276:11
pub const CG_INLINE = @compileError("unable to translate C expr: unexpected token 'static'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:287:11
pub const __CG_NO_INLINE = @compileError("unable to translate macro: undefined identifier `noinline`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:303:11
pub const CG_PURE = @compileError("unable to translate macro: undefined identifier `pure`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:312:11
pub const __CG_FORMAT_PRINTF = @compileError("unable to translate macro: undefined identifier `format`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:322:11
pub const __CG_FORMAT_VPRINTF = @compileError("unable to translate macro: undefined identifier `format`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:334:11
pub const CG_BOXABLE = @compileError("unable to translate macro: undefined identifier `objc_boxable`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:401:10
pub const va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`"); // /Users/srijan-paul/zig/lib/include/stdarg.h:33:9
pub const va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`"); // /Users/srijan-paul/zig/lib/include/stdarg.h:35:9
pub const va_arg = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Users/srijan-paul/zig/lib/include/stdarg.h:36:9
pub const __va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`"); // /Users/srijan-paul/zig/lib/include/stdarg.h:41:9
pub const va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`"); // /Users/srijan-paul/zig/lib/include/stdarg.h:46:9
pub const CFSTR = @compileError("unable to translate macro: undefined identifier `__builtin___CFStringMakeConstantString`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:198:9
pub const CF_FORMAT_FUNCTION = @compileError("unable to translate macro: undefined identifier `format`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:206:9
pub const CF_FORMAT_ARGUMENT = @compileError("unable to translate macro: undefined identifier `format_arg`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:207:9
pub const CF_CALENDAR_ENUM_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDate.h:55:9
pub const CF_CALENDAR_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDate.h:56:9
pub const static_assert = @compileError("unable to translate C expr: unexpected token '_Static_assert'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/assert.h:113:9
pub const __strfmonlike = @compileError("unable to translate macro: undefined identifier `__format__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types.h:31:9
pub const __strftimelike = @compileError("unable to translate macro: undefined identifier `__format__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types.h:33:9
pub const HUGE_VAL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:57:15
pub const HUGE_VALL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_vall`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:59:15
pub const fpclassify = @compileError("unable to translate: TODO long double"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:126:9
pub const isnormal = @compileError("unable to translate: TODO long double"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:149:9
pub const isfinite = @compileError("unable to translate: TODO long double"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:154:9
pub const isinf = @compileError("unable to translate: TODO long double"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:159:9
pub const isnan = @compileError("unable to translate: TODO long double"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:164:9
pub const signbit = @compileError("unable to translate: TODO long double"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:169:9
pub const isgreater = @compileError("unable to translate macro: undefined identifier `__builtin_isgreater`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:543:9
pub const isgreaterequal = @compileError("unable to translate macro: undefined identifier `__builtin_isgreaterequal`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:544:9
pub const isless = @compileError("unable to translate macro: undefined identifier `__builtin_isless`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:545:9
pub const islessequal = @compileError("unable to translate macro: undefined identifier `__builtin_islessequal`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:546:9
pub const islessgreater = @compileError("unable to translate macro: undefined identifier `__builtin_islessgreater`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:547:9
pub const isunordered = @compileError("unable to translate macro: undefined identifier `__builtin_isunordered`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/math.h:548:9
pub const SIG_DFL = @compileError("unable to translate C expr: expected ')' instead got '('"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/signal.h:131:9
pub const SIG_IGN = @compileError("unable to translate C expr: expected ')' instead got '('"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/signal.h:132:9
pub const SIG_HOLD = @compileError("unable to translate C expr: expected ')' instead got '('"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/signal.h:133:9
pub const SIG_ERR = @compileError("unable to translate C expr: expected ')' instead got '('"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/signal.h:134:9
pub const __darwin_arm_thread_state64_set_pc_fptr = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/arm/_structs.h:406:9
pub const __darwin_arm_thread_state64_set_lr_fptr = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/arm/_structs.h:415:9
pub const __darwin_arm_thread_state64_set_sp = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/arm/_structs.h:421:9
pub const __darwin_arm_thread_state64_set_fp = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/arm/_structs.h:427:9
pub const sv_onstack = @compileError("unable to translate macro: undefined identifier `sv_flags`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/signal.h:361:9
pub const __sgetc = @compileError("TODO unary inc/dec expr"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdio.h:268:9
pub const __sclearerr = @compileError("unable to translate C expr: expected ')' instead got '&='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdio.h:292:9
pub const ru_first = @compileError("unable to translate macro: undefined identifier `ru_ixrss`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/resource.h:164:9
pub const ru_last = @compileError("unable to translate macro: undefined identifier `ru_nivcsw`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/resource.h:178:9
pub const w_termsig = @compileError("unable to translate macro: undefined identifier `w_T`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/wait.h:231:9
pub const w_coredump = @compileError("unable to translate macro: undefined identifier `w_T`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/wait.h:232:9
pub const w_retcode = @compileError("unable to translate macro: undefined identifier `w_T`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/wait.h:233:9
pub const w_stopval = @compileError("unable to translate macro: undefined identifier `w_S`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/wait.h:234:9
pub const w_stopsig = @compileError("unable to translate macro: undefined identifier `w_S`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/wait.h:235:9
pub const __alloca = @compileError("unable to translate macro: undefined identifier `__builtin_alloca`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/alloca.h:40:9
pub const __bsearch_noescape = @compileError("unable to translate macro: undefined identifier `__noescape__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:275:9
pub const __sort_noescape = @compileError("unable to translate macro: undefined identifier `__noescape__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/stdlib.h:308:9
pub const __CLOCK_AVAILABILITY = @compileError("unable to translate C expr: unexpected token 'an identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/time.h:148:9
pub const MACH_MSG_TYPE_INTEGER_T = @compileError("unable to translate macro: undefined identifier `MACH_MSG_TYPE_INTEGER_32`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/arm/vm_types.h:158:9
pub const OS_NORETURN = @compileError("unable to translate macro: undefined identifier `__noreturn__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:45:9
pub const OS_NOTHROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:46:9
pub const OS_NONNULL1 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:47:9
pub const OS_NONNULL2 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:48:9
pub const OS_NONNULL3 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:49:9
pub const OS_NONNULL4 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:50:9
pub const OS_NONNULL5 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:51:9
pub const OS_NONNULL6 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:52:9
pub const OS_NONNULL7 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:53:9
pub const OS_NONNULL8 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:54:9
pub const OS_NONNULL9 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:55:9
pub const OS_NONNULL10 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:56:9
pub const OS_NONNULL11 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:57:9
pub const OS_NONNULL12 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:58:9
pub const OS_NONNULL13 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:59:9
pub const OS_NONNULL14 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:60:9
pub const OS_NONNULL15 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:61:9
pub const OS_NONNULL_ALL = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:62:9
pub const OS_SENTINEL = @compileError("unable to translate macro: undefined identifier `__sentinel__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:63:9
pub const OS_PURE = @compileError("unable to translate macro: undefined identifier `__pure__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:64:9
pub const OS_CONST = @compileError("unable to translate C expr: unexpected token '__attribute__'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:65:9
pub const OS_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:66:9
pub const OS_MALLOC = @compileError("unable to translate macro: undefined identifier `__malloc__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:67:9
pub const OS_USED = @compileError("unable to translate macro: undefined identifier `__used__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:68:9
pub const OS_UNUSED = @compileError("unable to translate macro: undefined identifier `__unused__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:69:9
pub const OS_COLD = @compileError("unable to translate macro: undefined identifier `__cold__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:70:9
pub const OS_WEAK = @compileError("unable to translate macro: undefined identifier `__weak__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:71:9
pub const OS_WEAK_IMPORT = @compileError("unable to translate macro: undefined identifier `__weak_import__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:72:9
pub const OS_NOINLINE = @compileError("unable to translate macro: undefined identifier `__noinline__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:73:9
pub const OS_ALWAYS_INLINE = @compileError("unable to translate macro: undefined identifier `__always_inline__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:74:9
pub const OS_TRANSPARENT_UNION = @compileError("unable to translate macro: undefined identifier `__transparent_union__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:75:9
pub const OS_ALIGNED = @compileError("unable to translate macro: undefined identifier `__aligned__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:76:9
pub const OS_FORMAT_PRINTF = @compileError("unable to translate macro: undefined identifier `__format__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:77:9
pub const OS_EXPORT = @compileError("unable to translate macro: undefined identifier `__visibility__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:78:9
pub const OS_INLINE = @compileError("unable to translate C expr: unexpected token 'static'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:79:9
pub const OS_NOESCAPE = @compileError("unable to translate macro: undefined identifier `__noescape__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:121:9
pub const OS_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__fallthrough__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:129:9
pub const OS_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:135:9
pub const OS_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:136:9
pub const OS_OVERLOADABLE = @compileError("unable to translate macro: undefined identifier `__overloadable__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:149:9
pub const OS_ANALYZER_SUPPRESS = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:157:9
pub const __OS_ENUM_ATTR = @compileError("unable to translate macro: undefined identifier `enum_extensibility`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:161:9
pub const __OS_ENUM_ATTR_CLOSED = @compileError("unable to translate macro: undefined identifier `enum_extensibility`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:162:9
pub const __OS_OPTIONS_ATTR = @compileError("unable to translate macro: undefined identifier `flag_enum`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:176:9
pub const OS_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:183:9
pub const OS_CLOSED_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:185:9
pub const OS_OPTIONS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:187:9
pub const OS_CLOSED_OPTIONS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:189:9
pub const OS_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__availability__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:240:9
pub const OS_SWIFT_UNAVAILABLE_FROM_ASYNC = @compileError("unable to translate macro: undefined identifier `__swift_attr__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:247:9
pub const OS_REFINED_FOR_SWIFT = @compileError("unable to translate macro: undefined identifier `__swift_private__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:254:10
pub const OS_SWIFT_NAME = @compileError("unable to translate macro: undefined identifier `__swift_name__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:260:10
pub const __OS_STRINGIFY = @compileError("unable to translate C expr: unexpected token '#'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:265:9
pub const __OS_CONCAT = @compileError("unable to translate C expr: unexpected token '##'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:267:9
pub const os_prevent_tail_call_optimization = @compileError("unable to translate C expr: unexpected token '__asm__'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:271:9
pub const os_compiler_barrier = @compileError("unable to translate C expr: unexpected token '__asm__'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:273:9
pub const OS_NOT_TAIL_CALLED = @compileError("unable to translate macro: undefined identifier `__not_tail_called__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/base.h:281:9
pub const OS_OBJECT_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/object.h:105:9
pub const OS_OBJECT_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/object.h:106:9
pub const OS_OBJECT_WARN_UNUSED_RESULT = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/object.h:111:9
pub const OS_OBJECT_DECL_CLASS = @compileError("unable to translate macro: untranslatable usage of arg `name`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/object.h:228:9
pub const OS_OBJECT_DECL_PROTOCOL = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/object.h:246:9
pub const OS_OBJECT_SHOW_CLASS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/object.h:247:9
pub const OS_OBJECT_SHOW_SUBCLASS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/object.h:249:9
pub const OS_OBJECT_GLOBAL_OBJECT = @compileError("unable to translate C expr: unexpected token ')'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/object.h:253:9
pub const OS_WORKGROUP_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/workgroup_base.h:23:9
pub const OS_WORKGROUP_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/workgroup_base.h:24:9
pub const OS_WORKGROUP_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/workgroup_base.h:29:9
pub const OS_WORKGROUP_DECL = @compileError("unable to translate macro: undefined identifier `OS_OBJECT_CLASS`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/workgroup_base.h:36:9
pub const OS_WORKGROUP_SUBCLASS_DECL_PROTO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/workgroup_base.h:45:9
pub const OS_WORKGROUP_SUBCLASS_DECL = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/workgroup_base.h:48:9
pub const OS_WORKGROUP_ATTR_INITIALIZER_DEFAULT = @compileError("unable to translate C expr: unexpected token '{'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/workgroup_object.h:66:9
pub const OS_WORKGROUP_INTERVAL_DATA_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/os/workgroup_interval.h:58:9
pub const DISPATCH_NORETURN = @compileError("unable to translate macro: undefined identifier `__noreturn__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:45:9
pub const DISPATCH_NOTHROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:46:9
pub const DISPATCH_NONNULL1 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:47:9
pub const DISPATCH_NONNULL2 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:48:9
pub const DISPATCH_NONNULL3 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:49:9
pub const DISPATCH_NONNULL4 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:50:9
pub const DISPATCH_NONNULL5 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:51:9
pub const DISPATCH_NONNULL6 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:52:9
pub const DISPATCH_NONNULL7 = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:53:9
pub const DISPATCH_NONNULL_ALL = @compileError("unable to translate macro: undefined identifier `__nonnull__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:58:9
pub const DISPATCH_SENTINEL = @compileError("unable to translate macro: undefined identifier `__sentinel__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:60:9
pub const DISPATCH_PURE = @compileError("unable to translate macro: undefined identifier `__pure__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:61:9
pub const DISPATCH_CONST = @compileError("unable to translate C expr: unexpected token '__attribute__'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:62:9
pub const DISPATCH_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:63:9
pub const DISPATCH_MALLOC = @compileError("unable to translate macro: undefined identifier `__malloc__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:64:9
pub const DISPATCH_ALWAYS_INLINE = @compileError("unable to translate macro: undefined identifier `__always_inline__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:65:9
pub const DISPATCH_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__unavailable__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:66:9
pub const DISPATCH_UNAVAILABLE_MSG = @compileError("unable to translate macro: undefined identifier `__unavailable__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:67:9
pub const DISPATCH_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__fallthrough__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:148:11
pub const DISPATCH_LINUX_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:157:9
pub const DISPATCH_FREEBSD_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:164:9
pub const DISPATCH_ALIAS_V2 = @compileError("unable to translate C expr: unexpected token '__asm__'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:169:9
pub const DISPATCH_EXPORT = @compileError("unable to translate macro: undefined identifier `visibility`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:182:9
pub const DISPATCH_INLINE = @compileError("unable to translate C expr: unexpected token 'static'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:188:9
pub const dispatch_compiler_barrier = @compileError("unable to translate C expr: unexpected token '__asm__'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:195:9
pub const DISPATCH_NOT_TAIL_CALLED = @compileError("unable to translate macro: undefined identifier `__not_tail_called__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:202:9
pub const DISPATCH_NOESCAPE = @compileError("unable to translate macro: undefined identifier `__noescape__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:214:9
pub const DISPATCH_COLD = @compileError("unable to translate macro: undefined identifier `__cold__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:220:9
pub const DISPATCH_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:226:9
pub const DISPATCH_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:227:9
pub const DISPATCH_COUNTED_BY = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:243:9
pub const DISPATCH_SIZED_BY = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:244:9
pub const DISPATCH_RETURNS_RETAINED_BLOCK = @compileError("unable to translate macro: undefined identifier `__ns_returns_retained__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:261:9
pub const __DISPATCH_ENUM_ATTR = @compileError("unable to translate macro: undefined identifier `__enum_extensibility__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:268:9
pub const __DISPATCH_ENUM_ATTR_CLOSED = @compileError("unable to translate macro: undefined identifier `__enum_extensibility__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:269:9
pub const __DISPATCH_OPTIONS_ATTR = @compileError("unable to translate macro: undefined identifier `__flag_enum__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:276:9
pub const DISPATCH_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:284:9
pub const DISPATCH_OPTIONS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:286:9
pub const DISPATCH_ENUM_API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:298:9
pub const DISPATCH_ENUM_API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:299:9
pub const DISPATCH_ENUM_API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:300:9
pub const DISPATCH_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__availability__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:315:9
pub const DISPATCH_SWIFT3_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token ''"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:324:9
pub const DISPATCH_REFINED_FOR_SWIFT = @compileError("unable to translate macro: undefined identifier `__swift_private__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:328:9
pub const DISPATCH_SWIFT_NAME = @compileError("unable to translate macro: undefined identifier `__swift_name__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:334:9
pub const DISPATCH_TRANSPARENT_UNION = @compileError("unable to translate macro: undefined identifier `__transparent_union__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/base.h:340:9
pub const time_value_add_usec = @compileError("unable to translate C expr: unexpected token '{'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/time_value.h:79:9
pub const time_value_add = @compileError("unable to translate C expr: unexpected token '{'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/time_value.h:87:9
pub const ADD_MACH_TIMESPEC = @compileError("unable to translate C expr: unexpected token 'do'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/clock_types.h:99:9
pub const SUB_MACH_TIMESPEC = @compileError("unable to translate C expr: unexpected token 'do'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/clock_types.h:109:9
pub const __QOS_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/qos.h:114:9
pub const __QOS_CLASS_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/qos.h:115:9
pub const DISPATCH_DECL = @compileError("unable to translate macro: untranslatable usage of arg `name`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/object.h:109:9
pub const DISPATCH_DECL_SUBCLASS = @compileError("unable to translate macro: undefined identifier `_t`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/object.h:110:9
pub const DISPATCH_SOURCE_DECL = @compileError("unable to translate C expr: unexpected token ';'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/object.h:130:9
pub const DISPATCH_SOURCE_TYPE_DECL = @compileError("unable to translate macro: undefined identifier `_dispatch_source_type_`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/object.h:133:9
pub const DISPATCH_APPLY_QUEUE_ARG_NULLABILITY = @compileError("unable to translate macro: undefined identifier `_Nullable`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/queue.h:426:9
pub const DISPATCH_APPLY_AUTO = @compileError("unable to translate macro: undefined identifier `_Nonnull`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/queue.h:449:9
pub const msgh_reserved = @compileError("unable to translate macro: undefined identifier `msgh_voucher_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:425:9
pub const KERNEL_SECURITY_TOKEN_VALUE = @compileError("unable to translate C expr: unexpected token '{'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:557:11
pub const KERNEL_AUDIT_TOKEN_VALUE = @compileError("unable to translate C expr: unexpected token '{'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:560:11
pub const MACH_MSG_HEADER_EMPTY = @compileError("unable to translate C expr: unexpected token '}'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:565:9
pub const msgh_kind = @compileError("unable to translate macro: undefined identifier `msgh_seqno`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/message.h:610:9
pub const DISPATCH_DATA_DESTRUCTOR_TYPE_DECL = @compileError("unable to translate macro: undefined identifier `_dispatch_data_destructor_`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/dispatch/data.h:67:9
pub const KAUTH_ACL_SIZE = @compileError("unable to translate macro: undefined identifier `acl_ace`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/kauth.h:231:9
pub const fsec_entrycount = @compileError("unable to translate macro: undefined identifier `fsec_acl`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/kauth.h:257:9
pub const fsec_flags = @compileError("unable to translate macro: undefined identifier `fsec_acl`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/kauth.h:258:9
pub const fsec_ace = @compileError("unable to translate macro: undefined identifier `fsec_acl`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/kauth.h:259:9
pub const KAUTH_FILESEC_SIZE = @compileError("unable to translate macro: undefined identifier `fsec_acl`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/kauth.h:271:9
pub const KAUTH_INVALIDATE_CACHED_RIGHTS = @compileError("unable to translate macro: undefined identifier `kauth_action_t`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/kauth.h:365:9
pub const VM_GET_FLAGS_ALIAS = @compileError("unable to translate C expr: unexpected token '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/vm_statistics.h:286:9
pub const VM_SET_FLAGS_ALIAS = @compileError("unable to translate C expr: unexpected token '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/vm_statistics.h:288:9
pub const host_get_host_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:132:9
pub const host_get_host_priv_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:137:9
pub const host_get_io_main_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:142:9
pub const host_get_dynamic_pager_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:150:9
pub const host_set_dynamic_pager_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:153:9
pub const host_get_audit_control_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:156:9
pub const host_set_audit_control_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:159:9
pub const host_get_user_notification_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:162:9
pub const host_set_user_notification_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:165:9
pub const host_get_automountd_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:168:9
pub const host_set_automountd_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:171:9
pub const host_get_lockd_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:174:9
pub const host_set_lockd_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:177:9
pub const host_get_ktrace_background_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:180:9
pub const host_set_ktrace_background_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:183:9
pub const host_get_kextd_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:186:9
pub const host_set_kextd_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:189:9
pub const host_get_launchctl_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:192:9
pub const host_set_launchctl_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:195:9
pub const host_get_unfreed_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:201:9
pub const host_set_unfreed_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:204:9
pub const host_get_amfid_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:207:9
pub const host_set_amfid_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:210:9
pub const host_get_gssd_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:213:9
pub const host_set_gssd_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:216:9
pub const host_get_telemetry_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:219:9
pub const host_set_telemetry_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:222:9
pub const host_get_atm_notification_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:225:9
pub const host_set_atm_notification_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:228:9
pub const host_get_coalition_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:231:9
pub const host_set_coalition_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:234:9
pub const host_get_sysdiagnose_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:237:9
pub const host_set_sysdiagnose_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:240:9
pub const host_get_container_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:243:9
pub const host_set_container_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:246:9
pub const host_get_node_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:249:9
pub const host_set_node_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:252:9
pub const host_get_closured_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:255:9
pub const host_set_closured_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:258:9
pub const host_get_syspolicyd_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:261:9
pub const host_set_syspolicyd_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:264:9
pub const host_get_filecoordinationd_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:267:9
pub const host_set_filecoordinationd_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:270:9
pub const host_get_fairplayd_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:273:9
pub const host_set_fairplayd_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:276:9
pub const host_get_iocompressionstats_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:279:9
pub const host_set_iocompressionstats_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:282:9
pub const host_get_memory_error_port = @compileError("unable to translate macro: undefined identifier `host_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:285:9
pub const host_set_memory_error_port = @compileError("unable to translate macro: undefined identifier `host_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/host_special_ports.h:288:9
pub const invalid_memory_object_flavor = @compileError("unable to translate macro: undefined identifier `OLD_MEMORY_OBJECT_BEHAVIOR_INFO`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/memory_object_types.h:238:9
pub const SET_MAP_MEM = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/memory_object_types.h:271:9
pub const ts_32 = @compileError("unable to translate macro: undefined identifier `uts`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/arm/thread_status.h:161:9
pub const ts_64 = @compileError("unable to translate macro: undefined identifier `uts`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/arm/thread_status.h:162:9
pub const task_get_kernel_port = @compileError("unable to translate macro: undefined identifier `task_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:104:9
pub const task_set_kernel_port = @compileError("unable to translate macro: undefined identifier `task_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:107:9
pub const task_get_host_port = @compileError("unable to translate macro: undefined identifier `task_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:110:9
pub const task_set_host_port = @compileError("unable to translate macro: undefined identifier `task_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:113:9
pub const task_get_bootstrap_port = @compileError("unable to translate macro: undefined identifier `task_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:116:9
pub const task_get_debug_control_port = @compileError("unable to translate macro: undefined identifier `task_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:119:9
pub const task_set_bootstrap_port = @compileError("unable to translate macro: undefined identifier `task_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:122:9
pub const task_get_task_access_port = @compileError("unable to translate macro: undefined identifier `task_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:125:9
pub const task_set_task_access_port = @compileError("unable to translate macro: undefined identifier `task_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:128:9
pub const task_set_task_debug_control_port = @compileError("unable to translate macro: undefined identifier `task_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/task_special_ports.h:131:9
pub const UPDATE_IO_STATS = @compileError("unable to translate C expr: unexpected token '{'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/thread_info.h:175:9
pub const UPDATE_IO_STATS_ATOMIC = @compileError("unable to translate macro: undefined identifier `OSIncrementAtomic64`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/thread_info.h:181:9
pub const thread_get_kernel_port = @compileError("unable to translate macro: undefined identifier `thread_get_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/thread_special_ports.h:81:9
pub const thread_set_kernel_port = @compileError("unable to translate macro: undefined identifier `thread_set_special_port`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/thread_special_ports.h:84:9
pub const KMOD_DECL = @compileError("unable to translate macro: undefined identifier `_module_start`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/kmod.h:147:9
pub const KMOD_EXPLICIT_DECL = @compileError("unable to translate C expr: unexpected token '='"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/mach/kmod.h:155:9
pub const iokit_common_err = @compileError("unable to translate C expr: expected ')' instead got 'return'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/IOKit.framework/Headers/IOReturn.h:91:9
pub const iokit_family_err = @compileError("unable to translate C expr: expected ')' instead got 'return'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/IOKit.framework/Headers/IOReturn.h:92:9
pub const iokit_vendor_specific_err = @compileError("unable to translate C expr: expected ')' instead got 'return'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/IOKit.framework/Headers/IOReturn.h:93:9
pub const IO_NULL_VM_TASK = @compileError("unable to translate macro: undefined identifier `vm_task_t`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/IOKit.framework/Headers/IOTypes.h:146:9
pub const DEPRECATED_ATTRIBUTE_EXCLUDE_PUBLIC_IOS = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/IOKit.framework/Headers/IOKitLib.h:61:9
pub const __UNAVAILABLE_PUBLIC_IOS = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/System/Library/Frameworks/IOKit.framework/Headers/IOKitLib.h:62:9
pub const OSATOMIC_BARRIER_DEPRECATED_MSG = @compileError("unable to translate C expr: unexpected token '#'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/libkern/OSAtomicDeprecated.h:50:9
pub const OSATOMIC_DEPRECATED_MSG = @compileError("unable to translate C expr: unexpected token '#'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/libkern/OSAtomicDeprecated.h:52:9
pub const OSATOMIC_BARRIER_DEPRECATED_REPLACE_WITH = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/libkern/OSAtomicDeprecated.h:60:9
pub const OSATOMIC_DEPRECATED_REPLACE_WITH = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/libkern/OSAtomicDeprecated.h:65:9
pub const OS_ATOMIC_FIFO_QUEUE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/libkern/OSAtomicDeprecated.h:1211:9
pub const OSSPINLOCK_DEPRECATED_MSG = @compileError("unable to translate C expr: unexpected token '#'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/libkern/OSSpinLockDeprecated.h:45:9
pub const OSSPINLOCK_DEPRECATED_REPLACE_WITH = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/libkern/OSSpinLockDeprecated.h:46:9
pub const OS_ATOMIC_QUEUE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/libkern/OSAtomicQueue.h:63:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 17);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "17.0.6 (https://github.com/ziglang/zig-bootstrap 4c78aa1bba84dbd324e178932cd52221417f63da)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 17.0.6 (https://github.com/ziglang/zig-bootstrap 4c78aa1bba84dbd324e178932cd52221417f63da)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 1);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __BLOCKS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __OPTIMIZE__ = @as(c_int, 1);
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __NO_MATH_ERRNO__ = @as(c_int, 1);
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __AARCH64EL__ = @as(c_int, 1);
pub const __aarch64__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __AARCH64_CMODEL_SMALL__ = @as(c_int, 1);
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_ARCH = @as(c_int, 8);
pub const __ARM_ARCH_PROFILE = 'A';
pub const __ARM_64BIT_STATE = @as(c_int, 1);
pub const __ARM_PCS_AAPCS64 = @as(c_int, 1);
pub const __ARM_ARCH_ISA_A64 = @as(c_int, 1);
pub const __ARM_FEATURE_CLZ = @as(c_int, 1);
pub const __ARM_FEATURE_FMA = @as(c_int, 1);
pub const __ARM_FEATURE_LDREX = @as(c_int, 0xF);
pub const __ARM_FEATURE_IDIV = @as(c_int, 1);
pub const __ARM_FEATURE_DIV = @as(c_int, 1);
pub const __ARM_FEATURE_NUMERIC_MAXMIN = @as(c_int, 1);
pub const __ARM_FEATURE_DIRECTED_ROUNDING = @as(c_int, 1);
pub const __ARM_ALIGN_MAX_STACK_PWR = @as(c_int, 4);
pub const __ARM_FP = @as(c_int, 0xE);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_NEON = @as(c_int, 1);
pub const __ARM_NEON_FP = @as(c_int, 0xE);
pub const __ARM_FEATURE_CRC32 = @as(c_int, 1);
pub const __ARM_FEATURE_RCPC = @as(c_int, 1);
pub const __ARM_FEATURE_CRYPTO = @as(c_int, 1);
pub const __ARM_FEATURE_AES = @as(c_int, 1);
pub const __ARM_FEATURE_SHA2 = @as(c_int, 1);
pub const __ARM_FEATURE_SHA3 = @as(c_int, 1);
pub const __ARM_FEATURE_SHA512 = @as(c_int, 1);
pub const __ARM_FEATURE_PAUTH = @as(c_int, 1);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_VECTOR_ARITHMETIC = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_SCALAR_ARITHMETIC = @as(c_int, 1);
pub const __ARM_FEATURE_DOTPROD = @as(c_int, 1);
pub const __ARM_FEATURE_ATOMICS = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_FML = @as(c_int, 1);
pub const __ARM_FEATURE_COMPLEX = @as(c_int, 1);
pub const __ARM_FEATURE_JCVT = @as(c_int, 1);
pub const __ARM_FEATURE_QRDMX = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __FP_FAST_FMA = @as(c_int, 1);
pub const __FP_FAST_FMAF = @as(c_int, 1);
pub const __AARCH64_SIMD__ = @as(c_int, 1);
pub const __ARM64_ARCH_8__ = @as(c_int, 1);
pub const __ARM_NEON__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __arm64 = @as(c_int, 1);
pub const __arm64__ = @as(c_int, 1);
pub const __APPLE_CC__ = @as(c_int, 6000);
pub const __APPLE__ = @as(c_int, 1);
pub const __STDC_NO_THREADS__ = @as(c_int, 1);
pub const __strong = "";
pub const __unsafe_unretained = "";
pub const __DYNAMIC__ = @as(c_int, 1);
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140301, .decimal);
pub const __ENVIRONMENT_OS_VERSION_MIN_REQUIRED__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140301, .decimal);
pub const __MACH__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const NDEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const COREGRAPHICS_H_ = "";
pub const CGBASE_H_ = "";
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_STDDEF_H_misc = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const __CLANG_FLOAT_H = "";
pub const _FLOAT_H_ = "";
pub const __FLOAT_H = "";
pub const FLT_RADIX = __FLT_RADIX__;
pub const FLT_MANT_DIG = __FLT_MANT_DIG__;
pub const DBL_MANT_DIG = __DBL_MANT_DIG__;
pub const LDBL_MANT_DIG = __LDBL_MANT_DIG__;
pub const FLT_DIG = __FLT_DIG__;
pub const DBL_DIG = __DBL_DIG__;
pub const LDBL_DIG = __LDBL_DIG__;
pub const FLT_MIN_EXP = __FLT_MIN_EXP__;
pub const DBL_MIN_EXP = __DBL_MIN_EXP__;
pub const LDBL_MIN_EXP = __LDBL_MIN_EXP__;
pub const FLT_MIN_10_EXP = __FLT_MIN_10_EXP__;
pub const DBL_MIN_10_EXP = __DBL_MIN_10_EXP__;
pub const LDBL_MIN_10_EXP = __LDBL_MIN_10_EXP__;
pub const FLT_MAX_EXP = __FLT_MAX_EXP__;
pub const DBL_MAX_EXP = __DBL_MAX_EXP__;
pub const LDBL_MAX_EXP = __LDBL_MAX_EXP__;
pub const FLT_MAX_10_EXP = __FLT_MAX_10_EXP__;
pub const DBL_MAX_10_EXP = __DBL_MAX_10_EXP__;
pub const LDBL_MAX_10_EXP = __LDBL_MAX_10_EXP__;
pub const FLT_MAX = __FLT_MAX__;
pub const DBL_MAX = __DBL_MAX__;
pub const LDBL_MAX = __LDBL_MAX__;
pub const FLT_EPSILON = __FLT_EPSILON__;
pub const DBL_EPSILON = __DBL_EPSILON__;
pub const LDBL_EPSILON = __LDBL_EPSILON__;
pub const FLT_MIN = __FLT_MIN__;
pub const DBL_MIN = __DBL_MIN__;
pub const LDBL_MIN = __LDBL_MIN__;
pub const DECIMAL_DIG = __DECIMAL_DIG__;
pub const FLT_HAS_SUBNORM = @as(c_int, 1);
pub const DBL_HAS_SUBNORM = @as(c_int, 1);
pub const LDBL_HAS_SUBNORM = @as(c_int, 1);
pub const FLT_TRUE_MIN = __FLT_DENORM_MIN__;
pub const DBL_TRUE_MIN = __DBL_DENORM_MIN__;
pub const LDBL_TRUE_MIN = __LDBL_DENORM_MIN__;
pub const FLT_DECIMAL_DIG = __FLT_DECIMAL_DIG__;
pub const DBL_DECIMAL_DIG = __DBL_DECIMAL_DIG__;
pub const LDBL_DECIMAL_DIG = __LDBL_DECIMAL_DIG__;
pub const __TARGETCONDITIONALS__ = "";
pub const DYNAMIC_TARGETS_ENABLED = @as(c_int, 0);
pub const TARGET_OS_MAC = @as(c_int, 1);
pub const TARGET_OS_WIN32 = @as(c_int, 0);
pub const TARGET_OS_WINDOWS = @as(c_int, 0);
pub const TARGET_OS_UNIX = @as(c_int, 0);
pub const TARGET_OS_LINUX = @as(c_int, 0);
pub const TARGET_OS_OSX = @as(c_int, 1);
pub const TARGET_OS_IPHONE = @as(c_int, 0);
pub const TARGET_OS_IOS = @as(c_int, 0);
pub const TARGET_OS_WATCH = @as(c_int, 0);
pub const TARGET_OS_TV = @as(c_int, 0);
pub const TARGET_OS_MACCATALYST = @as(c_int, 0);
pub const TARGET_OS_UIKITFORMAC = @as(c_int, 0);
pub const TARGET_OS_SIMULATOR = @as(c_int, 0);
pub const TARGET_OS_EMBEDDED = @as(c_int, 0);
pub const TARGET_OS_RTKIT = @as(c_int, 0);
pub const TARGET_OS_DRIVERKIT = @as(c_int, 0);
pub const TARGET_IPHONE_SIMULATOR = TARGET_OS_SIMULATOR;
pub const TARGET_OS_NANO = TARGET_OS_WATCH;
pub const TARGET_ABI_USES_IOS_VALUES = !(TARGET_CPU_X86_64 != 0) or ((TARGET_OS_IPHONE != 0) and !(TARGET_OS_MACCATALYST != 0));
pub const TARGET_CPU_PPC = @as(c_int, 0);
pub const TARGET_CPU_PPC64 = @as(c_int, 0);
pub const TARGET_CPU_68K = @as(c_int, 0);
pub const TARGET_CPU_X86 = @as(c_int, 0);
pub const TARGET_CPU_X86_64 = @as(c_int, 0);
pub const TARGET_CPU_ARM = @as(c_int, 0);
pub const TARGET_CPU_ARM64 = @as(c_int, 1);
pub const TARGET_CPU_MIPS = @as(c_int, 0);
pub const TARGET_CPU_SPARC = @as(c_int, 0);
pub const TARGET_CPU_ALPHA = @as(c_int, 0);
pub const TARGET_RT_MAC_CFM = @as(c_int, 0);
pub const TARGET_RT_MAC_MACHO = @as(c_int, 1);
pub const TARGET_RT_LITTLE_ENDIAN = @as(c_int, 1);
pub const TARGET_RT_BIG_ENDIAN = @as(c_int, 0);
pub const TARGET_RT_64_BIT = @as(c_int, 1);
pub const __COREFOUNDATION_CFBASE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFAVAILABILITY__ = @as(c_int, 1);
pub const __AVAILABILITY__ = "";
pub const __API_TO_BE_DEPRECATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_MACOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_IOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_TVOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_WATCHOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_MACCATALYST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_DRIVERKIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __AVAILABILITY_VERSIONS__ = "";
pub const __MAC_10_0 = @as(c_int, 1000);
pub const __MAC_10_1 = @as(c_int, 1010);
pub const __MAC_10_2 = @as(c_int, 1020);
pub const __MAC_10_3 = @as(c_int, 1030);
pub const __MAC_10_4 = @as(c_int, 1040);
pub const __MAC_10_5 = @as(c_int, 1050);
pub const __MAC_10_6 = @as(c_int, 1060);
pub const __MAC_10_7 = @as(c_int, 1070);
pub const __MAC_10_8 = @as(c_int, 1080);
pub const __MAC_10_9 = @as(c_int, 1090);
pub const __MAC_10_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101000, .decimal);
pub const __MAC_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101002, .decimal);
pub const __MAC_10_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101003, .decimal);
pub const __MAC_10_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101100, .decimal);
pub const __MAC_10_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101102, .decimal);
pub const __MAC_10_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101103, .decimal);
pub const __MAC_10_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101104, .decimal);
pub const __MAC_10_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101200, .decimal);
pub const __MAC_10_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101201, .decimal);
pub const __MAC_10_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101202, .decimal);
pub const __MAC_10_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101204, .decimal);
pub const __MAC_10_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101300, .decimal);
pub const __MAC_10_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101301, .decimal);
pub const __MAC_10_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101302, .decimal);
pub const __MAC_10_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101304, .decimal);
pub const __MAC_10_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101400, .decimal);
pub const __MAC_10_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101401, .decimal);
pub const __MAC_10_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101404, .decimal);
pub const __MAC_10_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101406, .decimal);
pub const __MAC_10_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101500, .decimal);
pub const __MAC_10_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101501, .decimal);
pub const __MAC_10_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101504, .decimal);
pub const __MAC_10_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101600, .decimal);
pub const __MAC_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __MAC_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __MAC_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __MAC_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __MAC_11_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110500, .decimal);
pub const __MAC_11_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110600, .decimal);
pub const __MAC_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __MAC_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __MAC_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __MAC_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __MAC_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __MAC_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130100, .decimal);
pub const __MAC_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __MAC_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __IPHONE_2_0 = @as(c_int, 20000);
pub const __IPHONE_2_1 = @as(c_int, 20100);
pub const __IPHONE_2_2 = @as(c_int, 20200);
pub const __IPHONE_3_0 = @as(c_int, 30000);
pub const __IPHONE_3_1 = @as(c_int, 30100);
pub const __IPHONE_3_2 = @as(c_int, 30200);
pub const __IPHONE_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __IPHONE_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __IPHONE_4_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40200, .decimal);
pub const __IPHONE_4_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40300, .decimal);
pub const __IPHONE_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __IPHONE_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __IPHONE_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __IPHONE_6_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60100, .decimal);
pub const __IPHONE_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __IPHONE_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __IPHONE_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const __IPHONE_8_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80100, .decimal);
pub const __IPHONE_8_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80200, .decimal);
pub const __IPHONE_8_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80300, .decimal);
pub const __IPHONE_8_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80400, .decimal);
pub const __IPHONE_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __IPHONE_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __IPHONE_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __IPHONE_9_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90300, .decimal);
pub const __IPHONE_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __IPHONE_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __IPHONE_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __IPHONE_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100300, .decimal);
pub const __IPHONE_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __IPHONE_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __IPHONE_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110200, .decimal);
pub const __IPHONE_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __IPHONE_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __IPHONE_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __IPHONE_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __IPHONE_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __IPHONE_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __IPHONE_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __IPHONE_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __IPHONE_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130100, .decimal);
pub const __IPHONE_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __IPHONE_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __IPHONE_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __IPHONE_13_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130500, .decimal);
pub const __IPHONE_13_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130600, .decimal);
pub const __IPHONE_13_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130700, .decimal);
pub const __IPHONE_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __IPHONE_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __IPHONE_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __IPHONE_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __IPHONE_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140500, .decimal);
pub const __IPHONE_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140600, .decimal);
pub const __IPHONE_14_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140700, .decimal);
pub const __IPHONE_14_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140800, .decimal);
pub const __IPHONE_15_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150000, .decimal);
pub const __IPHONE_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150100, .decimal);
pub const __IPHONE_15_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150200, .decimal);
pub const __IPHONE_15_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150300, .decimal);
pub const __IPHONE_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150400, .decimal);
pub const __IPHONE_16_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160000, .decimal);
pub const __IPHONE_16_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160100, .decimal);
pub const __IPHONE_16_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160200, .decimal);
pub const __IPHONE_16_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160300, .decimal);
pub const __IPHONE_16_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160400, .decimal);
pub const __TVOS_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __TVOS_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __TVOS_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __TVOS_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __TVOS_10_0_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100001, .decimal);
pub const __TVOS_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __TVOS_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __TVOS_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __TVOS_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __TVOS_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110200, .decimal);
pub const __TVOS_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __TVOS_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __TVOS_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __TVOS_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __TVOS_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __TVOS_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __TVOS_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __TVOS_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __TVOS_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __TVOS_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __TVOS_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __TVOS_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __TVOS_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __TVOS_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __TVOS_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __TVOS_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140500, .decimal);
pub const __TVOS_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140600, .decimal);
pub const __TVOS_14_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140700, .decimal);
pub const __TVOS_15_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150000, .decimal);
pub const __TVOS_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150100, .decimal);
pub const __TVOS_15_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150200, .decimal);
pub const __TVOS_15_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150300, .decimal);
pub const __TVOS_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150400, .decimal);
pub const __TVOS_16_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160000, .decimal);
pub const __TVOS_16_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160100, .decimal);
pub const __TVOS_16_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160200, .decimal);
pub const __TVOS_16_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160300, .decimal);
pub const __TVOS_16_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160400, .decimal);
pub const __WATCHOS_1_0 = @as(c_int, 10000);
pub const __WATCHOS_2_0 = @as(c_int, 20000);
pub const __WATCHOS_2_1 = @as(c_int, 20100);
pub const __WATCHOS_2_2 = @as(c_int, 20200);
pub const __WATCHOS_3_0 = @as(c_int, 30000);
pub const __WATCHOS_3_1 = @as(c_int, 30100);
pub const __WATCHOS_3_1_1 = @as(c_int, 30101);
pub const __WATCHOS_3_2 = @as(c_int, 30200);
pub const __WATCHOS_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __WATCHOS_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __WATCHOS_4_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40200, .decimal);
pub const __WATCHOS_4_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40300, .decimal);
pub const __WATCHOS_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __WATCHOS_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __WATCHOS_5_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50200, .decimal);
pub const __WATCHOS_5_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50300, .decimal);
pub const __WATCHOS_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __WATCHOS_6_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60100, .decimal);
pub const __WATCHOS_6_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60200, .decimal);
pub const __WATCHOS_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __WATCHOS_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __WATCHOS_7_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70200, .decimal);
pub const __WATCHOS_7_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70300, .decimal);
pub const __WATCHOS_7_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70400, .decimal);
pub const __WATCHOS_7_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70500, .decimal);
pub const __WATCHOS_7_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70600, .decimal);
pub const __WATCHOS_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const __WATCHOS_8_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80100, .decimal);
pub const __WATCHOS_8_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80300, .decimal);
pub const __WATCHOS_8_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80400, .decimal);
pub const __WATCHOS_8_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80500, .decimal);
pub const __WATCHOS_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __WATCHOS_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __WATCHOS_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __WATCHOS_9_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90300, .decimal);
pub const __WATCHOS_9_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90400, .decimal);
pub const MAC_OS_X_VERSION_10_0 = @as(c_int, 1000);
pub const MAC_OS_X_VERSION_10_1 = @as(c_int, 1010);
pub const MAC_OS_X_VERSION_10_2 = @as(c_int, 1020);
pub const MAC_OS_X_VERSION_10_3 = @as(c_int, 1030);
pub const MAC_OS_X_VERSION_10_4 = @as(c_int, 1040);
pub const MAC_OS_X_VERSION_10_5 = @as(c_int, 1050);
pub const MAC_OS_X_VERSION_10_6 = @as(c_int, 1060);
pub const MAC_OS_X_VERSION_10_7 = @as(c_int, 1070);
pub const MAC_OS_X_VERSION_10_8 = @as(c_int, 1080);
pub const MAC_OS_X_VERSION_10_9 = @as(c_int, 1090);
pub const MAC_OS_X_VERSION_10_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101000, .decimal);
pub const MAC_OS_X_VERSION_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101002, .decimal);
pub const MAC_OS_X_VERSION_10_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101003, .decimal);
pub const MAC_OS_X_VERSION_10_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101100, .decimal);
pub const MAC_OS_X_VERSION_10_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101102, .decimal);
pub const MAC_OS_X_VERSION_10_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101103, .decimal);
pub const MAC_OS_X_VERSION_10_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101104, .decimal);
pub const MAC_OS_X_VERSION_10_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101200, .decimal);
pub const MAC_OS_X_VERSION_10_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101201, .decimal);
pub const MAC_OS_X_VERSION_10_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101202, .decimal);
pub const MAC_OS_X_VERSION_10_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101204, .decimal);
pub const MAC_OS_X_VERSION_10_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101300, .decimal);
pub const MAC_OS_X_VERSION_10_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101301, .decimal);
pub const MAC_OS_X_VERSION_10_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101302, .decimal);
pub const MAC_OS_X_VERSION_10_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101304, .decimal);
pub const MAC_OS_X_VERSION_10_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101400, .decimal);
pub const MAC_OS_X_VERSION_10_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101401, .decimal);
pub const MAC_OS_X_VERSION_10_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101404, .decimal);
pub const MAC_OS_X_VERSION_10_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101406, .decimal);
pub const MAC_OS_X_VERSION_10_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101500, .decimal);
pub const MAC_OS_X_VERSION_10_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101501, .decimal);
pub const MAC_OS_X_VERSION_10_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101600, .decimal);
pub const MAC_OS_VERSION_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const MAC_OS_VERSION_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const MAC_OS_VERSION_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __DRIVERKIT_19_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 190000, .decimal);
pub const __DRIVERKIT_20_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 200000, .decimal);
pub const __DRIVERKIT_21_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 210000, .decimal);
pub const __AVAILABILITY_INTERNAL__ = "";
pub const __MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED = __MAC_13_3;
pub const __AVAILABILITY_INTERNAL_REGULAR = "";
pub const __ENABLE_LEGACY_MAC_AVAILABILITY = @as(c_int, 1);
pub inline fn __API_AVAILABLE1(x: anytype) @TypeOf(__API_A(x)) {
    _ = &x;
    return __API_A(x);
}
pub inline fn __API_RANGE_STRINGIFY(x: anytype) @TypeOf(__API_RANGE_STRINGIFY2(x)) {
    _ = &x;
    return __API_RANGE_STRINGIFY2(x);
}
pub inline fn __API_AVAILABLE_BEGIN1(a: anytype) @TypeOf(__API_A_BEGIN(a)) {
    _ = &a;
    return __API_A_BEGIN(a);
}
pub inline fn __API_DEPRECATED_MSG2(msg: anytype, x: anytype) @TypeOf(__API_D(msg, x)) {
    _ = &msg;
    _ = &x;
    return __API_D(msg, x);
}
pub inline fn __API_DEPRECATED_BEGIN_MSG2(msg: anytype, a: anytype) @TypeOf(__API_D_BEGIN(msg, a)) {
    _ = &msg;
    _ = &a;
    return __API_D_BEGIN(msg, a);
}
pub inline fn __API_DEPRECATED_REP2(rep: anytype, x: anytype) @TypeOf(__API_R(rep, x)) {
    _ = &rep;
    _ = &x;
    return __API_R(rep, x);
}
pub inline fn __API_DEPRECATED_BEGIN_REP2(rep: anytype, a: anytype) @TypeOf(__API_R_BEGIN(rep, a)) {
    _ = &rep;
    _ = &a;
    return __API_R_BEGIN(rep, a);
}
pub inline fn __API_UNAVAILABLE1(x: anytype) @TypeOf(__API_U(x)) {
    _ = &x;
    return __API_U(x);
}
pub inline fn __API_UNAVAILABLE_BEGIN1(a: anytype) @TypeOf(__API_U_BEGIN(a)) {
    _ = &a;
    return __API_U_BEGIN(a);
}
pub const __OS_AVAILABILITY__ = "";
pub const API_TO_BE_DEPRECATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_MACOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_IOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_TVOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_WATCHOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_DRIVERKIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __AVAILABILITYMACROS__ = "";
pub const MAC_OS_VERSION_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const MAC_OS_VERSION_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const MAC_OS_VERSION_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130100, .decimal);
pub const MAC_OS_VERSION_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__;
pub const MAC_OS_X_VERSION_MAX_ALLOWED = MAC_OS_X_VERSION_MIN_REQUIRED;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER = "";
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED = DEPRECATED_ATTRIBUTE;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_0_AND_LATER = DEPRECATED_ATTRIBUTE;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY = @as(c_int, 1);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_1, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_3, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_13 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_13, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10_3, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_3, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_4, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_1, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_4, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_13_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_14_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_14, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_15_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_15, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_2_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_3_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_4_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_6_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_8_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_9_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_10_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_11_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_12_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_13_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_13, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_14_4_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_14_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn CF_AVAILABLE_IPHONE(_ios: anytype) @TypeOf(CF_AVAILABLE_IOS(_ios)) {
    _ = &_ios;
    return CF_AVAILABLE_IOS(_ios);
}
pub inline fn CF_DEPRECATED_IPHONE(_iosIntro: anytype, _iosDep: anytype) @TypeOf(CF_DEPRECATED_IOS(_iosIntro, _iosDep)) {
    _ = &_iosIntro;
    _ = &_iosDep;
    return CF_DEPRECATED_IOS(_iosIntro, _iosDep);
}
pub inline fn CF_ENUM_AVAILABLE(_mac: anytype, _ios: anytype) @TypeOf(CF_AVAILABLE(_mac, _ios)) {
    _ = &_mac;
    _ = &_ios;
    return CF_AVAILABLE(_mac, _ios);
}
pub inline fn CF_ENUM_AVAILABLE_MAC(_mac: anytype) @TypeOf(CF_AVAILABLE_MAC(_mac)) {
    _ = &_mac;
    return CF_AVAILABLE_MAC(_mac);
}
pub inline fn CF_ENUM_AVAILABLE_IOS(_ios: anytype) @TypeOf(CF_AVAILABLE_IOS(_ios)) {
    _ = &_ios;
    return CF_AVAILABLE_IOS(_ios);
}
pub const CF_STRING_ENUM = _CF_TYPED_ENUM;
pub const CF_EXTENSIBLE_STRING_ENUM = _CF_TYPED_EXTENSIBLE_ENUM;
pub const CF_TYPED_ENUM = _CF_TYPED_ENUM;
pub const CF_TYPED_EXTENSIBLE_ENUM = _CF_TYPED_EXTENSIBLE_ENUM;
pub inline fn __CF_NAMED_ERROR_ENUM(_domain: anytype, _name: anytype) @TypeOf(__CF_NAMED_ENUM(CFIndex, _name)) {
    _ = &_domain;
    _ = &_name;
    return __CF_NAMED_ENUM(CFIndex, _name);
}
pub inline fn __CF_ANON_ERROR_ENUM(_domain: anytype) @TypeOf(__CF_ANON_ENUM(CFIndex)) {
    _ = &_domain;
    return __CF_ANON_ENUM(CFIndex);
}
pub inline fn CF_EXTENSION_UNAVAILABLE(_msg: anytype) @TypeOf(__OS_EXTENSION_UNAVAILABLE(_msg)) {
    _ = &_msg;
    return __OS_EXTENSION_UNAVAILABLE(_msg);
}
pub inline fn CF_EXTENSION_UNAVAILABLE_MAC(_msg: anytype) @TypeOf(__OSX_EXTENSION_UNAVAILABLE(_msg)) {
    _ = &_msg;
    return __OSX_EXTENSION_UNAVAILABLE(_msg);
}
pub inline fn CF_EXTENSION_UNAVAILABLE_IOS(_msg: anytype) @TypeOf(__IOS_EXTENSION_UNAVAILABLE(_msg)) {
    _ = &_msg;
    return __IOS_EXTENSION_UNAVAILABLE(_msg);
}
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H_ = "";
pub const __WORDSIZE = @as(c_int, 64);
pub const _INT8_T = "";
pub const _INT16_T = "";
pub const _INT32_T = "";
pub const _INT64_T = "";
pub const _UINT8_T = "";
pub const _UINT16_T = "";
pub const _UINT32_T = "";
pub const _UINT64_T = "";
pub const _SYS__TYPES_H_ = "";
pub const _CDEFS_H_ = "";
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __P(protos: anytype) @TypeOf(protos) {
    _ = &protos;
    return protos;
}
pub const __signed = c_int;
pub inline fn __deprecated_enum_msg(_msg: anytype) @TypeOf(__deprecated_msg(_msg)) {
    _ = &_msg;
    return __deprecated_msg(_msg);
}
pub const __kpi_unavailable = "";
pub const __kpi_deprecated_arm64_macos_unavailable = "";
pub const __dead = "";
pub const __pure = "";
pub const __abortlike = __dead2 ++ __cold ++ __not_tail_called;
pub const __DARWIN_ONLY_64_BIT_INO_T = @as(c_int, 1);
pub const __DARWIN_ONLY_UNIX_CONFORMANCE = @as(c_int, 1);
pub const __DARWIN_ONLY_VERS_1050 = @as(c_int, 1);
pub const __DARWIN_UNIX03 = @as(c_int, 1);
pub const __DARWIN_64_BIT_INO_T = @as(c_int, 1);
pub const __DARWIN_VERS_1050 = @as(c_int, 1);
pub const __DARWIN_NON_CANCELABLE = @as(c_int, 0);
pub const __DARWIN_SUF_UNIX03 = "";
pub const __DARWIN_SUF_64_BIT_INO_T = "";
pub const __DARWIN_SUF_1050 = "";
pub const __DARWIN_SUF_NON_CANCELABLE = "";
pub const __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_9(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_5(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_6(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15_4(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_16(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_0(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_2(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_3(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub const ___POSIX_C_DEPRECATED_STARTING_198808L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199009L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199209L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199309L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199506L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_200112L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_200809L = "";
pub const __DARWIN_C_ANSI = @as(c_long, 0o10000);
pub const __DARWIN_C_FULL = @as(c_long, 900000);
pub const __DARWIN_C_LEVEL = __DARWIN_C_FULL;
pub const __STDC_WANT_LIB_EXT1__ = @as(c_int, 1);
pub const __DARWIN_NO_LONG_LONG = @as(c_int, 0);
pub const _DARWIN_FEATURE_64_BIT_INODE = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_VERS_1050 = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = @as(c_int, 1);
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE = @as(c_int, 3);
pub const __has_ptrcheck = @as(c_int, 0);
pub const __single = "";
pub const __unsafe_indexable = "";
pub const __null_terminated = "";
pub inline fn __unsafe_forge_bidi_indexable(T: anytype, P: anytype, S: anytype) @TypeOf(T(P)) {
    _ = &T;
    _ = &P;
    _ = &S;
    return T(P);
}
pub const __unsafe_forge_single = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub inline fn __terminated_by_to_indexable(P: anytype) @TypeOf(P) {
    _ = &P;
    return P;
}
pub inline fn __unsafe_terminated_by_to_indexable(P: anytype) @TypeOf(P) {
    _ = &P;
    return P;
}
pub inline fn __null_terminated_to_indexable(P: anytype) @TypeOf(P) {
    _ = &P;
    return P;
}
pub inline fn __unsafe_null_terminated_to_indexable(P: anytype) @TypeOf(P) {
    _ = &P;
    return P;
}
pub const __array_decay_dicards_count_in_parameters = "";
pub const __unsafe_late_const = "";
pub const __ASSUME_PTR_ABI_SINGLE_BEGIN = __ptrcheck_abi_assume_single();
pub const __ASSUME_PTR_ABI_SINGLE_END = __ptrcheck_abi_assume_unsafe_indexable();
pub const __header_indexable = "";
pub const __header_bidi_indexable = "";
pub const __kernel_ptr_semantics = "";
pub const __kernel_data_semantics = "";
pub const __kernel_dual_semantics = "";
pub const _BSD_MACHINE__TYPES_H_ = "";
pub const _BSD_ARM__TYPES_H_ = "";
pub const __DARWIN_NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const _SYS__PTHREAD_TYPES_H_ = "";
pub const __PTHREAD_SIZE__ = @as(c_int, 8176);
pub const __PTHREAD_ATTR_SIZE__ = @as(c_int, 56);
pub const __PTHREAD_MUTEXATTR_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_MUTEX_SIZE__ = @as(c_int, 56);
pub const __PTHREAD_CONDATTR_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_COND_SIZE__ = @as(c_int, 40);
pub const __PTHREAD_ONCE_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_RWLOCK_SIZE__ = @as(c_int, 192);
pub const __PTHREAD_RWLOCKATTR_SIZE__ = @as(c_int, 16);
pub const _INTPTR_T = "";
pub const _BSD_MACHINE_TYPES_H_ = "";
pub const _ARM_MACHTYPES_H_ = "";
pub const _MACHTYPES_H_ = "";
pub const _U_INT8_T = "";
pub const _U_INT16_T = "";
pub const _U_INT32_T = "";
pub const _U_INT64_T = "";
pub const _UINTPTR_T = "";
pub const USER_ADDR_NULL = @import("std").zig.c_translation.cast(user_addr_t, @as(c_int, 0));
pub inline fn CAST_USER_ADDR_T(a_ptr: anytype) user_addr_t {
    _ = &a_ptr;
    return @import("std").zig.c_translation.cast(user_addr_t, @import("std").zig.c_translation.cast(usize, a_ptr));
}
pub const _INTMAX_T = "";
pub const _UINTMAX_T = "";
pub inline fn INT8_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub inline fn INT16_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub inline fn INT32_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub inline fn UINT8_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub inline fn UINT16_C(v: anytype) @TypeOf(v) {
    _ = &v;
    return v;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = @as(c_longlong, 9223372036854775807);
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const INT32_MIN = -INT32_MAX - @as(c_int, 1);
pub const INT64_MIN = -INT64_MAX - @as(c_int, 1);
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = @as(c_ulonglong, 18446744073709551615);
pub const INT_LEAST8_MIN = INT8_MIN;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const INT_LEAST8_MAX = INT8_MAX;
pub const INT_LEAST16_MAX = INT16_MAX;
pub const INT_LEAST32_MAX = INT32_MAX;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const INT_FAST8_MIN = INT8_MIN;
pub const INT_FAST16_MIN = INT16_MIN;
pub const INT_FAST32_MIN = INT32_MIN;
pub const INT_FAST64_MIN = INT64_MIN;
pub const INT_FAST8_MAX = INT8_MAX;
pub const INT_FAST16_MAX = INT16_MAX;
pub const INT_FAST32_MAX = INT32_MAX;
pub const INT_FAST64_MAX = INT64_MAX;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INTPTR_MIN = -INTPTR_MAX - @as(c_int, 1);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MAX = INTMAX_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = UINTMAX_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTMAX_MIN = -INTMAX_MAX - @as(c_int, 1);
pub const PTRDIFF_MIN = INTMAX_MIN;
pub const PTRDIFF_MAX = INTMAX_MAX;
pub const SIZE_MAX = UINTPTR_MAX;
pub const RSIZE_MAX = SIZE_MAX >> @as(c_int, 1);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = -WCHAR_MAX - @as(c_int, 1);
pub const WINT_MIN = INT32_MIN;
pub const WINT_MAX = INT32_MAX;
pub const SIG_ATOMIC_MIN = INT32_MIN;
pub const SIG_ATOMIC_MAX = INT32_MAX;
pub const _Block_H_ = "";
pub const __MACTYPES__ = "";
pub const __CONDITIONALMACROS__ = "";
pub const UNIVERSAL_INTERFACES_VERSION = @as(c_int, 0x0400);
pub const PRAGMA_IMPORT = @as(c_int, 0);
pub const PRAGMA_ONCE = @as(c_int, 0);
pub const PRAGMA_STRUCT_PACK = @as(c_int, 1);
pub const PRAGMA_STRUCT_PACKPUSH = @as(c_int, 1);
pub const PRAGMA_STRUCT_ALIGN = @as(c_int, 0);
pub const PRAGMA_ENUM_PACK = @as(c_int, 0);
pub const PRAGMA_ENUM_ALWAYSINT = @as(c_int, 0);
pub const PRAGMA_ENUM_OPTIONS = @as(c_int, 0);
pub inline fn FOUR_CHAR_CODE(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub const TYPE_EXTENDED = @as(c_int, 0);
pub const TYPE_LONGDOUBLE_IS_DOUBLE = @as(c_int, 0);
pub const TYPE_LONGLONG = @as(c_int, 1);
pub const FUNCTION_PASCAL = @as(c_int, 0);
pub const FUNCTION_DECLSPEC = @as(c_int, 0);
pub const FUNCTION_WIN32CC = @as(c_int, 0);
pub inline fn DEFINE_API(_type: anytype) @TypeOf(_type) {
    _ = &_type;
    return _type;
}
pub inline fn DEFINE_API_C(_type: anytype) @TypeOf(_type) {
    _ = &_type;
    return _type;
}
pub inline fn DEFINE_API_STDCALL(_type: anytype) @TypeOf(_type) {
    _ = &_type;
    return _type;
}
pub inline fn DEFINE_API_C_STDCALL(_type: anytype) @TypeOf(_type) {
    _ = &_type;
    return _type;
}
pub inline fn CALLBACK_API(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    _ = &_type;
    _ = &_name;
    return _type(_name.*);
}
pub inline fn CALLBACK_API_C(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    _ = &_type;
    _ = &_name;
    return _type(_name.*);
}
pub inline fn CALLBACK_API_STDCALL(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    _ = &_type;
    _ = &_name;
    return _type(_name.*);
}
pub inline fn CALLBACK_API_C_STDCALL(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    _ = &_type;
    _ = &_name;
    return _type(_name.*);
}
pub const pascal = "";
pub const TARGET_API_MAC_OS8 = @as(c_int, 0);
pub const TARGET_API_MAC_CARBON = @as(c_int, 1);
pub const TARGET_API_MAC_OSX = @as(c_int, 1);
pub const TARGET_CARBON = @as(c_int, 1);
pub const OLDROUTINENAMES = @as(c_int, 0);
pub const OPAQUE_TOOLBOX_STRUCTS = @as(c_int, 1);
pub const OPAQUE_UPP_TYPES = @as(c_int, 1);
pub const ACCESSOR_CALLS_ARE_FUNCTIONS = @as(c_int, 1);
pub const CALL_NOT_IN_CARBON = @as(c_int, 0);
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS = @as(c_int, 1);
pub const _SYS_TYPES_H_ = "";
pub const __SYS_APPLEAPIOPTS_H__ = "";
pub const __APPLE_API_STANDARD = "";
pub const __APPLE_API_STABLE = "";
pub const __APPLE_API_EVOLVING = "";
pub const __APPLE_API_UNSTABLE = "";
pub const __APPLE_API_PRIVATE = "";
pub const __APPLE_API_OBSOLETE = "";
pub const _BSD_MACHINE_ENDIAN_H_ = "";
pub const _ARM__ENDIAN_H_ = "";
pub const _QUAD_HIGHWORD = @as(c_int, 1);
pub const _QUAD_LOWWORD = @as(c_int, 0);
pub const __DARWIN_LITTLE_ENDIAN = @as(c_int, 1234);
pub const __DARWIN_BIG_ENDIAN = @as(c_int, 4321);
pub const __DARWIN_PDP_ENDIAN = @as(c_int, 3412);
pub const __DARWIN_BYTE_ORDER = __DARWIN_LITTLE_ENDIAN;
pub const LITTLE_ENDIAN = __DARWIN_LITTLE_ENDIAN;
pub const BIG_ENDIAN = __DARWIN_BIG_ENDIAN;
pub const PDP_ENDIAN = __DARWIN_PDP_ENDIAN;
pub const BYTE_ORDER = __DARWIN_BYTE_ORDER;
pub const _SYS__ENDIAN_H_ = "";
pub const _OS__OSBYTEORDER_H = "";
pub inline fn __DARWIN_OSSwapConstInt16(x: anytype) __uint16_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint16_t, ((@import("std").zig.c_translation.cast(__uint16_t, x) & @as(c_uint, 0xff00)) >> @as(c_int, 8)) | ((@import("std").zig.c_translation.cast(__uint16_t, x) & @as(c_uint, 0x00ff)) << @as(c_int, 8)));
}
pub inline fn __DARWIN_OSSwapConstInt32(x: anytype) __uint32_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint32_t, ((((@import("std").zig.c_translation.cast(__uint32_t, x) & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hex)) >> @as(c_int, 24)) | ((@import("std").zig.c_translation.cast(__uint32_t, x) & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hex)) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint32_t, x) & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint32_t, x) & @as(c_uint, 0x000000ff)) << @as(c_int, 24)));
}
pub inline fn __DARWIN_OSSwapConstInt64(x: anytype) __uint64_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint64_t, ((((((((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56)));
}
pub const _OS_OSBYTEORDERARM_H = "";
pub const _ARM_ARCH_H = "";
pub inline fn __DARWIN_OSSwapInt16(x: anytype) __uint16_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint16_t, if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt16(x) else _OSSwapInt16(x));
}
pub inline fn __DARWIN_OSSwapInt32(x: anytype) @TypeOf(if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt32(x) else _OSSwapInt32(x)) {
    _ = &x;
    return if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt32(x) else _OSSwapInt32(x);
}
pub inline fn __DARWIN_OSSwapInt64(x: anytype) @TypeOf(if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt64(x) else _OSSwapInt64(x)) {
    _ = &x;
    return if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt64(x) else _OSSwapInt64(x);
}
pub inline fn ntohs(x: anytype) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt16(x);
}
pub inline fn htons(x: anytype) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt16(x);
}
pub inline fn ntohl(x: anytype) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt32(x);
}
pub inline fn htonl(x: anytype) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt32(x);
}
pub inline fn ntohll(x: anytype) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt64(x);
}
pub inline fn htonll(x: anytype) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt64(x);
}
pub const _U_CHAR = "";
pub const _U_SHORT = "";
pub const _U_INT = "";
pub const _U_LONG = "";
pub const _CADDR_T = "";
pub const _DEV_T = "";
pub const _BLKCNT_T = "";
pub const _BLKSIZE_T = "";
pub const _GID_T = "";
pub const _IN_ADDR_T = "";
pub const _IN_PORT_T = "";
pub const _INO_T = "";
pub const _INO64_T = "";
pub const _KEY_T = "";
pub const _MODE_T = "";
pub const _NLINK_T = "";
pub const _ID_T = "";
pub const _PID_T = "";
pub const _OFF_T = "";
pub const _UID_T = "";
pub inline fn major(x: anytype) i32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(i32, (@import("std").zig.c_translation.cast(u_int32_t, x) >> @as(c_int, 24)) & @as(c_int, 0xff));
}
pub inline fn minor(x: anytype) i32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(i32, x & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff, .hex));
}
pub inline fn makedev(x: anytype, y: anytype) dev_t {
    _ = &x;
    _ = &y;
    return @import("std").zig.c_translation.cast(dev_t, (x << @as(c_int, 24)) | y);
}
pub const _CLOCK_T = "";
pub const _SSIZE_T = "";
pub const _TIME_T = "";
pub const _USECONDS_T = "";
pub const _SUSECONDS_T = "";
pub const _RSIZE_T = "";
pub const _ERRNO_T = "";
pub const _FD_SET = "";
pub const __DARWIN_FD_SETSIZE = @as(c_int, 1024);
pub const __DARWIN_NBBY = @as(c_int, 8);
pub const __DARWIN_NFDBITS = @import("std").zig.c_translation.sizeof(__int32_t) * __DARWIN_NBBY;
pub inline fn __DARWIN_howmany(x: anytype, y: anytype) @TypeOf(if (@import("std").zig.c_translation.MacroArithmetic.rem(x, y) == @as(c_int, 0)) @import("std").zig.c_translation.MacroArithmetic.div(x, y) else @import("std").zig.c_translation.MacroArithmetic.div(x, y) + @as(c_int, 1)) {
    _ = &x;
    _ = &y;
    return if (@import("std").zig.c_translation.MacroArithmetic.rem(x, y) == @as(c_int, 0)) @import("std").zig.c_translation.MacroArithmetic.div(x, y) else @import("std").zig.c_translation.MacroArithmetic.div(x, y) + @as(c_int, 1);
}
pub inline fn __DARWIN_FD_SET(n: anytype, p: anytype) @TypeOf(__darwin_fd_set(n, p)) {
    _ = &n;
    _ = &p;
    return __darwin_fd_set(n, p);
}
pub inline fn __DARWIN_FD_CLR(n: anytype, p: anytype) @TypeOf(__darwin_fd_clr(n, p)) {
    _ = &n;
    _ = &p;
    return __darwin_fd_clr(n, p);
}
pub inline fn __DARWIN_FD_ISSET(n: anytype, p: anytype) @TypeOf(__darwin_fd_isset(n, p)) {
    _ = &n;
    _ = &p;
    return __darwin_fd_isset(n, p);
}
pub const NBBY = __DARWIN_NBBY;
pub const NFDBITS = __DARWIN_NFDBITS;
pub inline fn howmany(x: anytype, y: anytype) @TypeOf(__DARWIN_howmany(x, y)) {
    _ = &x;
    _ = &y;
    return __DARWIN_howmany(x, y);
}
pub const FD_SETSIZE = __DARWIN_FD_SETSIZE;
pub inline fn FD_SET(n: anytype, p: anytype) @TypeOf(__DARWIN_FD_SET(n, p)) {
    _ = &n;
    _ = &p;
    return __DARWIN_FD_SET(n, p);
}
pub inline fn FD_CLR(n: anytype, p: anytype) @TypeOf(__DARWIN_FD_CLR(n, p)) {
    _ = &n;
    _ = &p;
    return __DARWIN_FD_CLR(n, p);
}
pub inline fn FD_ZERO(p: anytype) @TypeOf(__DARWIN_FD_ZERO(p)) {
    _ = &p;
    return __DARWIN_FD_ZERO(p);
}
pub inline fn FD_ISSET(n: anytype, p: anytype) @TypeOf(__DARWIN_FD_ISSET(n, p)) {
    _ = &n;
    _ = &p;
    return __DARWIN_FD_ISSET(n, p);
}
pub inline fn FD_COPY(f: anytype, t: anytype) @TypeOf(__DARWIN_FD_COPY(f, t)) {
    _ = &f;
    _ = &t;
    return __DARWIN_FD_COPY(f, t);
}
pub const _PTHREAD_ATTR_T = "";
pub const _PTHREAD_COND_T = "";
pub const _PTHREAD_CONDATTR_T = "";
pub const _PTHREAD_MUTEX_T = "";
pub const _PTHREAD_MUTEXATTR_T = "";
pub const _PTHREAD_ONCE_T = "";
pub const _PTHREAD_RWLOCK_T = "";
pub const _PTHREAD_RWLOCKATTR_T = "";
pub const _PTHREAD_T = "";
pub const _PTHREAD_KEY_T = "";
pub const _FSBLKCNT_T = "";
pub const _FSFILCNT_T = "";
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY = @as(c_int, 0);
pub const ALLOW_OBSOLETE_CARBON_OSUTILS = @as(c_int, 0);
pub const nil = __DARWIN_NULL;
pub const kInvalidID = @as(c_int, 0);
pub const CF_EXTERN_C_BEGIN = "";
pub const CF_EXTERN_C_END = "";
pub const TRUE = @as(c_int, 1);
pub const FALSE = @as(c_int, 0);
pub const CF_AUTOMATED_REFCOUNT_UNAVAILABLE = "";
pub const __covariant = "";
pub const __contravariant = "";
pub const kCFCoreFoundationVersionNumber10_0 = @as(f64, 196.40);
pub const kCFCoreFoundationVersionNumber10_0_3 = @as(f64, 196.50);
pub const kCFCoreFoundationVersionNumber10_1 = @as(f64, 226.00);
pub const kCFCoreFoundationVersionNumber10_1_1 = @as(f64, 226.00);
pub const kCFCoreFoundationVersionNumber10_1_2 = @as(f64, 227.20);
pub const kCFCoreFoundationVersionNumber10_1_3 = @as(f64, 227.20);
pub const kCFCoreFoundationVersionNumber10_1_4 = @as(f64, 227.30);
pub const kCFCoreFoundationVersionNumber10_2 = @as(f64, 263.00);
pub const kCFCoreFoundationVersionNumber10_2_1 = @as(f64, 263.10);
pub const kCFCoreFoundationVersionNumber10_2_2 = @as(f64, 263.10);
pub const kCFCoreFoundationVersionNumber10_2_3 = @as(f64, 263.30);
pub const kCFCoreFoundationVersionNumber10_2_4 = @as(f64, 263.30);
pub const kCFCoreFoundationVersionNumber10_2_5 = @as(f64, 263.50);
pub const kCFCoreFoundationVersionNumber10_2_6 = @as(f64, 263.50);
pub const kCFCoreFoundationVersionNumber10_2_7 = @as(f64, 263.50);
pub const kCFCoreFoundationVersionNumber10_2_8 = @as(f64, 263.50);
pub const kCFCoreFoundationVersionNumber10_3 = @as(f64, 299.00);
pub const kCFCoreFoundationVersionNumber10_3_1 = @as(f64, 299.00);
pub const kCFCoreFoundationVersionNumber10_3_2 = @as(f64, 299.00);
pub const kCFCoreFoundationVersionNumber10_3_3 = @as(f64, 299.30);
pub const kCFCoreFoundationVersionNumber10_3_4 = @as(f64, 299.31);
pub const kCFCoreFoundationVersionNumber10_3_5 = @as(f64, 299.31);
pub const kCFCoreFoundationVersionNumber10_3_6 = @as(f64, 299.32);
pub const kCFCoreFoundationVersionNumber10_3_7 = @as(f64, 299.33);
pub const kCFCoreFoundationVersionNumber10_3_8 = @as(f64, 299.33);
pub const kCFCoreFoundationVersionNumber10_3_9 = @as(f64, 299.35);
pub const kCFCoreFoundationVersionNumber10_4 = @as(f64, 368.00);
pub const kCFCoreFoundationVersionNumber10_4_1 = @as(f64, 368.10);
pub const kCFCoreFoundationVersionNumber10_4_2 = @as(f64, 368.11);
pub const kCFCoreFoundationVersionNumber10_4_3 = @as(f64, 368.18);
pub const kCFCoreFoundationVersionNumber10_4_4_Intel = @as(f64, 368.26);
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC = @as(f64, 368.25);
pub const kCFCoreFoundationVersionNumber10_4_5_Intel = @as(f64, 368.26);
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC = @as(f64, 368.25);
pub const kCFCoreFoundationVersionNumber10_4_6_Intel = @as(f64, 368.26);
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC = @as(f64, 368.25);
pub const kCFCoreFoundationVersionNumber10_4_7 = @as(f64, 368.27);
pub const kCFCoreFoundationVersionNumber10_4_8 = @as(f64, 368.27);
pub const kCFCoreFoundationVersionNumber10_4_9 = @as(f64, 368.28);
pub const kCFCoreFoundationVersionNumber10_4_10 = @as(f64, 368.28);
pub const kCFCoreFoundationVersionNumber10_4_11 = @as(f64, 368.31);
pub const kCFCoreFoundationVersionNumber10_5 = @as(f64, 476.00);
pub const kCFCoreFoundationVersionNumber10_5_1 = @as(f64, 476.00);
pub const kCFCoreFoundationVersionNumber10_5_2 = @as(f64, 476.10);
pub const kCFCoreFoundationVersionNumber10_5_3 = @as(f64, 476.13);
pub const kCFCoreFoundationVersionNumber10_5_4 = @as(f64, 476.14);
pub const kCFCoreFoundationVersionNumber10_5_5 = @as(f64, 476.15);
pub const kCFCoreFoundationVersionNumber10_5_6 = @as(f64, 476.17);
pub const kCFCoreFoundationVersionNumber10_5_7 = @as(f64, 476.18);
pub const kCFCoreFoundationVersionNumber10_5_8 = @as(f64, 476.19);
pub const kCFCoreFoundationVersionNumber10_6 = @as(f64, 550.00);
pub const kCFCoreFoundationVersionNumber10_6_1 = @as(f64, 550.00);
pub const kCFCoreFoundationVersionNumber10_6_2 = @as(f64, 550.13);
pub const kCFCoreFoundationVersionNumber10_6_3 = @as(f64, 550.19);
pub const kCFCoreFoundationVersionNumber10_6_4 = @as(f64, 550.29);
pub const kCFCoreFoundationVersionNumber10_6_5 = @as(f64, 550.42);
pub const kCFCoreFoundationVersionNumber10_6_6 = @as(f64, 550.42);
pub const kCFCoreFoundationVersionNumber10_6_7 = @as(f64, 550.42);
pub const kCFCoreFoundationVersionNumber10_6_8 = @as(f64, 550.43);
pub const kCFCoreFoundationVersionNumber10_7 = @as(f64, 635.00);
pub const kCFCoreFoundationVersionNumber10_7_1 = @as(f64, 635.00);
pub const kCFCoreFoundationVersionNumber10_7_2 = @as(f64, 635.15);
pub const kCFCoreFoundationVersionNumber10_7_3 = @as(f64, 635.19);
pub const kCFCoreFoundationVersionNumber10_7_4 = @as(f64, 635.21);
pub const kCFCoreFoundationVersionNumber10_7_5 = @as(f64, 635.21);
pub const kCFCoreFoundationVersionNumber10_8 = @as(f64, 744.00);
pub const kCFCoreFoundationVersionNumber10_8_1 = @as(f64, 744.00);
pub const kCFCoreFoundationVersionNumber10_8_2 = @as(f64, 744.12);
pub const kCFCoreFoundationVersionNumber10_8_3 = @as(f64, 744.18);
pub const kCFCoreFoundationVersionNumber10_8_4 = @as(f64, 744.19);
pub const kCFCoreFoundationVersionNumber10_9 = @as(f64, 855.11);
pub const kCFCoreFoundationVersionNumber10_9_1 = @as(f64, 855.11);
pub const kCFCoreFoundationVersionNumber10_9_2 = @as(f64, 855.14);
pub const kCFCoreFoundationVersionNumber10_10 = @as(f64, 1151.16);
pub const kCFCoreFoundationVersionNumber10_10_1 = @as(f64, 1151.16);
pub const kCFCoreFoundationVersionNumber10_10_2 = @as(c_int, 1152);
pub const kCFCoreFoundationVersionNumber10_10_3 = @as(f64, 1153.18);
pub const kCFCoreFoundationVersionNumber10_10_4 = @as(f64, 1153.18);
pub const kCFCoreFoundationVersionNumber10_10_5 = @as(f64, 1153.18);
pub const kCFCoreFoundationVersionNumber10_10_Max = @as(c_int, 1199);
pub const kCFCoreFoundationVersionNumber10_11 = @as(c_int, 1253);
pub const kCFCoreFoundationVersionNumber10_11_1 = @as(f64, 1255.1);
pub const kCFCoreFoundationVersionNumber10_11_2 = @as(f64, 1256.14);
pub const kCFCoreFoundationVersionNumber10_11_3 = @as(f64, 1256.14);
pub const kCFCoreFoundationVersionNumber10_11_4 = @as(f64, 1258.1);
pub const kCFCoreFoundationVersionNumber10_11_Max = @as(c_int, 1299);
pub const __ptrauth_objc_isa_pointer = "";
pub const ISA_PTRAUTH_DISCRIMINATOR = @as(c_int, 0x6AE1);
pub const __ptrauth_cf_objc_isa_pointer = "";
pub const __COREFOUNDATION_CFCGTYPES__ = @as(c_int, 1);
pub const CF_DEFINES_CG_TYPES = "";
pub const CGFLOAT_TYPE = f64;
pub const CGFLOAT_IS_DOUBLE = @as(c_int, 1);
pub const CGFLOAT_MIN = DBL_MIN;
pub const CGFLOAT_MAX = DBL_MAX;
pub const CGFLOAT_EPSILON = DBL_EPSILON;
pub const CGFLOAT_DEFINED = @as(c_int, 1);
pub const CGVECTOR_DEFINED = @as(c_int, 1);
pub const CF_DEFINES_CGAFFINETRANSFORMCOMPONENTS = "";
pub const CG_EXTERN_64 = CG_EXTERN;
pub const CG_SKYLIGHT_EXTERN_64 = CG_EXTERN;
pub const CG_LOCAL_64 = CG_LOCAL;
pub inline fn CG_OSX_VERSION(v: anytype) @TypeOf((v > @as(c_int, 0)) and (__MAC_OS_X_VERSION_MAX_ALLOWED >= v)) {
    _ = &v;
    return (v > @as(c_int, 0)) and (__MAC_OS_X_VERSION_MAX_ALLOWED >= v);
}
pub inline fn CG_IOS_VERSION(v: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &v;
    return @as(c_int, 0);
}
pub inline fn CG_TV_VERSION(v: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &v;
    return @as(c_int, 0);
}
pub inline fn CG_WATCH_VERSION(v: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &v;
    return @as(c_int, 0);
}
pub inline fn CG_BRIDGE_VERSION(v: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &v;
    return @as(c_int, 0);
}
pub const CG_OS_VERSION_2020 = ((((CG_OSX_VERSION(__MAC_10_16) != 0) or (CG_IOS_VERSION(__IPHONE_14_0) != 0)) or (CG_TV_VERSION(__TVOS_14_0) != 0)) or (CG_WATCH_VERSION(__WATCHOS_7_0) != 0)) or (CG_BRIDGE_VERSION(@import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal)) != 0);
pub const CG_OBSOLETE = __CG_DEPRECATED;
pub const CG_PRIVATE_EXTERN = CG_LOCAL;
pub const cg_nullable = __nullable;
pub const CG_NONNULL_ARRAY = __nonnull;
pub const CG_NULLABLE_ARRAY = __nullable;
pub const CGAFFINETRANSFORM_H_ = "";
pub const CGGEOMETRY_H_ = "";
pub const __COREFOUNDATION_CFDICTIONARY__ = @as(c_int, 1);
pub const CGBITMAPCONTEXT_H_ = "";
pub const CGCONTEXT_H_ = "";
pub const CGCOLOR_H_ = "";
pub const CGCOLORSPACE_H_ = "";
pub const CGDATAPROVIDER_H_ = "";
pub const __COREFOUNDATION_CFURL__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFDATA__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFERROR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFSTRING__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFARRAY__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFCHARACTERSET__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFLOCALE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__ = @as(c_int, 1);
pub const __GNUC_VA_LIST = "";
pub const __STDARG_H = "";
pub const _VA_LIST = "";
pub const kCFStringEncodingInvalidId = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hex);
pub const __kCFStringInlineBufferLength = @as(c_int, 64);
pub const CG_HDR_BT_2100 = @as(c_int, 1);
pub const CGPATTERN_H_ = "";
pub const CGFONT_H_ = "";
pub const CGGRADIENT_H_ = "";
pub const CGIMAGE_H_ = "";
pub const CGPATH_H_ = "";
pub const CGPDFDOCUMENT_H_ = "";
pub const CGPDFPAGE_H_ = "";
pub const CGPDFDICTIONARY_H_ = "";
pub const CGPDFARRAY_H_ = "";
pub const CGPDFOBJECT_H_ = "";
pub const CGPDFSTREAM_H_ = "";
pub const CGPDFSTRING_H_ = "";
pub const __COREFOUNDATION_CFDATE__ = @as(c_int, 1);
pub const CGSHADING_H_ = "";
pub const CGFUNCTION_H_ = "";
pub const CGCOLORCONVERSIONINFO_H_ = "";
pub const CGCONVERTCOLORDATAWITHFORMAT_H = "";
pub const __COREFOUNDATION_COREFOUNDATION__ = @as(c_int, 1);
pub const __COREFOUNDATION__ = @as(c_int, 1);
pub inline fn assert(e: anytype) anyopaque {
    _ = &e;
    return @import("std").zig.c_translation.cast(anyopaque, @as(c_int, 0));
}
pub const _ASSERT_H_ = "";
pub const _CTYPE_H_ = "";
pub const __CTYPE_H_ = "";
pub const _RUNETYPE_H_ = "";
pub const __TYPES_H_ = "";
pub const __DARWIN_WCHAR_MAX = __WCHAR_MAX__;
pub const __DARWIN_WCHAR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex) - @as(c_int, 1);
pub const __DARWIN_WEOF = @import("std").zig.c_translation.cast(__darwin_wint_t, -@as(c_int, 1));
pub const _FORTIFY_SOURCE = @as(c_int, 2);
pub const _CT_RUNE_T = "";
pub const _RUNE_T = "";
pub const _WINT_T = "";
pub const _CACHED_RUNES = @as(c_int, 1) << @as(c_int, 8);
pub const _CRMASK = ~(_CACHED_RUNES - @as(c_int, 1));
pub const _RUNE_MAGIC_A = "RuneMagA";
pub const _CTYPE_A = @as(c_long, 0x00000100);
pub const _CTYPE_C = @as(c_long, 0x00000200);
pub const _CTYPE_D = @as(c_long, 0x00000400);
pub const _CTYPE_G = @as(c_long, 0x00000800);
pub const _CTYPE_L = @as(c_long, 0x00001000);
pub const _CTYPE_P = @as(c_long, 0x00002000);
pub const _CTYPE_S = @as(c_long, 0x00004000);
pub const _CTYPE_U = @as(c_long, 0x00008000);
pub const _CTYPE_X = @as(c_long, 0x00010000);
pub const _CTYPE_B = @as(c_long, 0x00020000);
pub const _CTYPE_R = @as(c_long, 0x00040000);
pub const _CTYPE_I = @as(c_long, 0x00080000);
pub const _CTYPE_T = @as(c_long, 0x00100000);
pub const _CTYPE_Q = @as(c_long, 0x00200000);
pub const _CTYPE_SW0 = @as(c_long, 0x20000000);
pub const _CTYPE_SW1 = @as(c_long, 0x40000000);
pub const _CTYPE_SW2 = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0x80000000, .hex);
pub const _CTYPE_SW3 = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0xc0000000, .hex);
pub const _CTYPE_SWM = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0xe0000000, .hex);
pub const _CTYPE_SWS = @as(c_int, 30);
pub const __DARWIN_CTYPE_inline = __header_inline;
pub const __DARWIN_CTYPE_TOP_inline = __header_inline;
pub inline fn _tolower(c: anytype) @TypeOf(__tolower(c)) {
    _ = &c;
    return __tolower(c);
}
pub inline fn _toupper(c: anytype) @TypeOf(__toupper(c)) {
    _ = &c;
    return __toupper(c);
}
pub const _SYS_ERRNO_H_ = "";
pub const errno = __error().*;
pub const EPERM = @as(c_int, 1);
pub const ENOENT = @as(c_int, 2);
pub const ESRCH = @as(c_int, 3);
pub const EINTR = @as(c_int, 4);
pub const EIO = @as(c_int, 5);
pub const ENXIO = @as(c_int, 6);
pub const E2BIG = @as(c_int, 7);
pub const ENOEXEC = @as(c_int, 8);
pub const EBADF = @as(c_int, 9);
pub const ECHILD = @as(c_int, 10);
pub const EDEADLK = @as(c_int, 11);
pub const ENOMEM = @as(c_int, 12);
pub const EACCES = @as(c_int, 13);
pub const EFAULT = @as(c_int, 14);
pub const ENOTBLK = @as(c_int, 15);
pub const EBUSY = @as(c_int, 16);
pub const EEXIST = @as(c_int, 17);
pub const EXDEV = @as(c_int, 18);
pub const ENODEV = @as(c_int, 19);
pub const ENOTDIR = @as(c_int, 20);
pub const EISDIR = @as(c_int, 21);
pub const EINVAL = @as(c_int, 22);
pub const ENFILE = @as(c_int, 23);
pub const EMFILE = @as(c_int, 24);
pub const ENOTTY = @as(c_int, 25);
pub const ETXTBSY = @as(c_int, 26);
pub const EFBIG = @as(c_int, 27);
pub const ENOSPC = @as(c_int, 28);
pub const ESPIPE = @as(c_int, 29);
pub const EROFS = @as(c_int, 30);
pub const EMLINK = @as(c_int, 31);
pub const EPIPE = @as(c_int, 32);
pub const EDOM = @as(c_int, 33);
pub const ERANGE = @as(c_int, 34);
pub const EAGAIN = @as(c_int, 35);
pub const EWOULDBLOCK = EAGAIN;
pub const EINPROGRESS = @as(c_int, 36);
pub const EALREADY = @as(c_int, 37);
pub const ENOTSOCK = @as(c_int, 38);
pub const EDESTADDRREQ = @as(c_int, 39);
pub const EMSGSIZE = @as(c_int, 40);
pub const EPROTOTYPE = @as(c_int, 41);
pub const ENOPROTOOPT = @as(c_int, 42);
pub const EPROTONOSUPPORT = @as(c_int, 43);
pub const ESOCKTNOSUPPORT = @as(c_int, 44);
pub const ENOTSUP = @as(c_int, 45);
pub const EPFNOSUPPORT = @as(c_int, 46);
pub const EAFNOSUPPORT = @as(c_int, 47);
pub const EADDRINUSE = @as(c_int, 48);
pub const EADDRNOTAVAIL = @as(c_int, 49);
pub const ENETDOWN = @as(c_int, 50);
pub const ENETUNREACH = @as(c_int, 51);
pub const ENETRESET = @as(c_int, 52);
pub const ECONNABORTED = @as(c_int, 53);
pub const ECONNRESET = @as(c_int, 54);
pub const ENOBUFS = @as(c_int, 55);
pub const EISCONN = @as(c_int, 56);
pub const ENOTCONN = @as(c_int, 57);
pub const ESHUTDOWN = @as(c_int, 58);
pub const ETOOMANYREFS = @as(c_int, 59);
pub const ETIMEDOUT = @as(c_int, 60);
pub const ECONNREFUSED = @as(c_int, 61);
pub const ELOOP = @as(c_int, 62);
pub const ENAMETOOLONG = @as(c_int, 63);
pub const EHOSTDOWN = @as(c_int, 64);
pub const EHOSTUNREACH = @as(c_int, 65);
pub const ENOTEMPTY = @as(c_int, 66);
pub const EPROCLIM = @as(c_int, 67);
pub const EUSERS = @as(c_int, 68);
pub const EDQUOT = @as(c_int, 69);
pub const ESTALE = @as(c_int, 70);
pub const EREMOTE = @as(c_int, 71);
pub const EBADRPC = @as(c_int, 72);
pub const ERPCMISMATCH = @as(c_int, 73);
pub const EPROGUNAVAIL = @as(c_int, 74);
pub const EPROGMISMATCH = @as(c_int, 75);
pub const EPROCUNAVAIL = @as(c_int, 76);
pub const ENOLCK = @as(c_int, 77);
pub const ENOSYS = @as(c_int, 78);
pub const EFTYPE = @as(c_int, 79);
pub const EAUTH = @as(c_int, 80);
pub const ENEEDAUTH = @as(c_int, 81);
pub const EPWROFF = @as(c_int, 82);
pub const EDEVERR = @as(c_int, 83);
pub const EOVERFLOW = @as(c_int, 84);
pub const EBADEXEC = @as(c_int, 85);
pub const EBADARCH = @as(c_int, 86);
pub const ESHLIBVERS = @as(c_int, 87);
pub const EBADMACHO = @as(c_int, 88);
pub const ECANCELED = @as(c_int, 89);
pub const EIDRM = @as(c_int, 90);
pub const ENOMSG = @as(c_int, 91);
pub const EILSEQ = @as(c_int, 92);
pub const ENOATTR = @as(c_int, 93);
pub const EBADMSG = @as(c_int, 94);
pub const EMULTIHOP = @as(c_int, 95);
pub const ENODATA = @as(c_int, 96);
pub const ENOLINK = @as(c_int, 97);
pub const ENOSR = @as(c_int, 98);
pub const ENOSTR = @as(c_int, 99);
pub const EPROTO = @as(c_int, 100);
pub const ETIME = @as(c_int, 101);
pub const EOPNOTSUPP = @as(c_int, 102);
pub const ENOPOLICY = @as(c_int, 103);
pub const ENOTRECOVERABLE = @as(c_int, 104);
pub const EOWNERDEAD = @as(c_int, 105);
pub const EQFULL = @as(c_int, 106);
pub const ELAST = @as(c_int, 106);
pub const __CLANG_LIMITS_H = "";
pub const _GCC_LIMITS_H_ = "";
pub const _LIMITS_H_ = "";
pub const _BSD_MACHINE_LIMITS_H_ = "";
pub const _ARM_LIMITS_H_ = "";
pub const _ARM__LIMITS_H_ = "";
pub const __DARWIN_CLK_TCK = @as(c_int, 100);
pub const CHAR_BIT = @as(c_int, 8);
pub const MB_LEN_MAX = @as(c_int, 6);
pub const CLK_TCK = __DARWIN_CLK_TCK;
pub const SCHAR_MAX = @as(c_int, 127);
pub const SCHAR_MIN = -@as(c_int, 128);
pub const UCHAR_MAX = @as(c_int, 255);
pub const CHAR_MAX = @as(c_int, 127);
pub const CHAR_MIN = -@as(c_int, 128);
pub const USHRT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const SHRT_MAX = @as(c_int, 32767);
pub const SHRT_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const UINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex);
pub const INT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const ULONG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 0xffffffffffffffff, .hex);
pub const LONG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0x7fffffffffffffff, .hex);
pub const LONG_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 0x7fffffffffffffff, .hex) - @as(c_int, 1);
pub const ULLONG_MAX = @as(c_ulonglong, 0xffffffffffffffff);
pub const LLONG_MAX = @as(c_longlong, 0x7fffffffffffffff);
pub const LLONG_MIN = -@as(c_longlong, 0x7fffffffffffffff) - @as(c_int, 1);
pub const LONG_BIT = @as(c_int, 64);
pub const SSIZE_MAX = LONG_MAX;
pub const WORD_BIT = @as(c_int, 32);
pub const SIZE_T_MAX = ULONG_MAX;
pub const UQUAD_MAX = ULLONG_MAX;
pub const QUAD_MAX = LLONG_MAX;
pub const QUAD_MIN = LLONG_MIN;
pub const _SYS_SYSLIMITS_H_ = "";
pub const ARG_MAX = @as(c_int, 1024) * @as(c_int, 1024);
pub const CHILD_MAX = @as(c_int, 266);
pub const GID_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 2147483647, .decimal);
pub const LINK_MAX = @as(c_int, 32767);
pub const MAX_CANON = @as(c_int, 1024);
pub const MAX_INPUT = @as(c_int, 1024);
pub const NAME_MAX = @as(c_int, 255);
pub const NGROUPS_MAX = @as(c_int, 16);
pub const UID_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 2147483647, .decimal);
pub const OPEN_MAX = @as(c_int, 10240);
pub const PATH_MAX = @as(c_int, 1024);
pub const PIPE_BUF = @as(c_int, 512);
pub const BC_BASE_MAX = @as(c_int, 99);
pub const BC_DIM_MAX = @as(c_int, 2048);
pub const BC_SCALE_MAX = @as(c_int, 99);
pub const BC_STRING_MAX = @as(c_int, 1000);
pub const CHARCLASS_NAME_MAX = @as(c_int, 14);
pub const COLL_WEIGHTS_MAX = @as(c_int, 2);
pub const EQUIV_CLASS_MAX = @as(c_int, 2);
pub const EXPR_NEST_MAX = @as(c_int, 32);
pub const LINE_MAX = @as(c_int, 2048);
pub const RE_DUP_MAX = @as(c_int, 255);
pub const NZERO = @as(c_int, 20);
pub const _POSIX_ARG_MAX = @as(c_int, 4096);
pub const _POSIX_CHILD_MAX = @as(c_int, 25);
pub const _POSIX_LINK_MAX = @as(c_int, 8);
pub const _POSIX_MAX_CANON = @as(c_int, 255);
pub const _POSIX_MAX_INPUT = @as(c_int, 255);
pub const _POSIX_NAME_MAX = @as(c_int, 14);
pub const _POSIX_NGROUPS_MAX = @as(c_int, 8);
pub const _POSIX_OPEN_MAX = @as(c_int, 20);
pub const _POSIX_PATH_MAX = @as(c_int, 256);
pub const _POSIX_PIPE_BUF = @as(c_int, 512);
pub const _POSIX_SSIZE_MAX = @as(c_int, 32767);
pub const _POSIX_STREAM_MAX = @as(c_int, 8);
pub const _POSIX_TZNAME_MAX = @as(c_int, 6);
pub const _POSIX2_BC_BASE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_DIM_MAX = @as(c_int, 2048);
pub const _POSIX2_BC_SCALE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_STRING_MAX = @as(c_int, 1000);
pub const _POSIX2_EQUIV_CLASS_MAX = @as(c_int, 2);
pub const _POSIX2_EXPR_NEST_MAX = @as(c_int, 32);
pub const _POSIX2_LINE_MAX = @as(c_int, 2048);
pub const _POSIX2_RE_DUP_MAX = @as(c_int, 255);
pub const _POSIX_AIO_LISTIO_MAX = @as(c_int, 2);
pub const _POSIX_AIO_MAX = @as(c_int, 1);
pub const _POSIX_DELAYTIMER_MAX = @as(c_int, 32);
pub const _POSIX_MQ_OPEN_MAX = @as(c_int, 8);
pub const _POSIX_MQ_PRIO_MAX = @as(c_int, 32);
pub const _POSIX_RTSIG_MAX = @as(c_int, 8);
pub const _POSIX_SEM_NSEMS_MAX = @as(c_int, 256);
pub const _POSIX_SEM_VALUE_MAX = @as(c_int, 32767);
pub const _POSIX_SIGQUEUE_MAX = @as(c_int, 32);
pub const _POSIX_TIMER_MAX = @as(c_int, 32);
pub const _POSIX_CLOCKRES_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20000000, .decimal);
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 4);
pub const _POSIX_THREAD_KEYS_MAX = @as(c_int, 128);
pub const _POSIX_THREAD_THREADS_MAX = @as(c_int, 64);
pub const PTHREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 4);
pub const PTHREAD_KEYS_MAX = @as(c_int, 512);
pub const PTHREAD_STACK_MIN = @as(c_int, 16384);
pub const _POSIX_HOST_NAME_MAX = @as(c_int, 255);
pub const _POSIX_LOGIN_NAME_MAX = @as(c_int, 9);
pub const _POSIX_SS_REPL_MAX = @as(c_int, 4);
pub const _POSIX_SYMLINK_MAX = @as(c_int, 255);
pub const _POSIX_SYMLOOP_MAX = @as(c_int, 8);
pub const _POSIX_TRACE_EVENT_NAME_MAX = @as(c_int, 30);
pub const _POSIX_TRACE_NAME_MAX = @as(c_int, 8);
pub const _POSIX_TRACE_SYS_MAX = @as(c_int, 8);
pub const _POSIX_TRACE_USER_EVENT_MAX = @as(c_int, 32);
pub const _POSIX_TTY_NAME_MAX = @as(c_int, 9);
pub const _POSIX2_CHARCLASS_NAME_MAX = @as(c_int, 14);
pub const _POSIX2_COLL_WEIGHTS_MAX = @as(c_int, 2);
pub const _POSIX_RE_DUP_MAX = _POSIX2_RE_DUP_MAX;
pub const OFF_MIN = LLONG_MIN;
pub const OFF_MAX = LLONG_MAX;
pub const PASS_MAX = @as(c_int, 128);
pub const NL_ARGMAX = @as(c_int, 9);
pub const NL_LANGMAX = @as(c_int, 14);
pub const NL_MSGMAX = @as(c_int, 32767);
pub const NL_NMAX = @as(c_int, 1);
pub const NL_SETMAX = @as(c_int, 255);
pub const NL_TEXTMAX = @as(c_int, 2048);
pub const _XOPEN_IOV_MAX = @as(c_int, 16);
pub const IOV_MAX = @as(c_int, 1024);
pub const _XOPEN_NAME_MAX = @as(c_int, 255);
pub const _XOPEN_PATH_MAX = @as(c_int, 1024);
pub const LONG_LONG_MAX = __LONG_LONG_MAX__;
pub const LONG_LONG_MIN = -__LONG_LONG_MAX__ - @as(c_longlong, 1);
pub const ULONG_LONG_MAX = (__LONG_LONG_MAX__ * @as(c_ulonglong, 2)) + @as(c_ulonglong, 1);
pub const _LOCALE_H_ = "";
pub const __LOCALE_H_ = "";
pub const LC_ALL = @as(c_int, 0);
pub const LC_COLLATE = @as(c_int, 1);
pub const LC_CTYPE = @as(c_int, 2);
pub const LC_MONETARY = @as(c_int, 3);
pub const LC_NUMERIC = @as(c_int, 4);
pub const LC_TIME = @as(c_int, 5);
pub const LC_MESSAGES = @as(c_int, 6);
pub const _LC_LAST = @as(c_int, 7);
pub const __MATH_H__ = "";
pub const __MATH__ = "";
pub const HUGE_VALF = __builtin_huge_valf();
pub const NAN = __builtin_nanf("0x7fc00000");
pub const INFINITY = HUGE_VALF;
pub const FP_NAN = @as(c_int, 1);
pub const FP_INFINITE = @as(c_int, 2);
pub const FP_ZERO = @as(c_int, 3);
pub const FP_NORMAL = @as(c_int, 4);
pub const FP_SUBNORMAL = @as(c_int, 5);
pub const FP_SUPERNORMAL = @as(c_int, 6);
pub const FP_FAST_FMA = @as(c_int, 1);
pub const FP_FAST_FMAF = @as(c_int, 1);
pub const FP_FAST_FMAL = @as(c_int, 1);
pub const FP_ILOGB0 = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const FP_ILOGBNAN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const MATH_ERRNO = @as(c_int, 1);
pub const MATH_ERREXCEPT = @as(c_int, 2);
pub const math_errhandling = __math_errhandling();
pub const M_E = @as(f64, 2.71828182845904523536028747135266250);
pub const M_LOG2E = @as(f64, 1.44269504088896340735992468100189214);
pub const M_LOG10E = @as(f64, 0.434294481903251827651128918916605082);
pub const M_LN2 = @as(f64, 0.693147180559945309417232121458176568);
pub const M_LN10 = @as(f64, 2.30258509299404568401799145468436421);
pub const M_PI = @as(f64, 3.14159265358979323846264338327950288);
pub const M_PI_2 = @as(f64, 1.57079632679489661923132169163975144);
pub const M_PI_4 = @as(f64, 0.785398163397448309615660845819875721);
pub const M_1_PI = @as(f64, 0.318309886183790671537767526745028724);
pub const M_2_PI = @as(f64, 0.636619772367581343075535053490057448);
pub const M_2_SQRTPI = @as(f64, 1.12837916709551257389615890312154517);
pub const M_SQRT2 = @as(f64, 1.41421356237309504880168872420969808);
pub const M_SQRT1_2 = @as(f64, 0.707106781186547524400844362104849039);
pub const MAXFLOAT = @as(f32, 0x1.fffffep+127);
pub const FP_SNAN = FP_NAN;
pub const FP_QNAN = FP_NAN;
pub const HUGE = MAXFLOAT;
pub const X_TLOSS = @as(f64, 1.41484755040568800000e+16);
pub const DOMAIN = @as(c_int, 1);
pub const SING = @as(c_int, 2);
pub const OVERFLOW = @as(c_int, 3);
pub const UNDERFLOW = @as(c_int, 4);
pub const TLOSS = @as(c_int, 5);
pub const PLOSS = @as(c_int, 6);
pub const _BSD_SETJMP_H = "";
pub const _JBLEN = ((@as(c_int, 14) + @as(c_int, 8)) + @as(c_int, 2)) * @as(c_int, 2);
pub const _USER_SIGNAL_H = "";
pub const _SYS_SIGNAL_H_ = "";
pub const __DARWIN_NSIG = @as(c_int, 32);
pub const NSIG = __DARWIN_NSIG;
pub const _BSD_MACHINE_SIGNAL_H_ = "";
pub const _ARM_SIGNAL_ = @as(c_int, 1);
pub const SIGHUP = @as(c_int, 1);
pub const SIGINT = @as(c_int, 2);
pub const SIGQUIT = @as(c_int, 3);
pub const SIGILL = @as(c_int, 4);
pub const SIGTRAP = @as(c_int, 5);
pub const SIGABRT = @as(c_int, 6);
pub const SIGIOT = SIGABRT;
pub const SIGEMT = @as(c_int, 7);
pub const SIGFPE = @as(c_int, 8);
pub const SIGKILL = @as(c_int, 9);
pub const SIGBUS = @as(c_int, 10);
pub const SIGSEGV = @as(c_int, 11);
pub const SIGSYS = @as(c_int, 12);
pub const SIGPIPE = @as(c_int, 13);
pub const SIGALRM = @as(c_int, 14);
pub const SIGTERM = @as(c_int, 15);
pub const SIGURG = @as(c_int, 16);
pub const SIGSTOP = @as(c_int, 17);
pub const SIGTSTP = @as(c_int, 18);
pub const SIGCONT = @as(c_int, 19);
pub const SIGCHLD = @as(c_int, 20);
pub const SIGTTIN = @as(c_int, 21);
pub const SIGTTOU = @as(c_int, 22);
pub const SIGIO = @as(c_int, 23);
pub const SIGXCPU = @as(c_int, 24);
pub const SIGXFSZ = @as(c_int, 25);
pub const SIGVTALRM = @as(c_int, 26);
pub const SIGPROF = @as(c_int, 27);
pub const SIGWINCH = @as(c_int, 28);
pub const SIGINFO = @as(c_int, 29);
pub const SIGUSR1 = @as(c_int, 30);
pub const SIGUSR2 = @as(c_int, 31);
pub const _BSD_MACHINE__MCONTEXT_H_ = "";
pub const __ARM_MCONTEXT_H_ = "";
pub const _MACH_MACHINE__STRUCTS_H_ = "";
pub const _MACH_ARM__STRUCTS_H_ = "";
pub const _STRUCT_ARM_EXCEPTION_STATE = struct___darwin_arm_exception_state;
pub const _STRUCT_ARM_EXCEPTION_STATE64 = struct___darwin_arm_exception_state64;
pub const _STRUCT_ARM_THREAD_STATE = struct___darwin_arm_thread_state;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64 = @as(c_int, 0);
pub const _STRUCT_ARM_THREAD_STATE64 = struct___darwin_arm_thread_state64;
pub inline fn __darwin_arm_thread_state64_get_pc(ts: anytype) @TypeOf(ts.__pc) {
    _ = &ts;
    return ts.__pc;
}
pub inline fn __darwin_arm_thread_state64_get_pc_fptr(ts: anytype) ?*anyopaque {
    _ = &ts;
    return @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.cast(usize, ts.__pc));
}
pub inline fn __darwin_arm_thread_state64_get_lr(ts: anytype) @TypeOf(ts.__lr) {
    _ = &ts;
    return ts.__lr;
}
pub inline fn __darwin_arm_thread_state64_get_lr_fptr(ts: anytype) ?*anyopaque {
    _ = &ts;
    return @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.cast(usize, ts.__lr));
}
pub inline fn __darwin_arm_thread_state64_get_sp(ts: anytype) @TypeOf(ts.__sp) {
    _ = &ts;
    return ts.__sp;
}
pub inline fn __darwin_arm_thread_state64_get_fp(ts: anytype) @TypeOf(ts.__fp) {
    _ = &ts;
    return ts.__fp;
}
pub const __darwin_arm_thread_state64_ptrauth_strip = @import("std").zig.c_translation.Macros.DISCARD;
pub const _STRUCT_ARM_VFP_STATE = struct___darwin_arm_vfp_state;
pub const _STRUCT_ARM_NEON_STATE64 = struct___darwin_arm_neon_state64;
pub const _STRUCT_ARM_NEON_STATE = struct___darwin_arm_neon_state;
pub const _STRUCT_ARM_PAGEIN_STATE = struct___arm_pagein_state;
pub const _STRUCT_ARM_LEGACY_DEBUG_STATE = struct___arm_legacy_debug_state;
pub const _STRUCT_ARM_DEBUG_STATE32 = struct___darwin_arm_debug_state32;
pub const _STRUCT_ARM_DEBUG_STATE64 = struct___darwin_arm_debug_state64;
pub const _STRUCT_ARM_CPMU_STATE64 = struct___darwin_arm_cpmu_state64;
pub const _STRUCT_MCONTEXT32 = struct___darwin_mcontext32;
pub const _STRUCT_MCONTEXT64 = struct___darwin_mcontext64;
pub const _MCONTEXT_T = "";
pub const _STRUCT_MCONTEXT = _STRUCT_MCONTEXT64;
pub const _STRUCT_SIGALTSTACK = struct___darwin_sigaltstack;
pub const _STRUCT_UCONTEXT = struct___darwin_ucontext;
pub const _SIGSET_T = "";
pub const SIGEV_NONE = @as(c_int, 0);
pub const SIGEV_SIGNAL = @as(c_int, 1);
pub const SIGEV_THREAD = @as(c_int, 3);
pub const ILL_NOOP = @as(c_int, 0);
pub const ILL_ILLOPC = @as(c_int, 1);
pub const ILL_ILLTRP = @as(c_int, 2);
pub const ILL_PRVOPC = @as(c_int, 3);
pub const ILL_ILLOPN = @as(c_int, 4);
pub const ILL_ILLADR = @as(c_int, 5);
pub const ILL_PRVREG = @as(c_int, 6);
pub const ILL_COPROC = @as(c_int, 7);
pub const ILL_BADSTK = @as(c_int, 8);
pub const FPE_NOOP = @as(c_int, 0);
pub const FPE_FLTDIV = @as(c_int, 1);
pub const FPE_FLTOVF = @as(c_int, 2);
pub const FPE_FLTUND = @as(c_int, 3);
pub const FPE_FLTRES = @as(c_int, 4);
pub const FPE_FLTINV = @as(c_int, 5);
pub const FPE_FLTSUB = @as(c_int, 6);
pub const FPE_INTDIV = @as(c_int, 7);
pub const FPE_INTOVF = @as(c_int, 8);
pub const SEGV_NOOP = @as(c_int, 0);
pub const SEGV_MAPERR = @as(c_int, 1);
pub const SEGV_ACCERR = @as(c_int, 2);
pub const BUS_NOOP = @as(c_int, 0);
pub const BUS_ADRALN = @as(c_int, 1);
pub const BUS_ADRERR = @as(c_int, 2);
pub const BUS_OBJERR = @as(c_int, 3);
pub const TRAP_BRKPT = @as(c_int, 1);
pub const TRAP_TRACE = @as(c_int, 2);
pub const CLD_NOOP = @as(c_int, 0);
pub const CLD_EXITED = @as(c_int, 1);
pub const CLD_KILLED = @as(c_int, 2);
pub const CLD_DUMPED = @as(c_int, 3);
pub const CLD_TRAPPED = @as(c_int, 4);
pub const CLD_STOPPED = @as(c_int, 5);
pub const CLD_CONTINUED = @as(c_int, 6);
pub const POLL_IN = @as(c_int, 1);
pub const POLL_OUT = @as(c_int, 2);
pub const POLL_MSG = @as(c_int, 3);
pub const POLL_ERR = @as(c_int, 4);
pub const POLL_PRI = @as(c_int, 5);
pub const POLL_HUP = @as(c_int, 6);
pub const sa_handler = __sigaction_u.__sa_handler;
pub const sa_sigaction = __sigaction_u.__sa_sigaction;
pub const SA_ONSTACK = @as(c_int, 0x0001);
pub const SA_RESTART = @as(c_int, 0x0002);
pub const SA_RESETHAND = @as(c_int, 0x0004);
pub const SA_NOCLDSTOP = @as(c_int, 0x0008);
pub const SA_NODEFER = @as(c_int, 0x0010);
pub const SA_NOCLDWAIT = @as(c_int, 0x0020);
pub const SA_SIGINFO = @as(c_int, 0x0040);
pub const SA_USERTRAMP = @as(c_int, 0x0100);
pub const SA_64REGSET = @as(c_int, 0x0200);
pub const SA_USERSPACE_MASK = (((((SA_ONSTACK | SA_RESTART) | SA_RESETHAND) | SA_NOCLDSTOP) | SA_NODEFER) | SA_NOCLDWAIT) | SA_SIGINFO;
pub const SIG_BLOCK = @as(c_int, 1);
pub const SIG_UNBLOCK = @as(c_int, 2);
pub const SIG_SETMASK = @as(c_int, 3);
pub const SI_USER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10001, .hex);
pub const SI_QUEUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10002, .hex);
pub const SI_TIMER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10003, .hex);
pub const SI_ASYNCIO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004, .hex);
pub const SI_MESGQ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10005, .hex);
pub const SS_ONSTACK = @as(c_int, 0x0001);
pub const SS_DISABLE = @as(c_int, 0x0004);
pub const MINSIGSTKSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const SIGSTKSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 131072, .decimal);
pub const SV_ONSTACK = SA_ONSTACK;
pub const SV_INTERRUPT = SA_RESTART;
pub const SV_RESETHAND = SA_RESETHAND;
pub const SV_NODEFER = SA_NODEFER;
pub const SV_NOCLDSTOP = SA_NOCLDSTOP;
pub const SV_SIGINFO = SA_SIGINFO;
pub inline fn sigmask(m: anytype) @TypeOf(@as(c_int, 1) << (m - @as(c_int, 1))) {
    _ = &m;
    return @as(c_int, 1) << (m - @as(c_int, 1));
}
pub const BADSIG = SIG_ERR;
pub const _STDIO_H_ = "";
pub const __STDIO_H_ = "";
pub const _VA_LIST_T = "";
pub const _SYS_STDIO_H_ = "";
pub const RENAME_SECLUDE = @as(c_int, 0x00000001);
pub const RENAME_SWAP = @as(c_int, 0x00000002);
pub const RENAME_EXCL = @as(c_int, 0x00000004);
pub const RENAME_RESERVED1 = @as(c_int, 0x00000008);
pub const RENAME_NOFOLLOW_ANY = @as(c_int, 0x00000010);
pub const _FSTDIO = "";
pub const __SLBF = @as(c_int, 0x0001);
pub const __SNBF = @as(c_int, 0x0002);
pub const __SRD = @as(c_int, 0x0004);
pub const __SWR = @as(c_int, 0x0008);
pub const __SRW = @as(c_int, 0x0010);
pub const __SEOF = @as(c_int, 0x0020);
pub const __SERR = @as(c_int, 0x0040);
pub const __SMBF = @as(c_int, 0x0080);
pub const __SAPP = @as(c_int, 0x0100);
pub const __SSTR = @as(c_int, 0x0200);
pub const __SOPT = @as(c_int, 0x0400);
pub const __SNPT = @as(c_int, 0x0800);
pub const __SOFF = @as(c_int, 0x1000);
pub const __SMOD = @as(c_int, 0x2000);
pub const __SALC = @as(c_int, 0x4000);
pub const __SIGN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hex);
pub const _IOFBF = @as(c_int, 0);
pub const _IOLBF = @as(c_int, 1);
pub const _IONBF = @as(c_int, 2);
pub const BUFSIZ = @as(c_int, 1024);
pub const EOF = -@as(c_int, 1);
pub const FOPEN_MAX = @as(c_int, 20);
pub const FILENAME_MAX = @as(c_int, 1024);
pub const P_tmpdir = "/var/tmp/";
pub const L_tmpnam = @as(c_int, 1024);
pub const TMP_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 308915776, .decimal);
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const stdin = __stdinp;
pub const stdout = __stdoutp;
pub const stderr = __stderrp;
pub const L_ctermid = @as(c_int, 1024);
pub const _CTERMID_H_ = "";
pub inline fn __sfeof(p: anytype) @TypeOf((p.*._flags & __SEOF) != @as(c_int, 0)) {
    _ = &p;
    return (p.*._flags & __SEOF) != @as(c_int, 0);
}
pub inline fn __sferror(p: anytype) @TypeOf((p.*._flags & __SERR) != @as(c_int, 0)) {
    _ = &p;
    return (p.*._flags & __SERR) != @as(c_int, 0);
}
pub inline fn __sfileno(p: anytype) @TypeOf(p.*._file) {
    _ = &p;
    return p.*._file;
}
pub inline fn fropen(cookie: anytype, @"fn": anytype) @TypeOf(funopen(cookie, @"fn", @as(c_int, 0), @as(c_int, 0), @as(c_int, 0))) {
    _ = &cookie;
    _ = &@"fn";
    return funopen(cookie, @"fn", @as(c_int, 0), @as(c_int, 0), @as(c_int, 0));
}
pub inline fn fwopen(cookie: anytype, @"fn": anytype) @TypeOf(funopen(cookie, @as(c_int, 0), @"fn", @as(c_int, 0), @as(c_int, 0))) {
    _ = &cookie;
    _ = &@"fn";
    return funopen(cookie, @as(c_int, 0), @"fn", @as(c_int, 0), @as(c_int, 0));
}
pub inline fn feof_unlocked(p: anytype) @TypeOf(__sfeof(p)) {
    _ = &p;
    return __sfeof(p);
}
pub inline fn ferror_unlocked(p: anytype) @TypeOf(__sferror(p)) {
    _ = &p;
    return __sferror(p);
}
pub inline fn clearerr_unlocked(p: anytype) @TypeOf(__sclearerr(p)) {
    _ = &p;
    return __sclearerr(p);
}
pub inline fn fileno_unlocked(p: anytype) @TypeOf(__sfileno(p)) {
    _ = &p;
    return __sfileno(p);
}
pub const _SECURE__STDIO_H_ = "";
pub const _SECURE__COMMON_H_ = "";
pub const _USE_FORTIFY_LEVEL = @as(c_int, 2);
pub inline fn __darwin_obsz0(object: anytype) @TypeOf(__builtin_object_size(object, @as(c_int, 0))) {
    _ = &object;
    return __builtin_object_size(object, @as(c_int, 0));
}
pub inline fn __darwin_obsz(object: anytype) @TypeOf(__builtin_object_size(object, if (_USE_FORTIFY_LEVEL > @as(c_int, 1)) @as(c_int, 1) else @as(c_int, 0))) {
    _ = &object;
    return __builtin_object_size(object, if (_USE_FORTIFY_LEVEL > @as(c_int, 1)) @as(c_int, 1) else @as(c_int, 0));
}
pub const _STDLIB_H_ = "";
pub const _SYS_WAIT_H_ = "";
pub const _SYS_RESOURCE_H_ = "";
pub const _STRUCT_TIMEVAL = struct_timeval;
pub const PRIO_PROCESS = @as(c_int, 0);
pub const PRIO_PGRP = @as(c_int, 1);
pub const PRIO_USER = @as(c_int, 2);
pub const PRIO_DARWIN_THREAD = @as(c_int, 3);
pub const PRIO_DARWIN_PROCESS = @as(c_int, 4);
pub const PRIO_MIN = -@as(c_int, 20);
pub const PRIO_MAX = @as(c_int, 20);
pub const PRIO_DARWIN_BG = @as(c_int, 0x1000);
pub const PRIO_DARWIN_NONUI = @as(c_int, 0x1001);
pub const RUSAGE_SELF = @as(c_int, 0);
pub const RUSAGE_CHILDREN = -@as(c_int, 1);
pub const RUSAGE_INFO_V0 = @as(c_int, 0);
pub const RUSAGE_INFO_V1 = @as(c_int, 1);
pub const RUSAGE_INFO_V2 = @as(c_int, 2);
pub const RUSAGE_INFO_V3 = @as(c_int, 3);
pub const RUSAGE_INFO_V4 = @as(c_int, 4);
pub const RUSAGE_INFO_V5 = @as(c_int, 5);
pub const RUSAGE_INFO_V6 = @as(c_int, 6);
pub const RUSAGE_INFO_CURRENT = RUSAGE_INFO_V6;
pub const RU_PROC_RUNS_RESLIDE = @as(c_int, 0x00000001);
pub const RLIM_INFINITY = (@import("std").zig.c_translation.cast(__uint64_t, @as(c_int, 1)) << @as(c_int, 63)) - @as(c_int, 1);
pub const RLIM_SAVED_MAX = RLIM_INFINITY;
pub const RLIM_SAVED_CUR = RLIM_INFINITY;
pub const RLIMIT_CPU = @as(c_int, 0);
pub const RLIMIT_FSIZE = @as(c_int, 1);
pub const RLIMIT_DATA = @as(c_int, 2);
pub const RLIMIT_STACK = @as(c_int, 3);
pub const RLIMIT_CORE = @as(c_int, 4);
pub const RLIMIT_AS = @as(c_int, 5);
pub const RLIMIT_RSS = RLIMIT_AS;
pub const RLIMIT_MEMLOCK = @as(c_int, 6);
pub const RLIMIT_NPROC = @as(c_int, 7);
pub const RLIMIT_NOFILE = @as(c_int, 8);
pub const RLIM_NLIMITS = @as(c_int, 9);
pub const _RLIMIT_POSIX_FLAG = @as(c_int, 0x1000);
pub const RLIMIT_WAKEUPS_MONITOR = @as(c_int, 0x1);
pub const RLIMIT_CPU_USAGE_MONITOR = @as(c_int, 0x2);
pub const RLIMIT_THREAD_CPULIMITS = @as(c_int, 0x3);
pub const RLIMIT_FOOTPRINT_INTERVAL = @as(c_int, 0x4);
pub const WAKEMON_ENABLE = @as(c_int, 0x01);
pub const WAKEMON_DISABLE = @as(c_int, 0x02);
pub const WAKEMON_GET_PARAMS = @as(c_int, 0x04);
pub const WAKEMON_SET_DEFAULTS = @as(c_int, 0x08);
pub const WAKEMON_MAKE_FATAL = @as(c_int, 0x10);
pub const CPUMON_MAKE_FATAL = @as(c_int, 0x1000);
pub const FOOTPRINT_INTERVAL_RESET = @as(c_int, 0x1);
pub const IOPOL_TYPE_DISK = @as(c_int, 0);
pub const IOPOL_TYPE_VFS_ATIME_UPDATES = @as(c_int, 2);
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = @as(c_int, 3);
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = @as(c_int, 4);
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE = @as(c_int, 5);
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = @as(c_int, 6);
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = @as(c_int, 7);
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = @as(c_int, 8);
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = @as(c_int, 9);
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = @as(c_int, 10);
pub const IOPOL_SCOPE_PROCESS = @as(c_int, 0);
pub const IOPOL_SCOPE_THREAD = @as(c_int, 1);
pub const IOPOL_SCOPE_DARWIN_BG = @as(c_int, 2);
pub const IOPOL_DEFAULT = @as(c_int, 0);
pub const IOPOL_IMPORTANT = @as(c_int, 1);
pub const IOPOL_PASSIVE = @as(c_int, 2);
pub const IOPOL_THROTTLE = @as(c_int, 3);
pub const IOPOL_UTILITY = @as(c_int, 4);
pub const IOPOL_STANDARD = @as(c_int, 5);
pub const IOPOL_APPLICATION = IOPOL_STANDARD;
pub const IOPOL_NORMAL = IOPOL_IMPORTANT;
pub const IOPOL_ATIME_UPDATES_DEFAULT = @as(c_int, 0);
pub const IOPOL_ATIME_UPDATES_OFF = @as(c_int, 1);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = @as(c_int, 0);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF = @as(c_int, 1);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON = @as(c_int, 2);
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = @as(c_int, 1);
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF = @as(c_int, 1);
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE = @as(c_int, 1);
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF = @as(c_int, 0);
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON = @as(c_int, 1);
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = @as(c_int, 0);
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON = @as(c_int, 1);
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = @as(c_int, 0);
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = @as(c_int, 1);
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = @as(c_int, 1);
pub const WNOHANG = @as(c_int, 0x00000001);
pub const WUNTRACED = @as(c_int, 0x00000002);
pub inline fn _W_INT(w: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]c_int, &w).*) {
    _ = &w;
    return @import("std").zig.c_translation.cast([*c]c_int, &w).*;
}
pub const WCOREFLAG = @as(c_int, 0o200);
pub inline fn _WSTATUS(x: anytype) @TypeOf(_W_INT(x) & @as(c_int, 0o177)) {
    _ = &x;
    return _W_INT(x) & @as(c_int, 0o177);
}
pub const _WSTOPPED = @as(c_int, 0o177);
pub inline fn WEXITSTATUS(x: anytype) @TypeOf((_W_INT(x) >> @as(c_int, 8)) & @as(c_int, 0x000000ff)) {
    _ = &x;
    return (_W_INT(x) >> @as(c_int, 8)) & @as(c_int, 0x000000ff);
}
pub inline fn WSTOPSIG(x: anytype) @TypeOf(_W_INT(x) >> @as(c_int, 8)) {
    _ = &x;
    return _W_INT(x) >> @as(c_int, 8);
}
pub inline fn WIFCONTINUED(x: anytype) @TypeOf((_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) == @as(c_int, 0x13))) {
    _ = &x;
    return (_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) == @as(c_int, 0x13));
}
pub inline fn WIFSTOPPED(x: anytype) @TypeOf((_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) != @as(c_int, 0x13))) {
    _ = &x;
    return (_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) != @as(c_int, 0x13));
}
pub inline fn WIFEXITED(x: anytype) @TypeOf(_WSTATUS(x) == @as(c_int, 0)) {
    _ = &x;
    return _WSTATUS(x) == @as(c_int, 0);
}
pub inline fn WIFSIGNALED(x: anytype) @TypeOf((_WSTATUS(x) != _WSTOPPED) and (_WSTATUS(x) != @as(c_int, 0))) {
    _ = &x;
    return (_WSTATUS(x) != _WSTOPPED) and (_WSTATUS(x) != @as(c_int, 0));
}
pub inline fn WTERMSIG(x: anytype) @TypeOf(_WSTATUS(x)) {
    _ = &x;
    return _WSTATUS(x);
}
pub inline fn WCOREDUMP(x: anytype) @TypeOf(_W_INT(x) & WCOREFLAG) {
    _ = &x;
    return _W_INT(x) & WCOREFLAG;
}
pub inline fn W_EXITCODE(ret: anytype, sig: anytype) @TypeOf((ret << @as(c_int, 8)) | sig) {
    _ = &ret;
    _ = &sig;
    return (ret << @as(c_int, 8)) | sig;
}
pub inline fn W_STOPCODE(sig: anytype) @TypeOf((sig << @as(c_int, 8)) | _WSTOPPED) {
    _ = &sig;
    return (sig << @as(c_int, 8)) | _WSTOPPED;
}
pub const WEXITED = @as(c_int, 0x00000004);
pub const WSTOPPED = @as(c_int, 0x00000008);
pub const WCONTINUED = @as(c_int, 0x00000010);
pub const WNOWAIT = @as(c_int, 0x00000020);
pub const WAIT_ANY = -@as(c_int, 1);
pub const WAIT_MYPGRP = @as(c_int, 0);
pub const _ALLOCA_H_ = "";
pub const EXIT_FAILURE = @as(c_int, 1);
pub const EXIT_SUCCESS = @as(c_int, 0);
pub const RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex);
pub const MB_CUR_MAX = __mb_cur_max;
pub const _MALLOC_UNDERSCORE_MALLOC_H_ = "";
pub const _STRING_H_ = "";
pub const _STRINGS_H_ = "";
pub const _SECURE__STRINGS_H_ = "";
pub const _SECURE__STRING_H_ = "";
pub const __HAS_FIXED_CHK_PROTOTYPES = @as(c_int, 1);
pub const _TIME_H_ = "";
pub const _STRUCT_TIMESPEC = struct_timespec;
pub const CLOCKS_PER_SEC = @import("std").zig.c_translation.cast(clock_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal));
pub const CLOCK_REALTIME = _CLOCK_REALTIME;
pub const CLOCK_MONOTONIC = _CLOCK_MONOTONIC;
pub const CLOCK_MONOTONIC_RAW = _CLOCK_MONOTONIC_RAW;
pub const CLOCK_MONOTONIC_RAW_APPROX = _CLOCK_MONOTONIC_RAW_APPROX;
pub const CLOCK_UPTIME_RAW = _CLOCK_UPTIME_RAW;
pub const CLOCK_UPTIME_RAW_APPROX = _CLOCK_UPTIME_RAW_APPROX;
pub const CLOCK_PROCESS_CPUTIME_ID = _CLOCK_PROCESS_CPUTIME_ID;
pub const CLOCK_THREAD_CPUTIME_ID = _CLOCK_THREAD_CPUTIME_ID;
pub const TIME_UTC = @as(c_int, 1);
pub const __CLANG_INTTYPES_H = "";
pub const _INTTYPES_H_ = "";
pub const __PRI_8_LENGTH_MODIFIER__ = "hh";
pub const __PRI_64_LENGTH_MODIFIER__ = "ll";
pub const __SCN_64_LENGTH_MODIFIER__ = "ll";
pub const __PRI_MAX_LENGTH_MODIFIER__ = "j";
pub const __SCN_MAX_LENGTH_MODIFIER__ = "j";
pub const PRId8 = __PRI_8_LENGTH_MODIFIER__ ++ "d";
pub const PRIi8 = __PRI_8_LENGTH_MODIFIER__ ++ "i";
pub const PRIo8 = __PRI_8_LENGTH_MODIFIER__ ++ "o";
pub const PRIu8 = __PRI_8_LENGTH_MODIFIER__ ++ "u";
pub const PRIx8 = __PRI_8_LENGTH_MODIFIER__ ++ "x";
pub const PRIX8 = __PRI_8_LENGTH_MODIFIER__ ++ "X";
pub const PRId16 = "hd";
pub const PRIi16 = "hi";
pub const PRIo16 = "ho";
pub const PRIu16 = "hu";
pub const PRIx16 = "hx";
pub const PRIX16 = "hX";
pub const PRId32 = "d";
pub const PRIi32 = "i";
pub const PRIo32 = "o";
pub const PRIu32 = "u";
pub const PRIx32 = "x";
pub const PRIX32 = "X";
pub const PRId64 = __PRI_64_LENGTH_MODIFIER__ ++ "d";
pub const PRIi64 = __PRI_64_LENGTH_MODIFIER__ ++ "i";
pub const PRIo64 = __PRI_64_LENGTH_MODIFIER__ ++ "o";
pub const PRIu64 = __PRI_64_LENGTH_MODIFIER__ ++ "u";
pub const PRIx64 = __PRI_64_LENGTH_MODIFIER__ ++ "x";
pub const PRIX64 = __PRI_64_LENGTH_MODIFIER__ ++ "X";
pub const PRIdLEAST8 = PRId8;
pub const PRIiLEAST8 = PRIi8;
pub const PRIoLEAST8 = PRIo8;
pub const PRIuLEAST8 = PRIu8;
pub const PRIxLEAST8 = PRIx8;
pub const PRIXLEAST8 = PRIX8;
pub const PRIdLEAST16 = PRId16;
pub const PRIiLEAST16 = PRIi16;
pub const PRIoLEAST16 = PRIo16;
pub const PRIuLEAST16 = PRIu16;
pub const PRIxLEAST16 = PRIx16;
pub const PRIXLEAST16 = PRIX16;
pub const PRIdLEAST32 = PRId32;
pub const PRIiLEAST32 = PRIi32;
pub const PRIoLEAST32 = PRIo32;
pub const PRIuLEAST32 = PRIu32;
pub const PRIxLEAST32 = PRIx32;
pub const PRIXLEAST32 = PRIX32;
pub const PRIdLEAST64 = PRId64;
pub const PRIiLEAST64 = PRIi64;
pub const PRIoLEAST64 = PRIo64;
pub const PRIuLEAST64 = PRIu64;
pub const PRIxLEAST64 = PRIx64;
pub const PRIXLEAST64 = PRIX64;
pub const PRIdFAST8 = PRId8;
pub const PRIiFAST8 = PRIi8;
pub const PRIoFAST8 = PRIo8;
pub const PRIuFAST8 = PRIu8;
pub const PRIxFAST8 = PRIx8;
pub const PRIXFAST8 = PRIX8;
pub const PRIdFAST16 = PRId16;
pub const PRIiFAST16 = PRIi16;
pub const PRIoFAST16 = PRIo16;
pub const PRIuFAST16 = PRIu16;
pub const PRIxFAST16 = PRIx16;
pub const PRIXFAST16 = PRIX16;
pub const PRIdFAST32 = PRId32;
pub const PRIiFAST32 = PRIi32;
pub const PRIoFAST32 = PRIo32;
pub const PRIuFAST32 = PRIu32;
pub const PRIxFAST32 = PRIx32;
pub const PRIXFAST32 = PRIX32;
pub const PRIdFAST64 = PRId64;
pub const PRIiFAST64 = PRIi64;
pub const PRIoFAST64 = PRIo64;
pub const PRIuFAST64 = PRIu64;
pub const PRIxFAST64 = PRIx64;
pub const PRIXFAST64 = PRIX64;
pub const PRIdPTR = "ld";
pub const PRIiPTR = "li";
pub const PRIoPTR = "lo";
pub const PRIuPTR = "lu";
pub const PRIxPTR = "lx";
pub const PRIXPTR = "lX";
pub const PRIdMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "d";
pub const PRIiMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "i";
pub const PRIoMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "o";
pub const PRIuMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "u";
pub const PRIxMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "x";
pub const PRIXMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "X";
pub const SCNd8 = __PRI_8_LENGTH_MODIFIER__ ++ "d";
pub const SCNi8 = __PRI_8_LENGTH_MODIFIER__ ++ "i";
pub const SCNo8 = __PRI_8_LENGTH_MODIFIER__ ++ "o";
pub const SCNu8 = __PRI_8_LENGTH_MODIFIER__ ++ "u";
pub const SCNx8 = __PRI_8_LENGTH_MODIFIER__ ++ "x";
pub const SCNd16 = "hd";
pub const SCNi16 = "hi";
pub const SCNo16 = "ho";
pub const SCNu16 = "hu";
pub const SCNx16 = "hx";
pub const SCNd32 = "d";
pub const SCNi32 = "i";
pub const SCNo32 = "o";
pub const SCNu32 = "u";
pub const SCNx32 = "x";
pub const SCNd64 = __SCN_64_LENGTH_MODIFIER__ ++ "d";
pub const SCNi64 = __SCN_64_LENGTH_MODIFIER__ ++ "i";
pub const SCNo64 = __SCN_64_LENGTH_MODIFIER__ ++ "o";
pub const SCNu64 = __SCN_64_LENGTH_MODIFIER__ ++ "u";
pub const SCNx64 = __SCN_64_LENGTH_MODIFIER__ ++ "x";
pub const SCNdLEAST8 = SCNd8;
pub const SCNiLEAST8 = SCNi8;
pub const SCNoLEAST8 = SCNo8;
pub const SCNuLEAST8 = SCNu8;
pub const SCNxLEAST8 = SCNx8;
pub const SCNdLEAST16 = SCNd16;
pub const SCNiLEAST16 = SCNi16;
pub const SCNoLEAST16 = SCNo16;
pub const SCNuLEAST16 = SCNu16;
pub const SCNxLEAST16 = SCNx16;
pub const SCNdLEAST32 = SCNd32;
pub const SCNiLEAST32 = SCNi32;
pub const SCNoLEAST32 = SCNo32;
pub const SCNuLEAST32 = SCNu32;
pub const SCNxLEAST32 = SCNx32;
pub const SCNdLEAST64 = SCNd64;
pub const SCNiLEAST64 = SCNi64;
pub const SCNoLEAST64 = SCNo64;
pub const SCNuLEAST64 = SCNu64;
pub const SCNxLEAST64 = SCNx64;
pub const SCNdFAST8 = SCNd8;
pub const SCNiFAST8 = SCNi8;
pub const SCNoFAST8 = SCNo8;
pub const SCNuFAST8 = SCNu8;
pub const SCNxFAST8 = SCNx8;
pub const SCNdFAST16 = SCNd16;
pub const SCNiFAST16 = SCNi16;
pub const SCNoFAST16 = SCNo16;
pub const SCNuFAST16 = SCNu16;
pub const SCNxFAST16 = SCNx16;
pub const SCNdFAST32 = SCNd32;
pub const SCNiFAST32 = SCNi32;
pub const SCNoFAST32 = SCNo32;
pub const SCNuFAST32 = SCNu32;
pub const SCNxFAST32 = SCNx32;
pub const SCNdFAST64 = SCNd64;
pub const SCNiFAST64 = SCNi64;
pub const SCNoFAST64 = SCNo64;
pub const SCNuFAST64 = SCNu64;
pub const SCNxFAST64 = SCNx64;
pub const SCNdPTR = "ld";
pub const SCNiPTR = "li";
pub const SCNoPTR = "lo";
pub const SCNuPTR = "lu";
pub const SCNxPTR = "lx";
pub const SCNdMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "d";
pub const SCNiMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "i";
pub const SCNoMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "o";
pub const SCNuMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "u";
pub const SCNxMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "x";
pub const __COREFOUNDATION_CFBAG__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBINARYHEAP__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBITVECTOR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBYTEORDER__ = @as(c_int, 1);
pub const _OS_OSBYTEORDER_H = "";
pub inline fn OSSwapConstInt16(x: anytype) @TypeOf(__DARWIN_OSSwapConstInt16(x)) {
    _ = &x;
    return __DARWIN_OSSwapConstInt16(x);
}
pub inline fn OSSwapConstInt32(x: anytype) @TypeOf(__DARWIN_OSSwapConstInt32(x)) {
    _ = &x;
    return __DARWIN_OSSwapConstInt32(x);
}
pub inline fn OSSwapConstInt64(x: anytype) @TypeOf(__DARWIN_OSSwapConstInt64(x)) {
    _ = &x;
    return __DARWIN_OSSwapConstInt64(x);
}
pub inline fn OSSwapInt16(x: anytype) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt16(x);
}
pub inline fn OSSwapInt32(x: anytype) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt32(x);
}
pub inline fn OSSwapInt64(x: anytype) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    _ = &x;
    return __DARWIN_OSSwapInt64(x);
}
pub inline fn OSReadBigInt(x: anytype, y: anytype) @TypeOf(OSReadBigInt32(x, y)) {
    _ = &x;
    _ = &y;
    return OSReadBigInt32(x, y);
}
pub inline fn OSWriteBigInt(x: anytype, y: anytype, z: anytype) @TypeOf(OSWriteBigInt32(x, y, z)) {
    _ = &x;
    _ = &y;
    _ = &z;
    return OSWriteBigInt32(x, y, z);
}
pub inline fn OSSwapBigToHostInt(x: anytype) @TypeOf(OSSwapBigToHostInt32(x)) {
    _ = &x;
    return OSSwapBigToHostInt32(x);
}
pub inline fn OSSwapHostToBigInt(x: anytype) @TypeOf(OSSwapHostToBigInt32(x)) {
    _ = &x;
    return OSSwapHostToBigInt32(x);
}
pub inline fn OSReadLittleInt(x: anytype, y: anytype) @TypeOf(OSReadLittleInt32(x, y)) {
    _ = &x;
    _ = &y;
    return OSReadLittleInt32(x, y);
}
pub inline fn OSWriteLittleInt(x: anytype, y: anytype, z: anytype) @TypeOf(OSWriteLittleInt32(x, y, z)) {
    _ = &x;
    _ = &y;
    _ = &z;
    return OSWriteLittleInt32(x, y, z);
}
pub inline fn OSSwapHostToLittleInt(x: anytype) @TypeOf(OSSwapHostToLittleInt32(x)) {
    _ = &x;
    return OSSwapHostToLittleInt32(x);
}
pub inline fn OSSwapLittleToHostInt(x: anytype) @TypeOf(OSSwapLittleToHostInt32(x)) {
    _ = &x;
    return OSSwapLittleToHostInt32(x);
}
pub inline fn OSReadBigInt16(base: anytype, byteOffset: anytype) @TypeOf(OSReadSwapInt16(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return OSReadSwapInt16(base, byteOffset);
}
pub inline fn OSReadBigInt32(base: anytype, byteOffset: anytype) @TypeOf(OSReadSwapInt32(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return OSReadSwapInt32(base, byteOffset);
}
pub inline fn OSReadBigInt64(base: anytype, byteOffset: anytype) @TypeOf(OSReadSwapInt64(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return OSReadSwapInt64(base, byteOffset);
}
pub inline fn OSWriteBigInt16(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(OSWriteSwapInt16(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return OSWriteSwapInt16(base, byteOffset, data);
}
pub inline fn OSWriteBigInt32(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(OSWriteSwapInt32(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return OSWriteSwapInt32(base, byteOffset, data);
}
pub inline fn OSWriteBigInt64(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(OSWriteSwapInt64(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return OSWriteSwapInt64(base, byteOffset, data);
}
pub inline fn OSReadLittleInt16(base: anytype, byteOffset: anytype) @TypeOf(_OSReadInt16(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return _OSReadInt16(base, byteOffset);
}
pub inline fn OSReadLittleInt32(base: anytype, byteOffset: anytype) @TypeOf(_OSReadInt32(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return _OSReadInt32(base, byteOffset);
}
pub inline fn OSReadLittleInt64(base: anytype, byteOffset: anytype) @TypeOf(_OSReadInt64(base, byteOffset)) {
    _ = &base;
    _ = &byteOffset;
    return _OSReadInt64(base, byteOffset);
}
pub inline fn OSWriteLittleInt16(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(_OSWriteInt16(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return _OSWriteInt16(base, byteOffset, data);
}
pub inline fn OSWriteLittleInt32(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(_OSWriteInt32(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return _OSWriteInt32(base, byteOffset, data);
}
pub inline fn OSWriteLittleInt64(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(_OSWriteInt64(base, byteOffset, data)) {
    _ = &base;
    _ = &byteOffset;
    _ = &data;
    return _OSWriteInt64(base, byteOffset, data);
}
pub inline fn OSSwapHostToBigConstInt16(x: anytype) @TypeOf(OSSwapConstInt16(x)) {
    _ = &x;
    return OSSwapConstInt16(x);
}
pub inline fn OSSwapHostToBigConstInt32(x: anytype) @TypeOf(OSSwapConstInt32(x)) {
    _ = &x;
    return OSSwapConstInt32(x);
}
pub inline fn OSSwapHostToBigConstInt64(x: anytype) @TypeOf(OSSwapConstInt64(x)) {
    _ = &x;
    return OSSwapConstInt64(x);
}
pub inline fn OSSwapHostToBigInt16(x: anytype) @TypeOf(OSSwapInt16(x)) {
    _ = &x;
    return OSSwapInt16(x);
}
pub inline fn OSSwapHostToBigInt32(x: anytype) @TypeOf(OSSwapInt32(x)) {
    _ = &x;
    return OSSwapInt32(x);
}
pub inline fn OSSwapHostToBigInt64(x: anytype) @TypeOf(OSSwapInt64(x)) {
    _ = &x;
    return OSSwapInt64(x);
}
pub inline fn OSSwapHostToLittleConstInt16(x: anytype) u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapHostToLittleConstInt32(x: anytype) u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapHostToLittleConstInt64(x: anytype) u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u64, x);
}
pub inline fn OSSwapHostToLittleInt16(x: anytype) u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapHostToLittleInt32(x: anytype) u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapHostToLittleInt64(x: anytype) u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u64, x);
}
pub inline fn OSSwapBigToHostConstInt16(x: anytype) @TypeOf(OSSwapConstInt16(x)) {
    _ = &x;
    return OSSwapConstInt16(x);
}
pub inline fn OSSwapBigToHostConstInt32(x: anytype) @TypeOf(OSSwapConstInt32(x)) {
    _ = &x;
    return OSSwapConstInt32(x);
}
pub inline fn OSSwapBigToHostConstInt64(x: anytype) @TypeOf(OSSwapConstInt64(x)) {
    _ = &x;
    return OSSwapConstInt64(x);
}
pub inline fn OSSwapBigToHostInt16(x: anytype) @TypeOf(OSSwapInt16(x)) {
    _ = &x;
    return OSSwapInt16(x);
}
pub inline fn OSSwapBigToHostInt32(x: anytype) @TypeOf(OSSwapInt32(x)) {
    _ = &x;
    return OSSwapInt32(x);
}
pub inline fn OSSwapBigToHostInt64(x: anytype) @TypeOf(OSSwapInt64(x)) {
    _ = &x;
    return OSSwapInt64(x);
}
pub inline fn OSSwapLittleToHostConstInt16(x: anytype) u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapLittleToHostConstInt32(x: anytype) u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapLittleToHostConstInt64(x: anytype) u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u64, x);
}
pub inline fn OSSwapLittleToHostInt16(x: anytype) u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapLittleToHostInt32(x: anytype) u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapLittleToHostInt64(x: anytype) u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(u64, x);
}
pub const CF_USE_OSBYTEORDER_H = @as(c_int, 1);
pub const __COREFOUNDATION_CFCALENDAR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFTIMEZONE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFDATEFORMATTER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFNUMBER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFNUMBERFORMATTER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFPREFERENCES__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFPROPERTYLIST__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFSTREAM__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFRUNLOOP__ = @as(c_int, 1);
pub const _MACH_PORT_H_ = "";
pub const _MACH_BOOLEAN_H_ = "";
pub const _MACH_MACHINE_BOOLEAN_H_ = "";
pub const _MACH_ARM_BOOLEAN_H_ = "";
pub const _MACH_MACHINE_VM_TYPES_H_ = "";
pub const _MACH_ARM_VM_TYPES_H_ = "";
pub const _MACH_PORT_T = "";
pub const MACH_PORT_NULL = @as(c_int, 0);
pub const MACH_PORT_DEAD = @import("std").zig.c_translation.cast(mach_port_name_t, ~@as(c_int, 0));
pub inline fn MACH_PORT_VALID(name: anytype) @TypeOf((name != MACH_PORT_NULL) and (name != MACH_PORT_DEAD)) {
    _ = &name;
    return (name != MACH_PORT_NULL) and (name != MACH_PORT_DEAD);
}
pub inline fn MACH_PORT_INDEX(name: anytype) @TypeOf(name >> @as(c_int, 8)) {
    _ = &name;
    return name >> @as(c_int, 8);
}
pub inline fn MACH_PORT_GEN(name: anytype) @TypeOf((name & @as(c_int, 0xff)) << @as(c_int, 24)) {
    _ = &name;
    return (name & @as(c_int, 0xff)) << @as(c_int, 24);
}
pub inline fn MACH_PORT_MAKE(index_1: anytype, gen: anytype) @TypeOf((index_1 << @as(c_int, 8)) | (gen >> @as(c_int, 24))) {
    _ = &index_1;
    _ = &gen;
    return (index_1 << @as(c_int, 8)) | (gen >> @as(c_int, 24));
}
pub const MACH_PORT_RIGHT_SEND = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 0));
pub const MACH_PORT_RIGHT_RECEIVE = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 1));
pub const MACH_PORT_RIGHT_SEND_ONCE = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 2));
pub const MACH_PORT_RIGHT_PORT_SET = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 3));
pub const MACH_PORT_RIGHT_DEAD_NAME = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 4));
pub const MACH_PORT_RIGHT_LABELH = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 5));
pub const MACH_PORT_RIGHT_NUMBER = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 6));
pub inline fn MACH_PORT_TYPE(right: anytype) mach_port_type_t {
    _ = &right;
    return @import("std").zig.c_translation.cast(mach_port_type_t, @import("std").zig.c_translation.cast(mach_port_type_t, @as(c_int, 1)) << (right + @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 16))));
}
pub const MACH_PORT_TYPE_NONE = @import("std").zig.c_translation.cast(mach_port_type_t, @as(c_long, 0));
pub const MACH_PORT_TYPE_SEND = MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND);
pub const MACH_PORT_TYPE_RECEIVE = MACH_PORT_TYPE(MACH_PORT_RIGHT_RECEIVE);
pub const MACH_PORT_TYPE_SEND_ONCE = MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND_ONCE);
pub const MACH_PORT_TYPE_PORT_SET = MACH_PORT_TYPE(MACH_PORT_RIGHT_PORT_SET);
pub const MACH_PORT_TYPE_DEAD_NAME = MACH_PORT_TYPE(MACH_PORT_RIGHT_DEAD_NAME);
pub const MACH_PORT_TYPE_LABELH = MACH_PORT_TYPE(MACH_PORT_RIGHT_LABELH);
pub const MACH_PORT_TYPE_SEND_RECEIVE = MACH_PORT_TYPE_SEND | MACH_PORT_TYPE_RECEIVE;
pub const MACH_PORT_TYPE_SEND_RIGHTS = MACH_PORT_TYPE_SEND | MACH_PORT_TYPE_SEND_ONCE;
pub const MACH_PORT_TYPE_PORT_RIGHTS = MACH_PORT_TYPE_SEND_RIGHTS | MACH_PORT_TYPE_RECEIVE;
pub const MACH_PORT_TYPE_PORT_OR_DEAD = MACH_PORT_TYPE_PORT_RIGHTS | MACH_PORT_TYPE_DEAD_NAME;
pub const MACH_PORT_TYPE_ALL_RIGHTS = MACH_PORT_TYPE_PORT_OR_DEAD | MACH_PORT_TYPE_PORT_SET;
pub const MACH_PORT_TYPE_DNREQUEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const MACH_PORT_TYPE_SPREQUEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const MACH_PORT_SRIGHTS_NONE = @as(c_int, 0);
pub const MACH_PORT_SRIGHTS_PRESENT = @as(c_int, 1);
pub const MACH_PORT_QLIMIT_ZERO = @as(c_int, 0);
pub const MACH_PORT_QLIMIT_BASIC = @as(c_int, 5);
pub const MACH_PORT_QLIMIT_SMALL = @as(c_int, 16);
pub const MACH_PORT_QLIMIT_LARGE = @as(c_int, 1024);
pub const MACH_PORT_QLIMIT_KERNEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65534, .decimal);
pub const MACH_PORT_QLIMIT_MIN = MACH_PORT_QLIMIT_ZERO;
pub const MACH_PORT_QLIMIT_DEFAULT = MACH_PORT_QLIMIT_BASIC;
pub const MACH_PORT_QLIMIT_MAX = MACH_PORT_QLIMIT_LARGE;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER = @as(c_int, 0x01);
pub const MACH_PORT_STATUS_FLAG_GUARDED = @as(c_int, 0x02);
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD = @as(c_int, 0x04);
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION = @as(c_int, 0x08);
pub const MACH_PORT_STATUS_FLAG_REVIVE = @as(c_int, 0x10);
pub const MACH_PORT_STATUS_FLAG_TASKPTR = @as(c_int, 0x20);
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE = @as(c_int, 0x40);
pub const MACH_PORT_STATUS_FLAG_NO_GRANT = @as(c_int, 0x80);
pub const MACH_PORT_LIMITS_INFO = @as(c_int, 1);
pub const MACH_PORT_RECEIVE_STATUS = @as(c_int, 2);
pub const MACH_PORT_DNREQUESTS_SIZE = @as(c_int, 3);
pub const MACH_PORT_TEMPOWNER = @as(c_int, 4);
pub const MACH_PORT_IMPORTANCE_RECEIVER = @as(c_int, 5);
pub const MACH_PORT_DENAP_RECEIVER = @as(c_int, 6);
pub const MACH_PORT_INFO_EXT = @as(c_int, 7);
pub const MACH_PORT_GUARD_INFO = @as(c_int, 8);
pub const MACH_PORT_LIMITS_INFO_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_port_limits_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const MACH_PORT_RECEIVE_STATUS_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_port_status_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT = @as(c_int, 1);
pub const MACH_PORT_INFO_EXT_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_port_info_ext_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const MACH_PORT_GUARD_INFO_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_port_guard_info_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN = @as(c_int, 255);
pub const MACH_SERVICE_PORT_INFO_COUNT = @import("std").zig.c_translation.cast(u8, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_service_port_info_data_t), @import("std").zig.c_translation.sizeof(u8)));
pub const MPO_CONTEXT_AS_GUARD = @as(c_int, 0x01);
pub const MPO_QLIMIT = @as(c_int, 0x02);
pub const MPO_TEMPOWNER = @as(c_int, 0x04);
pub const MPO_IMPORTANCE_RECEIVER = @as(c_int, 0x08);
pub const MPO_INSERT_SEND_RIGHT = @as(c_int, 0x10);
pub const MPO_STRICT = @as(c_int, 0x20);
pub const MPO_DENAP_RECEIVER = @as(c_int, 0x40);
pub const MPO_IMMOVABLE_RECEIVE = @as(c_int, 0x80);
pub const MPO_FILTER_MSG = @as(c_int, 0x100);
pub const MPO_TG_BLOCK_TRACKING = @as(c_int, 0x200);
pub const MPO_SERVICE_PORT = @as(c_int, 0x400);
pub const MPO_CONNECTION_PORT = @as(c_int, 0x800);
pub const MPO_REPLY_PORT = @as(c_int, 0x1000);
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS = @as(c_int, 0x2000);
pub const MPO_PROVISIONAL_REPLY_PORT = @as(c_int, 0x4000);
pub const GUARD_TYPE_MACH_PORT = @as(c_int, 0x1);
pub const MAX_FATAL_kGUARD_EXC_CODE = @as(c_uint, 1) << @as(c_int, 7);
pub const MPG_FLAGS_NONE = @as(c_ulonglong, 0x00);
pub const MAX_OPTIONAL_kGUARD_EXC_CODE = @as(c_uint, 1) << @as(c_int, 19);
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP = @as(c_ulonglong, 0x01) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT = @as(c_ulonglong, 0x02) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER = @as(c_ulonglong, 0x04) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR = @as(c_ulonglong, 0x08) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA = @as(c_ulonglong, 0x10) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_MASK = @as(c_ulonglong, 0xff) << @as(c_int, 56);
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC = @as(c_ulonglong, 0x01) << @as(c_int, 56);
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY = @as(c_ulonglong, 0x02) << @as(c_int, 56);
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN = @as(c_ulonglong, 0x04) << @as(c_int, 56);
pub const MPG_FLAGS_IMMOVABLE_PINNED = @as(c_ulonglong, 0x01) << @as(c_int, 56);
pub const MPG_STRICT = @as(c_int, 0x01);
pub const MPG_IMMOVABLE_RECEIVE = @as(c_int, 0x02);
pub const __COREFOUNDATION_CFSOCKET__ = @as(c_int, 1);
pub const __DISPATCH_PUBLIC__ = "";
pub const __OS_BASE__ = "";
pub inline fn OS_EXPECT(x: anytype, v: anytype) @TypeOf(__builtin_expect(x, v)) {
    _ = &x;
    _ = &v;
    return __builtin_expect(x, v);
}
pub inline fn OS_COMPILER_CAN_ASSUME(expr: anytype) @TypeOf(__builtin_assume(expr)) {
    _ = &expr;
    return __builtin_assume(expr);
}
pub inline fn OS_STRINGIFY(s: anytype) @TypeOf(__OS_STRINGIFY(s)) {
    _ = &s;
    return __OS_STRINGIFY(s);
}
pub inline fn OS_CONCAT(x: anytype, y: anytype) @TypeOf(__OS_CONCAT(x, y)) {
    _ = &x;
    _ = &y;
    return __OS_CONCAT(x, y);
}
pub inline fn os_is_compile_time_constant(expr: anytype) @TypeOf(__builtin_constant_p(expr)) {
    _ = &expr;
    return __builtin_constant_p(expr);
}
pub const OS_ASSUME_PTR_ABI_SINGLE_BEGIN = __ASSUME_PTR_ABI_SINGLE_BEGIN;
pub const OS_ASSUME_PTR_ABI_SINGLE_END = __ASSUME_PTR_ABI_SINGLE_END;
pub const OS_UNSAFE_INDEXABLE = "";
pub const OS_HEADER_INDEXABLE = "";
pub inline fn OS_COUNTED_BY(N: anytype) @TypeOf(__counted_by(N)) {
    _ = &N;
    return __counted_by(N);
}
pub inline fn OS_SIZED_BY(N: anytype) @TypeOf(__sized_by(N)) {
    _ = &N;
    return __sized_by(N);
}
pub const _UNISTD_H_ = "";
pub const _SYS_UNISTD_H_ = "";
pub const _POSIX_VERSION = @as(c_long, 200112);
pub const _POSIX2_VERSION = @as(c_long, 200112);
pub const _POSIX_VDISABLE = @import("std").zig.c_translation.cast(u8, '\xff');
pub const F_OK = @as(c_int, 0);
pub const X_OK = @as(c_int, 1) << @as(c_int, 0);
pub const W_OK = @as(c_int, 1) << @as(c_int, 1);
pub const R_OK = @as(c_int, 1) << @as(c_int, 2);
pub const _READ_OK = @as(c_int, 1) << @as(c_int, 9);
pub const _WRITE_OK = @as(c_int, 1) << @as(c_int, 10);
pub const _EXECUTE_OK = @as(c_int, 1) << @as(c_int, 11);
pub const _DELETE_OK = @as(c_int, 1) << @as(c_int, 12);
pub const _APPEND_OK = @as(c_int, 1) << @as(c_int, 13);
pub const _RMFILE_OK = @as(c_int, 1) << @as(c_int, 14);
pub const _RATTR_OK = @as(c_int, 1) << @as(c_int, 15);
pub const _WATTR_OK = @as(c_int, 1) << @as(c_int, 16);
pub const _REXT_OK = @as(c_int, 1) << @as(c_int, 17);
pub const _WEXT_OK = @as(c_int, 1) << @as(c_int, 18);
pub const _RPERM_OK = @as(c_int, 1) << @as(c_int, 19);
pub const _WPERM_OK = @as(c_int, 1) << @as(c_int, 20);
pub const _CHOWN_OK = @as(c_int, 1) << @as(c_int, 21);
pub const _ACCESS_EXTENDED_MASK = (((((((((((_READ_OK | _WRITE_OK) | _EXECUTE_OK) | _DELETE_OK) | _APPEND_OK) | _RMFILE_OK) | _REXT_OK) | _WEXT_OK) | _RATTR_OK) | _WATTR_OK) | _RPERM_OK) | _WPERM_OK) | _CHOWN_OK;
pub const SEEK_HOLE = @as(c_int, 3);
pub const SEEK_DATA = @as(c_int, 4);
pub const L_SET = SEEK_SET;
pub const L_INCR = SEEK_CUR;
pub const L_XTND = SEEK_END;
pub const ACCESSX_MAX_DESCRIPTORS = @as(c_int, 100);
pub const ACCESSX_MAX_TABLESIZE = @as(c_int, 16) * @as(c_int, 1024);
pub const _PC_LINK_MAX = @as(c_int, 1);
pub const _PC_MAX_CANON = @as(c_int, 2);
pub const _PC_MAX_INPUT = @as(c_int, 3);
pub const _PC_NAME_MAX = @as(c_int, 4);
pub const _PC_PATH_MAX = @as(c_int, 5);
pub const _PC_PIPE_BUF = @as(c_int, 6);
pub const _PC_CHOWN_RESTRICTED = @as(c_int, 7);
pub const _PC_NO_TRUNC = @as(c_int, 8);
pub const _PC_VDISABLE = @as(c_int, 9);
pub const _PC_NAME_CHARS_MAX = @as(c_int, 10);
pub const _PC_CASE_SENSITIVE = @as(c_int, 11);
pub const _PC_CASE_PRESERVING = @as(c_int, 12);
pub const _PC_EXTENDED_SECURITY_NP = @as(c_int, 13);
pub const _PC_AUTH_OPAQUE_NP = @as(c_int, 14);
pub const _PC_2_SYMLINKS = @as(c_int, 15);
pub const _PC_ALLOC_SIZE_MIN = @as(c_int, 16);
pub const _PC_ASYNC_IO = @as(c_int, 17);
pub const _PC_FILESIZEBITS = @as(c_int, 18);
pub const _PC_PRIO_IO = @as(c_int, 19);
pub const _PC_REC_INCR_XFER_SIZE = @as(c_int, 20);
pub const _PC_REC_MAX_XFER_SIZE = @as(c_int, 21);
pub const _PC_REC_MIN_XFER_SIZE = @as(c_int, 22);
pub const _PC_REC_XFER_ALIGN = @as(c_int, 23);
pub const _PC_SYMLINK_MAX = @as(c_int, 24);
pub const _PC_SYNC_IO = @as(c_int, 25);
pub const _PC_XATTR_SIZE_BITS = @as(c_int, 26);
pub const _PC_MIN_HOLE_SIZE = @as(c_int, 27);
pub const _CS_PATH = @as(c_int, 1);
pub const STDIN_FILENO = @as(c_int, 0);
pub const STDOUT_FILENO = @as(c_int, 1);
pub const STDERR_FILENO = @as(c_int, 2);
pub const _XOPEN_VERSION = @as(c_int, 600);
pub const _XOPEN_XCU_VERSION = @as(c_int, 4);
pub const _POSIX_ADVISORY_INFO = -@as(c_int, 1);
pub const _POSIX_ASYNCHRONOUS_IO = -@as(c_int, 1);
pub const _POSIX_BARRIERS = -@as(c_int, 1);
pub const _POSIX_CHOWN_RESTRICTED = @as(c_long, 200112);
pub const _POSIX_CLOCK_SELECTION = -@as(c_int, 1);
pub const _POSIX_CPUTIME = -@as(c_int, 1);
pub const _POSIX_FSYNC = @as(c_long, 200112);
pub const _POSIX_IPV6 = @as(c_long, 200112);
pub const _POSIX_JOB_CONTROL = @as(c_long, 200112);
pub const _POSIX_MAPPED_FILES = @as(c_long, 200112);
pub const _POSIX_MEMLOCK = -@as(c_int, 1);
pub const _POSIX_MEMLOCK_RANGE = -@as(c_int, 1);
pub const _POSIX_MEMORY_PROTECTION = @as(c_long, 200112);
pub const _POSIX_MESSAGE_PASSING = -@as(c_int, 1);
pub const _POSIX_MONOTONIC_CLOCK = -@as(c_int, 1);
pub const _POSIX_NO_TRUNC = @as(c_long, 200112);
pub const _POSIX_PRIORITIZED_IO = -@as(c_int, 1);
pub const _POSIX_PRIORITY_SCHEDULING = -@as(c_int, 1);
pub const _POSIX_RAW_SOCKETS = -@as(c_int, 1);
pub const _POSIX_READER_WRITER_LOCKS = @as(c_long, 200112);
pub const _POSIX_REALTIME_SIGNALS = -@as(c_int, 1);
pub const _POSIX_REGEXP = @as(c_long, 200112);
pub const _POSIX_SAVED_IDS = @as(c_long, 200112);
pub const _POSIX_SEMAPHORES = -@as(c_int, 1);
pub const _POSIX_SHARED_MEMORY_OBJECTS = -@as(c_int, 1);
pub const _POSIX_SHELL = @as(c_long, 200112);
pub const _POSIX_SPAWN = @as(c_long, 200112);
pub const _POSIX_SPIN_LOCKS = -@as(c_int, 1);
pub const _POSIX_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_SYNCHRONIZED_IO = -@as(c_int, 1);
pub const _POSIX_THREAD_ATTR_STACKADDR = @as(c_long, 200112);
pub const _POSIX_THREAD_ATTR_STACKSIZE = @as(c_long, 200112);
pub const _POSIX_THREAD_CPUTIME = -@as(c_int, 1);
pub const _POSIX_THREAD_PRIO_INHERIT = -@as(c_int, 1);
pub const _POSIX_THREAD_PRIO_PROTECT = -@as(c_int, 1);
pub const _POSIX_THREAD_PRIORITY_SCHEDULING = -@as(c_int, 1);
pub const _POSIX_THREAD_PROCESS_SHARED = @as(c_long, 200112);
pub const _POSIX_THREAD_SAFE_FUNCTIONS = @as(c_long, 200112);
pub const _POSIX_THREAD_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_THREADS = @as(c_long, 200112);
pub const _POSIX_TIMEOUTS = -@as(c_int, 1);
pub const _POSIX_TIMERS = -@as(c_int, 1);
pub const _POSIX_TRACE = -@as(c_int, 1);
pub const _POSIX_TRACE_EVENT_FILTER = -@as(c_int, 1);
pub const _POSIX_TRACE_INHERIT = -@as(c_int, 1);
pub const _POSIX_TRACE_LOG = -@as(c_int, 1);
pub const _POSIX_TYPED_MEMORY_OBJECTS = -@as(c_int, 1);
pub const _POSIX2_C_BIND = @as(c_long, 200112);
pub const _POSIX2_C_DEV = @as(c_long, 200112);
pub const _POSIX2_CHAR_TERM = @as(c_long, 200112);
pub const _POSIX2_FORT_DEV = -@as(c_int, 1);
pub const _POSIX2_FORT_RUN = @as(c_long, 200112);
pub const _POSIX2_LOCALEDEF = @as(c_long, 200112);
pub const _POSIX2_PBS = -@as(c_int, 1);
pub const _POSIX2_PBS_ACCOUNTING = -@as(c_int, 1);
pub const _POSIX2_PBS_CHECKPOINT = -@as(c_int, 1);
pub const _POSIX2_PBS_LOCATE = -@as(c_int, 1);
pub const _POSIX2_PBS_MESSAGE = -@as(c_int, 1);
pub const _POSIX2_PBS_TRACK = -@as(c_int, 1);
pub const _POSIX2_SW_DEV = @as(c_long, 200112);
pub const _POSIX2_UPE = @as(c_long, 200112);
pub const __ILP32_OFF32 = -@as(c_int, 1);
pub const __ILP32_OFFBIG = -@as(c_int, 1);
pub const __LP64_OFF64 = @as(c_int, 1);
pub const __LPBIG_OFFBIG = @as(c_int, 1);
pub const _POSIX_V6_ILP32_OFF32 = __ILP32_OFF32;
pub const _POSIX_V6_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _POSIX_V6_LP64_OFF64 = __LP64_OFF64;
pub const _POSIX_V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _POSIX_V7_ILP32_OFF32 = __ILP32_OFF32;
pub const _POSIX_V7_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _POSIX_V7_LP64_OFF64 = __LP64_OFF64;
pub const _POSIX_V7_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _V6_ILP32_OFF32 = __ILP32_OFF32;
pub const _V6_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _V6_LP64_OFF64 = __LP64_OFF64;
pub const _V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _XBS5_ILP32_OFF32 = __ILP32_OFF32;
pub const _XBS5_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _XBS5_LP64_OFF64 = __LP64_OFF64;
pub const _XBS5_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _XOPEN_CRYPT = @as(c_int, 1);
pub const _XOPEN_ENH_I18N = @as(c_int, 1);
pub const _XOPEN_LEGACY = -@as(c_int, 1);
pub const _XOPEN_REALTIME = -@as(c_int, 1);
pub const _XOPEN_REALTIME_THREADS = -@as(c_int, 1);
pub const _XOPEN_SHM = @as(c_int, 1);
pub const _XOPEN_STREAMS = -@as(c_int, 1);
pub const _XOPEN_UNIX = @as(c_int, 1);
pub const _SC_ARG_MAX = @as(c_int, 1);
pub const _SC_CHILD_MAX = @as(c_int, 2);
pub const _SC_CLK_TCK = @as(c_int, 3);
pub const _SC_NGROUPS_MAX = @as(c_int, 4);
pub const _SC_OPEN_MAX = @as(c_int, 5);
pub const _SC_JOB_CONTROL = @as(c_int, 6);
pub const _SC_SAVED_IDS = @as(c_int, 7);
pub const _SC_VERSION = @as(c_int, 8);
pub const _SC_BC_BASE_MAX = @as(c_int, 9);
pub const _SC_BC_DIM_MAX = @as(c_int, 10);
pub const _SC_BC_SCALE_MAX = @as(c_int, 11);
pub const _SC_BC_STRING_MAX = @as(c_int, 12);
pub const _SC_COLL_WEIGHTS_MAX = @as(c_int, 13);
pub const _SC_EXPR_NEST_MAX = @as(c_int, 14);
pub const _SC_LINE_MAX = @as(c_int, 15);
pub const _SC_RE_DUP_MAX = @as(c_int, 16);
pub const _SC_2_VERSION = @as(c_int, 17);
pub const _SC_2_C_BIND = @as(c_int, 18);
pub const _SC_2_C_DEV = @as(c_int, 19);
pub const _SC_2_CHAR_TERM = @as(c_int, 20);
pub const _SC_2_FORT_DEV = @as(c_int, 21);
pub const _SC_2_FORT_RUN = @as(c_int, 22);
pub const _SC_2_LOCALEDEF = @as(c_int, 23);
pub const _SC_2_SW_DEV = @as(c_int, 24);
pub const _SC_2_UPE = @as(c_int, 25);
pub const _SC_STREAM_MAX = @as(c_int, 26);
pub const _SC_TZNAME_MAX = @as(c_int, 27);
pub const _SC_ASYNCHRONOUS_IO = @as(c_int, 28);
pub const _SC_PAGESIZE = @as(c_int, 29);
pub const _SC_MEMLOCK = @as(c_int, 30);
pub const _SC_MEMLOCK_RANGE = @as(c_int, 31);
pub const _SC_MEMORY_PROTECTION = @as(c_int, 32);
pub const _SC_MESSAGE_PASSING = @as(c_int, 33);
pub const _SC_PRIORITIZED_IO = @as(c_int, 34);
pub const _SC_PRIORITY_SCHEDULING = @as(c_int, 35);
pub const _SC_REALTIME_SIGNALS = @as(c_int, 36);
pub const _SC_SEMAPHORES = @as(c_int, 37);
pub const _SC_FSYNC = @as(c_int, 38);
pub const _SC_SHARED_MEMORY_OBJECTS = @as(c_int, 39);
pub const _SC_SYNCHRONIZED_IO = @as(c_int, 40);
pub const _SC_TIMERS = @as(c_int, 41);
pub const _SC_AIO_LISTIO_MAX = @as(c_int, 42);
pub const _SC_AIO_MAX = @as(c_int, 43);
pub const _SC_AIO_PRIO_DELTA_MAX = @as(c_int, 44);
pub const _SC_DELAYTIMER_MAX = @as(c_int, 45);
pub const _SC_MQ_OPEN_MAX = @as(c_int, 46);
pub const _SC_MAPPED_FILES = @as(c_int, 47);
pub const _SC_RTSIG_MAX = @as(c_int, 48);
pub const _SC_SEM_NSEMS_MAX = @as(c_int, 49);
pub const _SC_SEM_VALUE_MAX = @as(c_int, 50);
pub const _SC_SIGQUEUE_MAX = @as(c_int, 51);
pub const _SC_TIMER_MAX = @as(c_int, 52);
pub const _SC_NPROCESSORS_CONF = @as(c_int, 57);
pub const _SC_NPROCESSORS_ONLN = @as(c_int, 58);
pub const _SC_2_PBS = @as(c_int, 59);
pub const _SC_2_PBS_ACCOUNTING = @as(c_int, 60);
pub const _SC_2_PBS_CHECKPOINT = @as(c_int, 61);
pub const _SC_2_PBS_LOCATE = @as(c_int, 62);
pub const _SC_2_PBS_MESSAGE = @as(c_int, 63);
pub const _SC_2_PBS_TRACK = @as(c_int, 64);
pub const _SC_ADVISORY_INFO = @as(c_int, 65);
pub const _SC_BARRIERS = @as(c_int, 66);
pub const _SC_CLOCK_SELECTION = @as(c_int, 67);
pub const _SC_CPUTIME = @as(c_int, 68);
pub const _SC_FILE_LOCKING = @as(c_int, 69);
pub const _SC_GETGR_R_SIZE_MAX = @as(c_int, 70);
pub const _SC_GETPW_R_SIZE_MAX = @as(c_int, 71);
pub const _SC_HOST_NAME_MAX = @as(c_int, 72);
pub const _SC_LOGIN_NAME_MAX = @as(c_int, 73);
pub const _SC_MONOTONIC_CLOCK = @as(c_int, 74);
pub const _SC_MQ_PRIO_MAX = @as(c_int, 75);
pub const _SC_READER_WRITER_LOCKS = @as(c_int, 76);
pub const _SC_REGEXP = @as(c_int, 77);
pub const _SC_SHELL = @as(c_int, 78);
pub const _SC_SPAWN = @as(c_int, 79);
pub const _SC_SPIN_LOCKS = @as(c_int, 80);
pub const _SC_SPORADIC_SERVER = @as(c_int, 81);
pub const _SC_THREAD_ATTR_STACKADDR = @as(c_int, 82);
pub const _SC_THREAD_ATTR_STACKSIZE = @as(c_int, 83);
pub const _SC_THREAD_CPUTIME = @as(c_int, 84);
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 85);
pub const _SC_THREAD_KEYS_MAX = @as(c_int, 86);
pub const _SC_THREAD_PRIO_INHERIT = @as(c_int, 87);
pub const _SC_THREAD_PRIO_PROTECT = @as(c_int, 88);
pub const _SC_THREAD_PRIORITY_SCHEDULING = @as(c_int, 89);
pub const _SC_THREAD_PROCESS_SHARED = @as(c_int, 90);
pub const _SC_THREAD_SAFE_FUNCTIONS = @as(c_int, 91);
pub const _SC_THREAD_SPORADIC_SERVER = @as(c_int, 92);
pub const _SC_THREAD_STACK_MIN = @as(c_int, 93);
pub const _SC_THREAD_THREADS_MAX = @as(c_int, 94);
pub const _SC_TIMEOUTS = @as(c_int, 95);
pub const _SC_THREADS = @as(c_int, 96);
pub const _SC_TRACE = @as(c_int, 97);
pub const _SC_TRACE_EVENT_FILTER = @as(c_int, 98);
pub const _SC_TRACE_INHERIT = @as(c_int, 99);
pub const _SC_TRACE_LOG = @as(c_int, 100);
pub const _SC_TTY_NAME_MAX = @as(c_int, 101);
pub const _SC_TYPED_MEMORY_OBJECTS = @as(c_int, 102);
pub const _SC_V6_ILP32_OFF32 = @as(c_int, 103);
pub const _SC_V6_ILP32_OFFBIG = @as(c_int, 104);
pub const _SC_V6_LP64_OFF64 = @as(c_int, 105);
pub const _SC_V6_LPBIG_OFFBIG = @as(c_int, 106);
pub const _SC_IPV6 = @as(c_int, 118);
pub const _SC_RAW_SOCKETS = @as(c_int, 119);
pub const _SC_SYMLOOP_MAX = @as(c_int, 120);
pub const _SC_ATEXIT_MAX = @as(c_int, 107);
pub const _SC_IOV_MAX = @as(c_int, 56);
pub const _SC_PAGE_SIZE = _SC_PAGESIZE;
pub const _SC_XOPEN_CRYPT = @as(c_int, 108);
pub const _SC_XOPEN_ENH_I18N = @as(c_int, 109);
pub const _SC_XOPEN_LEGACY = @as(c_int, 110);
pub const _SC_XOPEN_REALTIME = @as(c_int, 111);
pub const _SC_XOPEN_REALTIME_THREADS = @as(c_int, 112);
pub const _SC_XOPEN_SHM = @as(c_int, 113);
pub const _SC_XOPEN_STREAMS = @as(c_int, 114);
pub const _SC_XOPEN_UNIX = @as(c_int, 115);
pub const _SC_XOPEN_VERSION = @as(c_int, 116);
pub const _SC_XOPEN_XCU_VERSION = @as(c_int, 121);
pub const _SC_XBS5_ILP32_OFF32 = @as(c_int, 122);
pub const _SC_XBS5_ILP32_OFFBIG = @as(c_int, 123);
pub const _SC_XBS5_LP64_OFF64 = @as(c_int, 124);
pub const _SC_XBS5_LPBIG_OFFBIG = @as(c_int, 125);
pub const _SC_SS_REPL_MAX = @as(c_int, 126);
pub const _SC_TRACE_EVENT_NAME_MAX = @as(c_int, 127);
pub const _SC_TRACE_NAME_MAX = @as(c_int, 128);
pub const _SC_TRACE_SYS_MAX = @as(c_int, 129);
pub const _SC_TRACE_USER_EVENT_MAX = @as(c_int, 130);
pub const _SC_PASS_MAX = @as(c_int, 131);
pub const _SC_PHYS_PAGES = @as(c_int, 200);
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS = @as(c_int, 2);
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = @as(c_int, 3);
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS = @as(c_int, 4);
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = @as(c_int, 5);
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = @as(c_int, 6);
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS = @as(c_int, 7);
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS = @as(c_int, 8);
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS = @as(c_int, 9);
pub const _CS_POSIX_V6_LP64_OFF64_LIBS = @as(c_int, 10);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = @as(c_int, 11);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = @as(c_int, 12);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = @as(c_int, 13);
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = @as(c_int, 14);
pub const _CS_XBS5_ILP32_OFF32_CFLAGS = @as(c_int, 20);
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS = @as(c_int, 21);
pub const _CS_XBS5_ILP32_OFF32_LIBS = @as(c_int, 22);
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS = @as(c_int, 23);
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS = @as(c_int, 24);
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS = @as(c_int, 25);
pub const _CS_XBS5_ILP32_OFFBIG_LIBS = @as(c_int, 26);
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = @as(c_int, 27);
pub const _CS_XBS5_LP64_OFF64_CFLAGS = @as(c_int, 28);
pub const _CS_XBS5_LP64_OFF64_LDFLAGS = @as(c_int, 29);
pub const _CS_XBS5_LP64_OFF64_LIBS = @as(c_int, 30);
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS = @as(c_int, 31);
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS = @as(c_int, 32);
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = @as(c_int, 33);
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS = @as(c_int, 34);
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = @as(c_int, 35);
pub const _CS_DARWIN_USER_DIR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const _CS_DARWIN_USER_TEMP_DIR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65537, .decimal);
pub const _CS_DARWIN_USER_CACHE_DIR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65538, .decimal);
pub const F_ULOCK = @as(c_int, 0);
pub const F_LOCK = @as(c_int, 1);
pub const F_TLOCK = @as(c_int, 2);
pub const F_TEST = @as(c_int, 3);
pub const _SYS_SELECT_H_ = "";
pub const _SYS__SELECT_H_ = "";
pub const _UUID_T = "";
pub const __GETHOSTUUID_H = "";
pub const SYNC_VOLUME_FULLSYNC = @as(c_int, 0x01);
pub const SYNC_VOLUME_WAIT = @as(c_int, 0x02);
pub const _SYS_FCNTL_H_ = "";
pub const O_RDONLY = @as(c_int, 0x0000);
pub const O_WRONLY = @as(c_int, 0x0001);
pub const O_RDWR = @as(c_int, 0x0002);
pub const O_ACCMODE = @as(c_int, 0x0003);
pub const FREAD = @as(c_int, 0x00000001);
pub const FWRITE = @as(c_int, 0x00000002);
pub const O_NONBLOCK = @as(c_int, 0x00000004);
pub const O_APPEND = @as(c_int, 0x00000008);
pub const O_SYNC = @as(c_int, 0x0080);
pub const O_SHLOCK = @as(c_int, 0x00000010);
pub const O_EXLOCK = @as(c_int, 0x00000020);
pub const O_ASYNC = @as(c_int, 0x00000040);
pub const O_FSYNC = O_SYNC;
pub const O_NOFOLLOW = @as(c_int, 0x00000100);
pub const O_CREAT = @as(c_int, 0x00000200);
pub const O_TRUNC = @as(c_int, 0x00000400);
pub const O_EXCL = @as(c_int, 0x00000800);
pub const O_EVTONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const O_NOCTTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const O_DIRECTORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const O_SYMLINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const O_DSYNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400000, .hex);
pub const O_CLOEXEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const O_NOFOLLOW_ANY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const O_EXEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const O_SEARCH = O_EXEC | O_DIRECTORY;
pub const AT_FDCWD = -@as(c_int, 2);
pub const AT_EACCESS = @as(c_int, 0x0010);
pub const AT_SYMLINK_NOFOLLOW = @as(c_int, 0x0020);
pub const AT_SYMLINK_FOLLOW = @as(c_int, 0x0040);
pub const AT_REMOVEDIR = @as(c_int, 0x0080);
pub const AT_REALDEV = @as(c_int, 0x0200);
pub const AT_FDONLY = @as(c_int, 0x0400);
pub const AT_SYMLINK_NOFOLLOW_ANY = @as(c_int, 0x0800);
pub const O_DP_GETRAWENCRYPTED = @as(c_int, 0x0001);
pub const O_DP_GETRAWUNENCRYPTED = @as(c_int, 0x0002);
pub const O_DP_AUTHENTICATE = @as(c_int, 0x0004);
pub const AUTH_OPEN_NOAUTHFD = -@as(c_int, 1);
pub const FAPPEND = O_APPEND;
pub const FASYNC = O_ASYNC;
pub const FFSYNC = O_FSYNC;
pub const FFDSYNC = O_DSYNC;
pub const FNONBLOCK = O_NONBLOCK;
pub const FNDELAY = O_NONBLOCK;
pub const O_NDELAY = O_NONBLOCK;
pub const CPF_OVERWRITE = @as(c_int, 0x0001);
pub const CPF_IGNORE_MODE = @as(c_int, 0x0002);
pub const CPF_MASK = CPF_OVERWRITE | CPF_IGNORE_MODE;
pub const F_DUPFD = @as(c_int, 0);
pub const F_GETFD = @as(c_int, 1);
pub const F_SETFD = @as(c_int, 2);
pub const F_GETFL = @as(c_int, 3);
pub const F_SETFL = @as(c_int, 4);
pub const F_GETOWN = @as(c_int, 5);
pub const F_SETOWN = @as(c_int, 6);
pub const F_GETLK = @as(c_int, 7);
pub const F_SETLK = @as(c_int, 8);
pub const F_SETLKW = @as(c_int, 9);
pub const F_SETLKWTIMEOUT = @as(c_int, 10);
pub const F_FLUSH_DATA = @as(c_int, 40);
pub const F_CHKCLEAN = @as(c_int, 41);
pub const F_PREALLOCATE = @as(c_int, 42);
pub const F_SETSIZE = @as(c_int, 43);
pub const F_RDADVISE = @as(c_int, 44);
pub const F_RDAHEAD = @as(c_int, 45);
pub const F_NOCACHE = @as(c_int, 48);
pub const F_LOG2PHYS = @as(c_int, 49);
pub const F_GETPATH = @as(c_int, 50);
pub const F_FULLFSYNC = @as(c_int, 51);
pub const F_PATHPKG_CHECK = @as(c_int, 52);
pub const F_FREEZE_FS = @as(c_int, 53);
pub const F_THAW_FS = @as(c_int, 54);
pub const F_GLOBAL_NOCACHE = @as(c_int, 55);
pub const F_ADDSIGS = @as(c_int, 59);
pub const F_ADDFILESIGS = @as(c_int, 61);
pub const F_NODIRECT = @as(c_int, 62);
pub const F_GETPROTECTIONCLASS = @as(c_int, 63);
pub const F_SETPROTECTIONCLASS = @as(c_int, 64);
pub const F_LOG2PHYS_EXT = @as(c_int, 65);
pub const F_GETLKPID = @as(c_int, 66);
pub const F_SETBACKINGSTORE = @as(c_int, 70);
pub const F_GETPATH_MTMINFO = @as(c_int, 71);
pub const F_GETCODEDIR = @as(c_int, 72);
pub const F_SETNOSIGPIPE = @as(c_int, 73);
pub const F_GETNOSIGPIPE = @as(c_int, 74);
pub const F_TRANSCODEKEY = @as(c_int, 75);
pub const F_SINGLE_WRITER = @as(c_int, 76);
pub const F_GETPROTECTIONLEVEL = @as(c_int, 77);
pub const F_FINDSIGS = @as(c_int, 78);
pub const F_ADDFILESIGS_FOR_DYLD_SIM = @as(c_int, 83);
pub const F_BARRIERFSYNC = @as(c_int, 85);
pub const F_ADDFILESIGS_RETURN = @as(c_int, 97);
pub const F_CHECK_LV = @as(c_int, 98);
pub const F_PUNCHHOLE = @as(c_int, 99);
pub const F_TRIM_ACTIVE_FILE = @as(c_int, 100);
pub const F_SPECULATIVE_READ = @as(c_int, 101);
pub const F_GETPATH_NOFIRMLINK = @as(c_int, 102);
pub const F_ADDFILESIGS_INFO = @as(c_int, 103);
pub const F_ADDFILESUPPL = @as(c_int, 104);
pub const F_GETSIGSINFO = @as(c_int, 105);
pub const F_SETLEASE = @as(c_int, 106);
pub const F_GETLEASE = @as(c_int, 107);
pub inline fn F_SETLEASE_ARG(t: anytype, oc: anytype) @TypeOf(t | (oc << @as(c_int, 2))) {
    _ = &t;
    _ = &oc;
    return t | (oc << @as(c_int, 2));
}
pub const F_TRANSFEREXTENTS = @as(c_int, 110);
pub const FCNTL_FS_SPECIFIC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const F_DUPFD_CLOEXEC = @as(c_int, 67);
pub const FD_CLOEXEC = @as(c_int, 1);
pub const F_RDLCK = @as(c_int, 1);
pub const F_UNLCK = @as(c_int, 2);
pub const F_WRLCK = @as(c_int, 3);
pub const S_IFMT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o170000, .octal);
pub const S_IFIFO = @as(c_int, 0o010000);
pub const S_IFCHR = @as(c_int, 0o020000);
pub const S_IFDIR = @as(c_int, 0o040000);
pub const S_IFBLK = @as(c_int, 0o060000);
pub const S_IFREG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o100000, .octal);
pub const S_IFLNK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o120000, .octal);
pub const S_IFSOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o140000, .octal);
pub const S_IFWHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o160000, .octal);
pub const S_IRWXU = @as(c_int, 0o000700);
pub const S_IRUSR = @as(c_int, 0o000400);
pub const S_IWUSR = @as(c_int, 0o000200);
pub const S_IXUSR = @as(c_int, 0o000100);
pub const S_IRWXG = @as(c_int, 0o000070);
pub const S_IRGRP = @as(c_int, 0o000040);
pub const S_IWGRP = @as(c_int, 0o000020);
pub const S_IXGRP = @as(c_int, 0o000010);
pub const S_IRWXO = @as(c_int, 0o000007);
pub const S_IROTH = @as(c_int, 0o000004);
pub const S_IWOTH = @as(c_int, 0o000002);
pub const S_IXOTH = @as(c_int, 0o000001);
pub const S_ISUID = @as(c_int, 0o004000);
pub const S_ISGID = @as(c_int, 0o002000);
pub const S_ISVTX = @as(c_int, 0o001000);
pub const S_ISTXT = S_ISVTX;
pub const S_IREAD = S_IRUSR;
pub const S_IWRITE = S_IWUSR;
pub const S_IEXEC = S_IXUSR;
pub const F_ALLOCATECONTIG = @as(c_int, 0x00000002);
pub const F_ALLOCATEALL = @as(c_int, 0x00000004);
pub const F_ALLOCATEPERSIST = @as(c_int, 0x00000008);
pub const F_PEOFPOSMODE = @as(c_int, 3);
pub const F_VOLPOSMODE = @as(c_int, 4);
pub const USER_FSIGNATURES_CDHASH_LEN = @as(c_int, 20);
pub const GETSIGSINFO_PLATFORM_BINARY = @as(c_int, 1);
pub const LOCK_SH = @as(c_int, 0x01);
pub const LOCK_EX = @as(c_int, 0x02);
pub const LOCK_NB = @as(c_int, 0x04);
pub const LOCK_UN = @as(c_int, 0x08);
pub const O_POPUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const O_ALERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const _FILESEC_T = "";
pub const FILESEC_GUID = FILESEC_UUID;
pub const _FILESEC_UNSET_PROPERTY = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const _FILESEC_REMOVE_ACL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 1));
pub const DISPATCH_API_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20181008, .decimal);
pub const __DISPATCH_INDIRECT__ = "";
pub const __OS_OBJECT__ = "";
pub const OS_OBJECT_ASSUME_ABI_SINGLE_BEGIN = OS_ASSUME_PTR_ABI_SINGLE_BEGIN;
pub const OS_OBJECT_ASSUME_ABI_SINGLE_END = OS_ASSUME_PTR_ABI_SINGLE_END;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT = @as(c_int, 0);
pub const OS_OBJECT_USE_OBJC = @as(c_int, 0);
pub const OS_OBJECT_SWIFT3 = @as(c_int, 0);
pub const OS_OBJECT_RETURNS_RETAINED = "";
pub const OS_OBJECT_CONSUMED = "";
pub const OS_OBJECT_BRIDGE = "";
pub const OS_WARN_RESULT_NEEDS_RELEASE = OS_WARN_RESULT;
pub const OS_OBJECT_OBJC_RUNTIME_VISIBLE = "";
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE = @as(c_int, 0);
pub const __OS_WORKGROUP__ = "";
pub const __OS_WORKGROUP_INDIRECT__ = "";
pub const __OS_WORKGROUP_BASE__ = "";
pub const __OS_CLOCK__ = "";
pub const OS_WORKGROUP_EXPORT = OS_EXPORT;
pub const OS_WORKGROUP_RETURNS_RETAINED = "";
pub const OS_WORKGROUP_ASSUME_ABI_SINGLE_BEGIN = OS_ASSUME_PTR_ABI_SINGLE_BEGIN;
pub const OS_WORKGROUP_ASSUME_ABI_SINGLE_END = OS_ASSUME_PTR_ABI_SINGLE_END;
pub const OS_WORKGROUP_UNSAFE_INDEXABLE = "";
pub const __OS_WORKGROUP_ATTR_SIZE__ = @as(c_int, 60);
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__ = @as(c_int, 56);
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__ = @as(c_int, 36);
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2FA863B4, .hex);
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2FA863C4, .hex);
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x52A74C4D, .hex);
pub const __OS_WORKGROUP_OBJECT__ = "";
pub const __OS_WORKGROUP_INTERVAL__ = "";
pub const __OS_WORKGROUP_PARALLEL__ = "";
pub const __DISPATCH_BASE__ = "";
pub inline fn DISPATCH_EXPECT(x: anytype, v: anytype) @TypeOf(__builtin_expect(x, v)) {
    _ = &x;
    _ = &v;
    return __builtin_expect(x, v);
}
pub inline fn DISPATCH_COMPILER_CAN_ASSUME(expr: anytype) @TypeOf(__builtin_assume(expr)) {
    _ = &expr;
    return __builtin_assume(expr);
}
pub const DISPATCH_ASSUME_ABI_SINGLE_BEGIN = "";
pub const DISPATCH_ASSUME_ABI_SINGLE_END = "";
pub const DISPATCH_UNSAFE_INDEXABLE = "";
pub const DISPATCH_SWIFT3_OVERLAY = @as(c_int, 0);
pub const __DISPATCH_TIME__ = "";
pub const _MACH_CLOCK_TYPES_H_ = "";
pub const _MACH_TIME_VALUE_H_ = "";
pub const TIME_MICROS_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const SYSTEM_CLOCK = @as(c_int, 0);
pub const CALENDAR_CLOCK = @as(c_int, 1);
pub const REALTIME_CLOCK = @as(c_int, 0);
pub const CLOCK_GET_TIME_RES = @as(c_int, 1);
pub const CLOCK_ALARM_CURRES = @as(c_int, 3);
pub const CLOCK_ALARM_MINRES = @as(c_int, 4);
pub const CLOCK_ALARM_MAXRES = @as(c_int, 5);
pub const NSEC_PER_USEC = @as(c_ulonglong, 1000);
pub const USEC_PER_SEC = @as(c_ulonglong, 1000000);
pub const NSEC_PER_SEC = @as(c_ulonglong, 1000000000);
pub const NSEC_PER_MSEC = @as(c_ulonglong, 1000000);
pub inline fn BAD_MACH_TIMESPEC(t: anytype) @TypeOf((t.*.tv_nsec < @as(c_int, 0)) or (t.*.tv_nsec >= @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC))) {
    _ = &t;
    return (t.*.tv_nsec < @as(c_int, 0)) or (t.*.tv_nsec >= @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC));
}
pub inline fn CMP_MACH_TIMESPEC(t1: anytype, t2: anytype) @TypeOf(if (t1.*.tv_sec > t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC) else if (t1.*.tv_sec < t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, -NSEC_PER_SEC) else t1.*.tv_nsec - t2.*.tv_nsec) {
    _ = &t1;
    _ = &t2;
    return if (t1.*.tv_sec > t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC) else if (t1.*.tv_sec < t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, -NSEC_PER_SEC) else t1.*.tv_nsec - t2.*.tv_nsec;
}
pub const ALRMTYPE = @as(c_int, 0xff);
pub const TIME_ABSOLUTE = @as(c_int, 0x00);
pub const TIME_RELATIVE = @as(c_int, 0x01);
pub inline fn BAD_ALRMTYPE(t: anytype) @TypeOf((t & ~TIME_RELATIVE) != @as(c_int, 0)) {
    _ = &t;
    return (t & ~TIME_RELATIVE) != @as(c_int, 0);
}
pub const DISPATCH_TIME_NOW = @as(c_ulonglong, 0);
pub const DISPATCH_TIME_FOREVER = ~@as(c_ulonglong, 0);
pub const __DISPATCH_OBJECT__ = "";
pub const _SYS_QOS_H = "";
pub const QOS_MIN_RELATIVE_PRIORITY = -@as(c_int, 15);
pub inline fn DISPATCH_GLOBAL_OBJECT(@"type": anytype, object: anytype) @TypeOf(@"type" & object) {
    _ = &@"type";
    _ = &object;
    return @"type" & object;
}
pub const DISPATCH_RETURNS_RETAINED = "";
pub inline fn DISPATCH_DATA_DECL(name: anytype) @TypeOf(DISPATCH_DECL(name)) {
    _ = &name;
    return DISPATCH_DECL(name);
}
pub const __DISPATCH_QUEUE__ = "";
pub const DISPATCH_APPLY_AUTO_AVAILABLE = @as(c_int, 1);
pub const DISPATCH_QUEUE_PRIORITY_HIGH = @as(c_int, 2);
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT = @as(c_int, 0);
pub const DISPATCH_QUEUE_PRIORITY_LOW = -@as(c_int, 2);
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND = INT16_MIN;
pub const DISPATCH_QUEUE_SERIAL = NULL;
pub const DISPATCH_QUEUE_SERIAL_INACTIVE = dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_SERIAL);
pub const DISPATCH_QUEUE_CONCURRENT = DISPATCH_GLOBAL_OBJECT(dispatch_queue_attr_t, _dispatch_queue_attr_concurrent);
pub const DISPATCH_QUEUE_CONCURRENT_INACTIVE = dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_CONCURRENT);
pub const DISPATCH_QUEUE_SERIAL_WITH_AUTORELEASE_POOL = dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_SERIAL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
pub const DISPATCH_QUEUE_CONCURRENT_WITH_AUTORELEASE_POOL = dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_CONCURRENT, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
pub const DISPATCH_TARGET_QUEUE_DEFAULT = NULL;
pub const DISPATCH_CURRENT_QUEUE_LABEL = NULL;
pub inline fn dispatch_assert_queue_debug(q: anytype) anyopaque {
    _ = &q;
    return @import("std").zig.c_translation.cast(anyopaque, (@as(c_int, 0) != 0) and (q != 0));
}
pub inline fn dispatch_assert_queue_barrier_debug(q: anytype) anyopaque {
    _ = &q;
    return @import("std").zig.c_translation.cast(anyopaque, (@as(c_int, 0) != 0) and (q != 0));
}
pub inline fn dispatch_assert_queue_not_debug(q: anytype) anyopaque {
    _ = &q;
    return @import("std").zig.c_translation.cast(anyopaque, (@as(c_int, 0) != 0) and (q != 0));
}
pub const __DISPATCH_BLOCK__ = "";
pub const __DISPATCH_SOURCE__ = "";
pub const _MACH_MESSAGE_H_ = "";
pub const _MACH_KERN_RETURN_H_ = "";
pub const _MACH_MACHINE_KERN_RETURN_H_ = "";
pub const _MACH_ARM_KERN_RETURN_H_ = "";
pub const KERN_SUCCESS = @as(c_int, 0);
pub const KERN_INVALID_ADDRESS = @as(c_int, 1);
pub const KERN_PROTECTION_FAILURE = @as(c_int, 2);
pub const KERN_NO_SPACE = @as(c_int, 3);
pub const KERN_INVALID_ARGUMENT = @as(c_int, 4);
pub const KERN_FAILURE = @as(c_int, 5);
pub const KERN_RESOURCE_SHORTAGE = @as(c_int, 6);
pub const KERN_NOT_RECEIVER = @as(c_int, 7);
pub const KERN_NO_ACCESS = @as(c_int, 8);
pub const KERN_MEMORY_FAILURE = @as(c_int, 9);
pub const KERN_MEMORY_ERROR = @as(c_int, 10);
pub const KERN_ALREADY_IN_SET = @as(c_int, 11);
pub const KERN_NOT_IN_SET = @as(c_int, 12);
pub const KERN_NAME_EXISTS = @as(c_int, 13);
pub const KERN_ABORTED = @as(c_int, 14);
pub const KERN_INVALID_NAME = @as(c_int, 15);
pub const KERN_INVALID_TASK = @as(c_int, 16);
pub const KERN_INVALID_RIGHT = @as(c_int, 17);
pub const KERN_INVALID_VALUE = @as(c_int, 18);
pub const KERN_UREFS_OVERFLOW = @as(c_int, 19);
pub const KERN_INVALID_CAPABILITY = @as(c_int, 20);
pub const KERN_RIGHT_EXISTS = @as(c_int, 21);
pub const KERN_INVALID_HOST = @as(c_int, 22);
pub const KERN_MEMORY_PRESENT = @as(c_int, 23);
pub const KERN_MEMORY_DATA_MOVED = @as(c_int, 24);
pub const KERN_MEMORY_RESTART_COPY = @as(c_int, 25);
pub const KERN_INVALID_PROCESSOR_SET = @as(c_int, 26);
pub const KERN_POLICY_LIMIT = @as(c_int, 27);
pub const KERN_INVALID_POLICY = @as(c_int, 28);
pub const KERN_INVALID_OBJECT = @as(c_int, 29);
pub const KERN_ALREADY_WAITING = @as(c_int, 30);
pub const KERN_DEFAULT_SET = @as(c_int, 31);
pub const KERN_EXCEPTION_PROTECTED = @as(c_int, 32);
pub const KERN_INVALID_LEDGER = @as(c_int, 33);
pub const KERN_INVALID_MEMORY_CONTROL = @as(c_int, 34);
pub const KERN_INVALID_SECURITY = @as(c_int, 35);
pub const KERN_NOT_DEPRESSED = @as(c_int, 36);
pub const KERN_TERMINATED = @as(c_int, 37);
pub const KERN_LOCK_SET_DESTROYED = @as(c_int, 38);
pub const KERN_LOCK_UNSTABLE = @as(c_int, 39);
pub const KERN_LOCK_OWNED = @as(c_int, 40);
pub const KERN_LOCK_OWNED_SELF = @as(c_int, 41);
pub const KERN_SEMAPHORE_DESTROYED = @as(c_int, 42);
pub const KERN_RPC_SERVER_TERMINATED = @as(c_int, 43);
pub const KERN_RPC_TERMINATE_ORPHAN = @as(c_int, 44);
pub const KERN_RPC_CONTINUE_ORPHAN = @as(c_int, 45);
pub const KERN_NOT_SUPPORTED = @as(c_int, 46);
pub const KERN_NODE_DOWN = @as(c_int, 47);
pub const KERN_NOT_WAITING = @as(c_int, 48);
pub const KERN_OPERATION_TIMED_OUT = @as(c_int, 49);
pub const KERN_CODESIGN_ERROR = @as(c_int, 50);
pub const KERN_POLICY_STATIC = @as(c_int, 51);
pub const KERN_INSUFFICIENT_BUFFER_SIZE = @as(c_int, 52);
pub const KERN_DENIED = @as(c_int, 53);
pub const KERN_MISSING_KC = @as(c_int, 54);
pub const KERN_INVALID_KC = @as(c_int, 55);
pub const KERN_NOT_FOUND = @as(c_int, 56);
pub const KERN_RETURN_MAX = @as(c_int, 0x100);
pub const MACH_MSG_TIMEOUT_NONE = @import("std").zig.c_translation.cast(mach_msg_timeout_t, @as(c_int, 0));
pub const MACH_MSGH_BITS_ZERO = @as(c_int, 0x00000000);
pub const MACH_MSGH_BITS_REMOTE_MASK = @as(c_int, 0x0000001f);
pub const MACH_MSGH_BITS_LOCAL_MASK = @as(c_int, 0x00001f00);
pub const MACH_MSGH_BITS_VOUCHER_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001f0000, .hex);
pub const MACH_MSGH_BITS_PORTS_MASK = (MACH_MSGH_BITS_REMOTE_MASK | MACH_MSGH_BITS_LOCAL_MASK) | MACH_MSGH_BITS_VOUCHER_MASK;
pub const MACH_MSGH_BITS_COMPLEX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const MACH_MSGH_BITS_USER = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x801f1f1f, .hex);
pub const MACH_MSGH_BITS_RAISEIMP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const MACH_MSGH_BITS_DENAP = MACH_MSGH_BITS_RAISEIMP;
pub const MACH_MSGH_BITS_IMPHOLDASRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const MACH_MSGH_BITS_DENAPHOLDASRT = MACH_MSGH_BITS_IMPHOLDASRT;
pub const MACH_MSGH_BITS_CIRCULAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const MACH_MSGH_BITS_USED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xb01f1f1f, .hex);
pub inline fn MACH_MSGH_BITS(remote: anytype, local: anytype) @TypeOf(remote | (local << @as(c_int, 8))) {
    _ = &remote;
    _ = &local;
    return remote | (local << @as(c_int, 8));
}
pub inline fn MACH_MSGH_BITS_SET_PORTS(remote: anytype, local: anytype, voucher: anytype) @TypeOf(((remote & MACH_MSGH_BITS_REMOTE_MASK) | ((local << @as(c_int, 8)) & MACH_MSGH_BITS_LOCAL_MASK)) | ((voucher << @as(c_int, 16)) & MACH_MSGH_BITS_VOUCHER_MASK)) {
    _ = &remote;
    _ = &local;
    _ = &voucher;
    return ((remote & MACH_MSGH_BITS_REMOTE_MASK) | ((local << @as(c_int, 8)) & MACH_MSGH_BITS_LOCAL_MASK)) | ((voucher << @as(c_int, 16)) & MACH_MSGH_BITS_VOUCHER_MASK);
}
pub inline fn MACH_MSGH_BITS_SET(remote: anytype, local: anytype, voucher: anytype, other: anytype) @TypeOf(MACH_MSGH_BITS_SET_PORTS(remote, local, voucher) | (other & ~MACH_MSGH_BITS_PORTS_MASK)) {
    _ = &remote;
    _ = &local;
    _ = &voucher;
    _ = &other;
    return MACH_MSGH_BITS_SET_PORTS(remote, local, voucher) | (other & ~MACH_MSGH_BITS_PORTS_MASK);
}
pub inline fn MACH_MSGH_BITS_REMOTE(bits: anytype) @TypeOf(bits & MACH_MSGH_BITS_REMOTE_MASK) {
    _ = &bits;
    return bits & MACH_MSGH_BITS_REMOTE_MASK;
}
pub inline fn MACH_MSGH_BITS_LOCAL(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_LOCAL_MASK) >> @as(c_int, 8)) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_LOCAL_MASK) >> @as(c_int, 8);
}
pub inline fn MACH_MSGH_BITS_VOUCHER(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_VOUCHER_MASK) >> @as(c_int, 16)) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_VOUCHER_MASK) >> @as(c_int, 16);
}
pub inline fn MACH_MSGH_BITS_PORTS(bits: anytype) @TypeOf(bits & MACH_MSGH_BITS_PORTS_MASK) {
    _ = &bits;
    return bits & MACH_MSGH_BITS_PORTS_MASK;
}
pub inline fn MACH_MSGH_BITS_OTHER(bits: anytype) @TypeOf(bits & ~MACH_MSGH_BITS_PORTS_MASK) {
    _ = &bits;
    return bits & ~MACH_MSGH_BITS_PORTS_MASK;
}
pub inline fn MACH_MSGH_BITS_HAS_REMOTE(bits: anytype) @TypeOf(MACH_MSGH_BITS_REMOTE(bits) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return MACH_MSGH_BITS_REMOTE(bits) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_HAS_LOCAL(bits: anytype) @TypeOf(MACH_MSGH_BITS_LOCAL(bits) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return MACH_MSGH_BITS_LOCAL(bits) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_HAS_VOUCHER(bits: anytype) @TypeOf(MACH_MSGH_BITS_VOUCHER(bits) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return MACH_MSGH_BITS_VOUCHER(bits) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_IS_COMPLEX(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_COMPLEX) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_COMPLEX) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_RAISED_IMPORTANCE(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_RAISEIMP) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_RAISEIMP) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_HOLDS_IMPORTANCE_ASSERTION(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_IMPHOLDASRT) != MACH_MSGH_BITS_ZERO) {
    _ = &bits;
    return (bits & MACH_MSGH_BITS_IMPHOLDASRT) != MACH_MSGH_BITS_ZERO;
}
pub const MACH_MSG_SIZE_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_size_t, @as(c_int, 0));
pub const MACH_MSG_PRIORITY_UNSPECIFIED = @import("std").zig.c_translation.cast(mach_msg_priority_t, @as(c_int, 0));
pub const MACH_MSG_TYPE_MOVE_RECEIVE = @as(c_int, 16);
pub const MACH_MSG_TYPE_MOVE_SEND = @as(c_int, 17);
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE = @as(c_int, 18);
pub const MACH_MSG_TYPE_COPY_SEND = @as(c_int, 19);
pub const MACH_MSG_TYPE_MAKE_SEND = @as(c_int, 20);
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE = @as(c_int, 21);
pub const MACH_MSG_TYPE_COPY_RECEIVE = @as(c_int, 22);
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE = @as(c_int, 24);
pub const MACH_MSG_TYPE_DISPOSE_SEND = @as(c_int, 25);
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE = @as(c_int, 26);
pub const MACH_MSG_PHYSICAL_COPY = @as(c_int, 0);
pub const MACH_MSG_VIRTUAL_COPY = @as(c_int, 1);
pub const MACH_MSG_ALLOCATE = @as(c_int, 2);
pub const MACH_MSG_OVERWRITE = @as(c_int, 3);
pub const MACH_MSG_GUARD_FLAGS_NONE = @as(c_int, 0x0000);
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE = @as(c_int, 0x0001);
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND = @as(c_int, 0x0002);
pub const MACH_MSG_GUARD_FLAGS_MASK = @as(c_int, 0x0003);
pub const MACH_MSG_PORT_DESCRIPTOR = @as(c_int, 0);
pub const MACH_MSG_OOL_DESCRIPTOR = @as(c_int, 1);
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR = @as(c_int, 2);
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR = @as(c_int, 3);
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR = @as(c_int, 4);
pub const MACH_MSG_DESCRIPTOR_MAX = MACH_MSG_GUARDED_PORT_DESCRIPTOR;
pub const MACH_MSG_BODY_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_body_t, @as(c_int, 0));
pub const MACH_MSG_DESCRIPTOR_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_descriptor_t, @as(c_int, 0));
pub const MACH_MSG_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_header_t, @as(c_int, 0));
pub const MACH_MSG_TRAILER_FORMAT_0 = @as(c_int, 0);
pub const MACH_MSG_FILTER_POLICY_ALLOW = @import("std").zig.c_translation.cast(mach_msg_filter_id, @as(c_int, 0));
pub const MACH_MSG_TRAILER_MINIMUM_SIZE = @import("std").zig.c_translation.sizeof(mach_msg_trailer_t);
pub const MAX_TRAILER_SIZE = @import("std").zig.c_translation.cast(mach_msg_size_t, @import("std").zig.c_translation.sizeof(mach_msg_max_trailer_t));
pub const MACH_MSG_TRAILER_FORMAT_0_SIZE = @import("std").zig.c_translation.sizeof(mach_msg_format_0_trailer_t);
pub inline fn round_msg(x: anytype) @TypeOf(((@import("std").zig.c_translation.cast(mach_msg_size_t, x) + @import("std").zig.c_translation.sizeof(natural_t)) - @as(c_int, 1)) & ~(@import("std").zig.c_translation.sizeof(natural_t) - @as(c_int, 1))) {
    _ = &x;
    return ((@import("std").zig.c_translation.cast(mach_msg_size_t, x) + @import("std").zig.c_translation.sizeof(natural_t)) - @as(c_int, 1)) & ~(@import("std").zig.c_translation.sizeof(natural_t) - @as(c_int, 1));
}
pub const MACH_MSG_SIZE_MAX = @import("std").zig.c_translation.cast(mach_msg_size_t, ~@as(c_int, 0));
pub const MACH_MSG_SIZE_RELIABLE = @import("std").zig.c_translation.cast(mach_msg_size_t, @as(c_int, 256)) * @as(c_int, 1024);
pub const MACH_MSGH_KIND_NORMAL = @as(c_int, 0x00000000);
pub const MACH_MSGH_KIND_NOTIFICATION = @as(c_int, 0x00000001);
pub const mach_msg_kind_t = mach_port_seqno_t;
pub const MACH_MSG_TYPE_PORT_NONE = @as(c_int, 0);
pub const MACH_MSG_TYPE_PORT_NAME = @as(c_int, 15);
pub const MACH_MSG_TYPE_PORT_RECEIVE = MACH_MSG_TYPE_MOVE_RECEIVE;
pub const MACH_MSG_TYPE_PORT_SEND = MACH_MSG_TYPE_MOVE_SEND;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE = MACH_MSG_TYPE_MOVE_SEND_ONCE;
pub const MACH_MSG_TYPE_LAST = @as(c_int, 22);
pub const MACH_MSG_TYPE_POLYMORPHIC = @import("std").zig.c_translation.cast(mach_msg_type_name_t, -@as(c_int, 1));
pub inline fn MACH_MSG_TYPE_PORT_ANY(x: anytype) @TypeOf((x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE)) {
    _ = &x;
    return (x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE);
}
pub inline fn MACH_MSG_TYPE_PORT_ANY_SEND(x: anytype) @TypeOf((x >= MACH_MSG_TYPE_MOVE_SEND) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE)) {
    _ = &x;
    return (x >= MACH_MSG_TYPE_MOVE_SEND) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE);
}
pub inline fn MACH_MSG_TYPE_PORT_ANY_RIGHT(x: anytype) @TypeOf((x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MOVE_SEND_ONCE)) {
    _ = &x;
    return (x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MOVE_SEND_ONCE);
}
pub const MACH_MSG_OPTION_NONE = @as(c_int, 0x00000000);
pub const MACH_SEND_MSG = @as(c_int, 0x00000001);
pub const MACH_RCV_MSG = @as(c_int, 0x00000002);
pub const MACH_RCV_LARGE = @as(c_int, 0x00000004);
pub const MACH_RCV_LARGE_IDENTITY = @as(c_int, 0x00000008);
pub const MACH_SEND_TIMEOUT = @as(c_int, 0x00000010);
pub const MACH_SEND_OVERRIDE = @as(c_int, 0x00000020);
pub const MACH_SEND_INTERRUPT = @as(c_int, 0x00000040);
pub const MACH_SEND_NOTIFY = @as(c_int, 0x00000080);
pub const MACH_SEND_ALWAYS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const MACH_SEND_FILTER_NONFATAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const MACH_SEND_TRAILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const MACH_SEND_NOIMPORTANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const MACH_SEND_NODENAP = MACH_SEND_NOIMPORTANCE;
pub const MACH_SEND_IMPORTANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const MACH_SEND_SYNC_OVERRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const MACH_SEND_PROPAGATE_QOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const MACH_SEND_SYNC_USE_THRPRI = MACH_SEND_PROPAGATE_QOS;
pub const MACH_SEND_KERNEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const MACH_RCV_TIMEOUT = @as(c_int, 0x00000100);
pub const MACH_RCV_NOTIFY = @as(c_int, 0x00000000);
pub const MACH_RCV_INTERRUPT = @as(c_int, 0x00000400);
pub const MACH_RCV_VOUCHER = @as(c_int, 0x00000800);
pub const MACH_RCV_OVERWRITE = @as(c_int, 0x00000000);
pub const MACH_RCV_GUARDED_DESC = @as(c_int, 0x00001000);
pub const MACH_RCV_SYNC_WAIT = @as(c_int, 0x00004000);
pub const MACH_RCV_SYNC_PEEK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const MACH_MSG_STRICT_REPLY = @as(c_int, 0x00000200);
pub const MACH_RCV_TRAILER_NULL = @as(c_int, 0);
pub const MACH_RCV_TRAILER_SEQNO = @as(c_int, 1);
pub const MACH_RCV_TRAILER_SENDER = @as(c_int, 2);
pub const MACH_RCV_TRAILER_AUDIT = @as(c_int, 3);
pub const MACH_RCV_TRAILER_CTX = @as(c_int, 4);
pub const MACH_RCV_TRAILER_AV = @as(c_int, 7);
pub const MACH_RCV_TRAILER_LABELS = @as(c_int, 8);
pub inline fn MACH_RCV_TRAILER_TYPE(x: anytype) @TypeOf((x & @as(c_int, 0xf)) << @as(c_int, 28)) {
    _ = &x;
    return (x & @as(c_int, 0xf)) << @as(c_int, 28);
}
pub inline fn MACH_RCV_TRAILER_ELEMENTS(x: anytype) @TypeOf((x & @as(c_int, 0xf)) << @as(c_int, 24)) {
    _ = &x;
    return (x & @as(c_int, 0xf)) << @as(c_int, 24);
}
pub const MACH_RCV_TRAILER_MASK = @as(c_int, 0xf) << @as(c_int, 24);
pub inline fn GET_RCV_ELEMENTS(y: anytype) @TypeOf((y >> @as(c_int, 24)) & @as(c_int, 0xf)) {
    _ = &y;
    return (y >> @as(c_int, 24)) & @as(c_int, 0xf);
}
pub inline fn REQUESTED_TRAILER_SIZE_NATIVE(y: anytype) mach_msg_trailer_size_t {
    _ = &y;
    return @import("std").zig.c_translation.cast(mach_msg_trailer_size_t, if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_NULL) @import("std").zig.c_translation.sizeof(mach_msg_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SEQNO) @import("std").zig.c_translation.sizeof(mach_msg_seqno_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SENDER) @import("std").zig.c_translation.sizeof(mach_msg_security_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AUDIT) @import("std").zig.c_translation.sizeof(mach_msg_audit_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_CTX) @import("std").zig.c_translation.sizeof(mach_msg_context_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AV) @import("std").zig.c_translation.sizeof(mach_msg_mac_trailer_t) else @import("std").zig.c_translation.sizeof(mach_msg_max_trailer_t));
}
pub inline fn REQUESTED_TRAILER_SIZE(y: anytype) @TypeOf(REQUESTED_TRAILER_SIZE_NATIVE(y)) {
    _ = &y;
    return REQUESTED_TRAILER_SIZE_NATIVE(y);
}
pub const MACH_MSG_SUCCESS = @as(c_int, 0x00000000);
pub const MACH_MSG_MASK = @as(c_int, 0x00003e00);
pub const MACH_MSG_IPC_SPACE = @as(c_int, 0x00002000);
pub const MACH_MSG_VM_SPACE = @as(c_int, 0x00001000);
pub const MACH_MSG_IPC_KERNEL = @as(c_int, 0x00000800);
pub const MACH_MSG_VM_KERNEL = @as(c_int, 0x00000400);
pub const MACH_SEND_IN_PROGRESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000001, .hex);
pub const MACH_SEND_INVALID_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000002, .hex);
pub const MACH_SEND_INVALID_DEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000003, .hex);
pub const MACH_SEND_TIMED_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000004, .hex);
pub const MACH_SEND_INVALID_VOUCHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000005, .hex);
pub const MACH_SEND_INTERRUPTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000007, .hex);
pub const MACH_SEND_MSG_TOO_SMALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000008, .hex);
pub const MACH_SEND_INVALID_REPLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000009, .hex);
pub const MACH_SEND_INVALID_RIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000a, .hex);
pub const MACH_SEND_INVALID_NOTIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000b, .hex);
pub const MACH_SEND_INVALID_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000c, .hex);
pub const MACH_SEND_NO_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000d, .hex);
pub const MACH_SEND_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000e, .hex);
pub const MACH_SEND_INVALID_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000f, .hex);
pub const MACH_SEND_INVALID_HEADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000010, .hex);
pub const MACH_SEND_INVALID_TRAILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000011, .hex);
pub const MACH_SEND_INVALID_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000012, .hex);
pub const MACH_SEND_INVALID_OPTIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000013, .hex);
pub const MACH_SEND_INVALID_RT_OOL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000015, .hex);
pub const MACH_SEND_NO_GRANT_DEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000016, .hex);
pub const MACH_SEND_MSG_FILTERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000017, .hex);
pub const MACH_SEND_AUX_TOO_SMALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000018, .hex);
pub const MACH_SEND_AUX_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000019, .hex);
pub const MACH_RCV_IN_PROGRESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004001, .hex);
pub const MACH_RCV_INVALID_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004002, .hex);
pub const MACH_RCV_TIMED_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004003, .hex);
pub const MACH_RCV_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004004, .hex);
pub const MACH_RCV_INTERRUPTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004005, .hex);
pub const MACH_RCV_PORT_CHANGED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004006, .hex);
pub const MACH_RCV_INVALID_NOTIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004007, .hex);
pub const MACH_RCV_INVALID_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004008, .hex);
pub const MACH_RCV_PORT_DIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004009, .hex);
pub const MACH_RCV_IN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400a, .hex);
pub const MACH_RCV_HEADER_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400b, .hex);
pub const MACH_RCV_BODY_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400c, .hex);
pub const MACH_RCV_INVALID_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400d, .hex);
pub const MACH_RCV_SCATTER_SMALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400e, .hex);
pub const MACH_RCV_INVALID_TRAILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400f, .hex);
pub const MACH_RCV_IN_PROGRESS_TIMED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004011, .hex);
pub const MACH_RCV_INVALID_REPLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004012, .hex);
pub const MACH_RCV_INVALID_ARGUMENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004013, .hex);
pub const DISPATCH_SOURCE_TYPE_DATA_ADD = &_dispatch_source_type_data_add;
pub const DISPATCH_SOURCE_TYPE_DATA_OR = &_dispatch_source_type_data_or;
pub const DISPATCH_SOURCE_TYPE_DATA_REPLACE = &_dispatch_source_type_data_replace;
pub const DISPATCH_SOURCE_TYPE_MACH_SEND = &_dispatch_source_type_mach_send;
pub const DISPATCH_SOURCE_TYPE_MACH_RECV = &_dispatch_source_type_mach_recv;
pub const DISPATCH_SOURCE_TYPE_MEMORYPRESSURE = &_dispatch_source_type_memorypressure;
pub const DISPATCH_SOURCE_TYPE_PROC = &_dispatch_source_type_proc;
pub const DISPATCH_SOURCE_TYPE_READ = &_dispatch_source_type_read;
pub const DISPATCH_SOURCE_TYPE_SIGNAL = &_dispatch_source_type_signal;
pub const DISPATCH_SOURCE_TYPE_TIMER = &_dispatch_source_type_timer;
pub const DISPATCH_SOURCE_TYPE_VNODE = &_dispatch_source_type_vnode;
pub const DISPATCH_SOURCE_TYPE_WRITE = &_dispatch_source_type_write;
pub const DISPATCH_MACH_SEND_DEAD = @as(c_int, 0x1);
pub const DISPATCH_MEMORYPRESSURE_NORMAL = @as(c_int, 0x01);
pub const DISPATCH_MEMORYPRESSURE_WARN = @as(c_int, 0x02);
pub const DISPATCH_MEMORYPRESSURE_CRITICAL = @as(c_int, 0x04);
pub const DISPATCH_PROC_EXIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const DISPATCH_PROC_FORK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const DISPATCH_PROC_EXEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const DISPATCH_PROC_SIGNAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const DISPATCH_VNODE_DELETE = @as(c_int, 0x1);
pub const DISPATCH_VNODE_WRITE = @as(c_int, 0x2);
pub const DISPATCH_VNODE_EXTEND = @as(c_int, 0x4);
pub const DISPATCH_VNODE_ATTRIB = @as(c_int, 0x8);
pub const DISPATCH_VNODE_LINK = @as(c_int, 0x10);
pub const DISPATCH_VNODE_RENAME = @as(c_int, 0x20);
pub const DISPATCH_VNODE_REVOKE = @as(c_int, 0x40);
pub const DISPATCH_VNODE_FUNLOCK = @as(c_int, 0x100);
pub const DISPATCH_TIMER_STRICT = @as(c_int, 0x1);
pub const __DISPATCH_GROUP__ = "";
pub const __DISPATCH_SEMAPHORE__ = "";
pub const __DISPATCH_ONCE__ = "";
pub const DISPATCH_ONCE_INLINE_FASTPATH = @as(c_int, 1);
pub const __DISPATCH_DATA__ = "";
pub const dispatch_data_empty = DISPATCH_GLOBAL_OBJECT(dispatch_data_t, _dispatch_data_empty);
pub const DISPATCH_DATA_DESTRUCTOR_DEFAULT = NULL;
pub const DISPATCH_DATA_DESTRUCTOR_FREE = _dispatch_data_destructor_free;
pub const DISPATCH_DATA_DESTRUCTOR_MUNMAP = _dispatch_data_destructor_munmap;
pub const __DISPATCH_IO__ = "";
pub const DISPATCH_IO_STREAM = @as(c_int, 0);
pub const DISPATCH_IO_RANDOM = @as(c_int, 1);
pub const DISPATCH_IO_STOP = @as(c_int, 0x1);
pub const DISPATCH_IO_STRICT_INTERVAL = @as(c_int, 0x1);
pub const __DISPATCH_WORKLOOP__ = "";
pub const __COREFOUNDATION_CFSET__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFTREE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFURLACCESS__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFUUID__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFUTILITIES__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBUNDLE__ = @as(c_int, 1);
pub const _MACH_MACHINE_H_ = "";
pub const CPU_STATE_MAX = @as(c_int, 4);
pub const CPU_STATE_USER = @as(c_int, 0);
pub const CPU_STATE_SYSTEM = @as(c_int, 1);
pub const CPU_STATE_IDLE = @as(c_int, 2);
pub const CPU_STATE_NICE = @as(c_int, 3);
pub const CPU_ARCH_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hex);
pub const CPU_ARCH_ABI64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const CPU_ARCH_ABI64_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const CPU_TYPE_ANY = @import("std").zig.c_translation.cast(cpu_type_t, -@as(c_int, 1));
pub const CPU_TYPE_VAX = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 1));
pub const CPU_TYPE_MC680x0 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 6));
pub const CPU_TYPE_X86 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 7));
pub const CPU_TYPE_I386 = CPU_TYPE_X86;
pub const CPU_TYPE_X86_64 = CPU_TYPE_X86 | CPU_ARCH_ABI64;
pub const CPU_TYPE_MC98000 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 10));
pub const CPU_TYPE_HPPA = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 11));
pub const CPU_TYPE_ARM = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 12));
pub const CPU_TYPE_ARM64 = CPU_TYPE_ARM | CPU_ARCH_ABI64;
pub const CPU_TYPE_ARM64_32 = CPU_TYPE_ARM | CPU_ARCH_ABI64_32;
pub const CPU_TYPE_MC88000 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 13));
pub const CPU_TYPE_SPARC = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 14));
pub const CPU_TYPE_I860 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 15));
pub const CPU_TYPE_POWERPC = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 18));
pub const CPU_TYPE_POWERPC64 = CPU_TYPE_POWERPC | CPU_ARCH_ABI64;
pub const CPU_SUBTYPE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hex);
pub const CPU_SUBTYPE_LIB64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const CPU_SUBTYPE_PTRAUTH_ABI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const CPU_SUBTYPE_ANY = @import("std").zig.c_translation.cast(cpu_subtype_t, -@as(c_int, 1));
pub const CPU_SUBTYPE_MULTIPLE = @import("std").zig.c_translation.cast(cpu_subtype_t, -@as(c_int, 1));
pub const CPU_SUBTYPE_LITTLE_ENDIAN = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_BIG_ENDIAN = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_THREADTYPE_NONE = @import("std").zig.c_translation.cast(cpu_threadtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_VAX_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_VAX780 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_VAX785 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_VAX750 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_VAX730 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_UVAXI = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_UVAXII = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_VAX8200 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_VAX8500 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_SUBTYPE_VAX8600 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 9));
pub const CPU_SUBTYPE_VAX8650 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 10));
pub const CPU_SUBTYPE_VAX8800 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 11));
pub const CPU_SUBTYPE_UVAXIII = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 12));
pub const CPU_SUBTYPE_MC680x0_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC68030 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC68040 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_MC68030_ONLY = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub inline fn CPU_SUBTYPE_INTEL(f: anytype, m: anytype) @TypeOf(@import("std").zig.c_translation.cast(cpu_subtype_t, f) + (m << @as(c_int, 4))) {
    _ = &f;
    _ = &m;
    return @import("std").zig.c_translation.cast(cpu_subtype_t, f) + (m << @as(c_int, 4));
}
pub const CPU_SUBTYPE_I386_ALL = CPU_SUBTYPE_INTEL(@as(c_int, 3), @as(c_int, 0));
pub const CPU_SUBTYPE_386 = CPU_SUBTYPE_INTEL(@as(c_int, 3), @as(c_int, 0));
pub const CPU_SUBTYPE_486 = CPU_SUBTYPE_INTEL(@as(c_int, 4), @as(c_int, 0));
pub const CPU_SUBTYPE_486SX = CPU_SUBTYPE_INTEL(@as(c_int, 4), @as(c_int, 8));
pub const CPU_SUBTYPE_586 = CPU_SUBTYPE_INTEL(@as(c_int, 5), @as(c_int, 0));
pub const CPU_SUBTYPE_PENT = CPU_SUBTYPE_INTEL(@as(c_int, 5), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTPRO = CPU_SUBTYPE_INTEL(@as(c_int, 6), @as(c_int, 1));
pub const CPU_SUBTYPE_PENTII_M3 = CPU_SUBTYPE_INTEL(@as(c_int, 6), @as(c_int, 3));
pub const CPU_SUBTYPE_PENTII_M5 = CPU_SUBTYPE_INTEL(@as(c_int, 6), @as(c_int, 5));
pub const CPU_SUBTYPE_CELERON = CPU_SUBTYPE_INTEL(@as(c_int, 7), @as(c_int, 6));
pub const CPU_SUBTYPE_CELERON_MOBILE = CPU_SUBTYPE_INTEL(@as(c_int, 7), @as(c_int, 7));
pub const CPU_SUBTYPE_PENTIUM_3 = CPU_SUBTYPE_INTEL(@as(c_int, 8), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTIUM_3_M = CPU_SUBTYPE_INTEL(@as(c_int, 8), @as(c_int, 1));
pub const CPU_SUBTYPE_PENTIUM_3_XEON = CPU_SUBTYPE_INTEL(@as(c_int, 8), @as(c_int, 2));
pub const CPU_SUBTYPE_PENTIUM_M = CPU_SUBTYPE_INTEL(@as(c_int, 9), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTIUM_4 = CPU_SUBTYPE_INTEL(@as(c_int, 10), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTIUM_4_M = CPU_SUBTYPE_INTEL(@as(c_int, 10), @as(c_int, 1));
pub const CPU_SUBTYPE_ITANIUM = CPU_SUBTYPE_INTEL(@as(c_int, 11), @as(c_int, 0));
pub const CPU_SUBTYPE_ITANIUM_2 = CPU_SUBTYPE_INTEL(@as(c_int, 11), @as(c_int, 1));
pub const CPU_SUBTYPE_XEON = CPU_SUBTYPE_INTEL(@as(c_int, 12), @as(c_int, 0));
pub const CPU_SUBTYPE_XEON_MP = CPU_SUBTYPE_INTEL(@as(c_int, 12), @as(c_int, 1));
pub inline fn CPU_SUBTYPE_INTEL_FAMILY(x: anytype) @TypeOf(x & @as(c_int, 15)) {
    _ = &x;
    return x & @as(c_int, 15);
}
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX = @as(c_int, 15);
pub inline fn CPU_SUBTYPE_INTEL_MODEL(x: anytype) @TypeOf(x >> @as(c_int, 4)) {
    _ = &x;
    return x >> @as(c_int, 4);
}
pub const CPU_SUBTYPE_INTEL_MODEL_ALL = @as(c_int, 0);
pub const CPU_SUBTYPE_X86_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_X86_64_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_X86_ARCH1 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_X86_64_H = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_THREADTYPE_INTEL_HTT = @import("std").zig.c_translation.cast(cpu_threadtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MIPS_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_MIPS_R2300 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MIPS_R2600 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_MIPS_R2800 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_MIPS_R2000a = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_MIPS_R2000 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_MIPS_R3000a = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_MIPS_R3000 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_MC98000_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_MC98601 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_HPPA_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_HPPA_7100 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_HPPA_7100LC = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC88000_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_MC88100 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC88110 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_SPARC_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_I860_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_I860_860 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_POWERPC_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_POWERPC_601 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_POWERPC_602 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_POWERPC_603 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_POWERPC_603e = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_POWERPC_603ev = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_POWERPC_604 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_POWERPC_604e = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_POWERPC_620 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_SUBTYPE_POWERPC_750 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 9));
pub const CPU_SUBTYPE_POWERPC_7400 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 10));
pub const CPU_SUBTYPE_POWERPC_7450 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 11));
pub const CPU_SUBTYPE_POWERPC_970 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 100));
pub const CPU_SUBTYPE_ARM_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_ARM_V4T = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_ARM_V6 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_ARM_V5TEJ = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_ARM_XSCALE = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_SUBTYPE_ARM_V7 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 9));
pub const CPU_SUBTYPE_ARM_V7F = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 10));
pub const CPU_SUBTYPE_ARM_V7S = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 11));
pub const CPU_SUBTYPE_ARM_V7K = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 12));
pub const CPU_SUBTYPE_ARM_V8 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 13));
pub const CPU_SUBTYPE_ARM_V6M = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 14));
pub const CPU_SUBTYPE_ARM_V7M = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 15));
pub const CPU_SUBTYPE_ARM_V7EM = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 16));
pub const CPU_SUBTYPE_ARM_V8M = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 17));
pub const CPU_SUBTYPE_ARM64_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_ARM64_V8 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_ARM64E = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex);
pub inline fn CPU_SUBTYPE_ARM64_PTR_AUTH_VERSION(x: anytype) @TypeOf((x & CPU_SUBTYPE_ARM64_PTR_AUTH_MASK) >> @as(c_int, 24)) {
    _ = &x;
    return (x & CPU_SUBTYPE_ARM64_PTR_AUTH_MASK) >> @as(c_int, 24);
}
pub const CPU_SUBTYPE_ARM64_32_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_ARM64_32_V8 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPUFAMILY_UNKNOWN = @as(c_int, 0);
pub const CPUFAMILY_POWERPC_G3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xcee41549, .hex);
pub const CPUFAMILY_POWERPC_G4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x77c184ae, .hex);
pub const CPUFAMILY_POWERPC_G5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xed76d8aa, .hex);
pub const CPUFAMILY_INTEL_6_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xaa33392b, .hex);
pub const CPUFAMILY_INTEL_PENRYN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x78ea4fbc, .hex);
pub const CPUFAMILY_INTEL_NEHALEM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6b5a4cd2, .hex);
pub const CPUFAMILY_INTEL_WESTMERE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x573b5eec, .hex);
pub const CPUFAMILY_INTEL_SANDYBRIDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x5490b78c, .hex);
pub const CPUFAMILY_INTEL_IVYBRIDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1f65e835, .hex);
pub const CPUFAMILY_INTEL_HASWELL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10b282dc, .hex);
pub const CPUFAMILY_INTEL_BROADWELL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x582ed09c, .hex);
pub const CPUFAMILY_INTEL_SKYLAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x37fc219f, .hex);
pub const CPUFAMILY_INTEL_KABYLAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f817246, .hex);
pub const CPUFAMILY_INTEL_ICELAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x38435547, .hex);
pub const CPUFAMILY_INTEL_COMETLAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1cf8a03e, .hex);
pub const CPUFAMILY_ARM_9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe73283ae, .hex);
pub const CPUFAMILY_ARM_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ff620d8, .hex);
pub const CPUFAMILY_ARM_XSCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x53b005f5, .hex);
pub const CPUFAMILY_ARM_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xbd1b0ae9, .hex);
pub const CPUFAMILY_ARM_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0cc90e64, .hex);
pub const CPUFAMILY_ARM_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96077ef1, .hex);
pub const CPUFAMILY_ARM_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xa8511bca, .hex);
pub const CPUFAMILY_ARM_SWIFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1e2d6381, .hex);
pub const CPUFAMILY_ARM_CYCLONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x37a09642, .hex);
pub const CPUFAMILY_ARM_TYPHOON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2c91a47e, .hex);
pub const CPUFAMILY_ARM_TWISTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92fb37c8, .hex);
pub const CPUFAMILY_ARM_HURRICANE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x67ceee93, .hex);
pub const CPUFAMILY_ARM_MONSOON_MISTRAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe81e7ef6, .hex);
pub const CPUFAMILY_ARM_VORTEX_TEMPEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x07d34b9f, .hex);
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x462504d2, .hex);
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1b588bb3, .hex);
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xda33d83d, .hex);
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765edea, .hex);
pub const CPUSUBFAMILY_UNKNOWN = @as(c_int, 0);
pub const CPUSUBFAMILY_ARM_HP = @as(c_int, 1);
pub const CPUSUBFAMILY_ARM_HG = @as(c_int, 2);
pub const CPUSUBFAMILY_ARM_M = @as(c_int, 3);
pub const CPUSUBFAMILY_ARM_HS = @as(c_int, 4);
pub const CPUSUBFAMILY_ARM_HC_HD = @as(c_int, 5);
pub const CPUFAMILY_INTEL_6_23 = CPUFAMILY_INTEL_PENRYN;
pub const CPUFAMILY_INTEL_6_26 = CPUFAMILY_INTEL_NEHALEM;
pub inline fn CFCopyLocalizedString(key: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, NULL)) {
    _ = &key;
    _ = &comment;
    return CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, NULL);
}
pub inline fn CFCopyLocalizedStringFromTable(key: anytype, tbl: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, tbl)) {
    _ = &key;
    _ = &tbl;
    _ = &comment;
    return CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, tbl);
}
pub inline fn CFCopyLocalizedStringFromTableInBundle(key: anytype, tbl: anytype, bundle: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(bundle, key, key, tbl)) {
    _ = &key;
    _ = &tbl;
    _ = &bundle;
    _ = &comment;
    return CFBundleCopyLocalizedString(bundle, key, key, tbl);
}
pub inline fn CFCopyLocalizedStringWithDefaultValue(key: anytype, tbl: anytype, bundle: anytype, value: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(bundle, key, value, tbl)) {
    _ = &key;
    _ = &tbl;
    _ = &bundle;
    _ = &value;
    _ = &comment;
    return CFBundleCopyLocalizedString(bundle, key, value, tbl);
}
pub const __COREFOUNDATION_CFMESSAGEPORT__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFPLUGIN__ = @as(c_int, 1);
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE = @as(c_int, 1);
pub const __COREFOUNDATION_CFMACHPORT__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFURLENUMERATOR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFFILESECURITY__ = @as(c_int, 1);
pub const _SYS_ACL_H = "";
pub const _SYS_KAUTH_H = "";
pub const KAUTH_UID_NONE = ~@import("std").zig.c_translation.cast(uid_t, @as(c_int, 0)) - @as(c_int, 100);
pub const KAUTH_GID_NONE = ~@import("std").zig.c_translation.cast(gid_t, @as(c_int, 0)) - @as(c_int, 100);
pub const _KAUTH_GUID = "";
pub const KAUTH_GUID_SIZE = @as(c_int, 16);
pub const _GUID_T = "";
pub const KAUTH_NTSID_MAX_AUTHORITIES = @as(c_int, 16);
pub const _NTSID_T = "";
pub const KAUTH_NTSID_HDRSIZE = @as(c_int, 8);
pub inline fn KAUTH_NTSID_SIZE(_s: anytype) @TypeOf(KAUTH_NTSID_HDRSIZE + (_s.*.sid_authcount * @import("std").zig.c_translation.sizeof(u_int32_t))) {
    _ = &_s;
    return KAUTH_NTSID_HDRSIZE + (_s.*.sid_authcount * @import("std").zig.c_translation.sizeof(u_int32_t));
}
pub const KAUTH_EXTLOOKUP_SUCCESS = @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_BADRQ = @as(c_int, 1);
pub const KAUTH_EXTLOOKUP_FAILURE = @as(c_int, 2);
pub const KAUTH_EXTLOOKUP_FATAL = @as(c_int, 3);
pub const KAUTH_EXTLOOKUP_INPROG = @as(c_int, 100);
pub const KAUTH_EXTLOOKUP_VALID_UID = @as(c_int, 1) << @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_VALID_UGUID = @as(c_int, 1) << @as(c_int, 1);
pub const KAUTH_EXTLOOKUP_VALID_USID = @as(c_int, 1) << @as(c_int, 2);
pub const KAUTH_EXTLOOKUP_VALID_GID = @as(c_int, 1) << @as(c_int, 3);
pub const KAUTH_EXTLOOKUP_VALID_GGUID = @as(c_int, 1) << @as(c_int, 4);
pub const KAUTH_EXTLOOKUP_VALID_GSID = @as(c_int, 1) << @as(c_int, 5);
pub const KAUTH_EXTLOOKUP_WANT_UID = @as(c_int, 1) << @as(c_int, 6);
pub const KAUTH_EXTLOOKUP_WANT_UGUID = @as(c_int, 1) << @as(c_int, 7);
pub const KAUTH_EXTLOOKUP_WANT_USID = @as(c_int, 1) << @as(c_int, 8);
pub const KAUTH_EXTLOOKUP_WANT_GID = @as(c_int, 1) << @as(c_int, 9);
pub const KAUTH_EXTLOOKUP_WANT_GGUID = @as(c_int, 1) << @as(c_int, 10);
pub const KAUTH_EXTLOOKUP_WANT_GSID = @as(c_int, 1) << @as(c_int, 11);
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP = @as(c_int, 1) << @as(c_int, 12);
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP = @as(c_int, 1) << @as(c_int, 13);
pub const KAUTH_EXTLOOKUP_ISMEMBER = @as(c_int, 1) << @as(c_int, 14);
pub const KAUTH_EXTLOOKUP_VALID_PWNAM = @as(c_int, 1) << @as(c_int, 15);
pub const KAUTH_EXTLOOKUP_WANT_PWNAM = @as(c_int, 1) << @as(c_int, 16);
pub const KAUTH_EXTLOOKUP_VALID_GRNAM = @as(c_int, 1) << @as(c_int, 17);
pub const KAUTH_EXTLOOKUP_WANT_GRNAM = @as(c_int, 1) << @as(c_int, 18);
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS = @as(c_int, 1) << @as(c_int, 19);
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS = @as(c_int, 1) << @as(c_int, 20);
pub const KAUTH_EXTLOOKUP_REGISTER = @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_RESULT = @as(c_int, 1) << @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_WORKER = @as(c_int, 1) << @as(c_int, 1);
pub const KAUTH_EXTLOOKUP_DEREGISTER = @as(c_int, 1) << @as(c_int, 2);
pub const KAUTH_GET_CACHE_SIZES = @as(c_int, 1) << @as(c_int, 3);
pub const KAUTH_SET_CACHE_SIZES = @as(c_int, 1) << @as(c_int, 4);
pub const KAUTH_CLEAR_CACHES = @as(c_int, 1) << @as(c_int, 5);
pub const IDENTITYSVC_ENTITLEMENT = "com.apple.private.identitysvc";
pub const KAUTH_ACE_KINDMASK = @as(c_int, 0xf);
pub const KAUTH_ACE_PERMIT = @as(c_int, 1);
pub const KAUTH_ACE_DENY = @as(c_int, 2);
pub const KAUTH_ACE_AUDIT = @as(c_int, 3);
pub const KAUTH_ACE_ALARM = @as(c_int, 4);
pub const KAUTH_ACE_INHERITED = @as(c_int, 1) << @as(c_int, 4);
pub const KAUTH_ACE_FILE_INHERIT = @as(c_int, 1) << @as(c_int, 5);
pub const KAUTH_ACE_DIRECTORY_INHERIT = @as(c_int, 1) << @as(c_int, 6);
pub const KAUTH_ACE_LIMIT_INHERIT = @as(c_int, 1) << @as(c_int, 7);
pub const KAUTH_ACE_ONLY_INHERIT = @as(c_int, 1) << @as(c_int, 8);
pub const KAUTH_ACE_SUCCESS = @as(c_int, 1) << @as(c_int, 9);
pub const KAUTH_ACE_FAILURE = @as(c_int, 1) << @as(c_int, 10);
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS = ((KAUTH_ACE_FILE_INHERIT | KAUTH_ACE_DIRECTORY_INHERIT) | KAUTH_ACE_LIMIT_INHERIT) | KAUTH_ACE_ONLY_INHERIT;
pub const KAUTH_ACE_GENERIC_ALL = @as(c_int, 1) << @as(c_int, 21);
pub const KAUTH_ACE_GENERIC_EXECUTE = @as(c_int, 1) << @as(c_int, 22);
pub const KAUTH_ACE_GENERIC_WRITE = @as(c_int, 1) << @as(c_int, 23);
pub const KAUTH_ACE_GENERIC_READ = @as(c_int, 1) << @as(c_int, 24);
pub const _KAUTH_ACE = "";
pub const KAUTH_ACL_MAX_ENTRIES = @as(c_int, 128);
pub const KAUTH_ACL_FLAGS_PRIVATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex);
pub const KAUTH_ACL_DEFER_INHERIT = @as(c_int, 1) << @as(c_int, 16);
pub const KAUTH_ACL_NO_INHERIT = @as(c_int, 1) << @as(c_int, 17);
pub const KAUTH_FILESEC_NOACL = @import("std").zig.c_translation.cast(u_int32_t, -@as(c_int, 1));
pub inline fn KAUTH_ACL_COPYSIZE(p: anytype) @TypeOf(KAUTH_ACL_SIZE(p.*.acl_entrycount)) {
    _ = &p;
    return KAUTH_ACL_SIZE(p.*.acl_entrycount);
}
pub const _KAUTH_ACL = "";
pub const KAUTH_FILESEC_MAGIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x012cc16d, .hex);
pub const KAUTH_FILESEC_FLAGS_PRIVATE = KAUTH_ACL_FLAGS_PRIVATE;
pub const KAUTH_FILESEC_DEFER_INHERIT = KAUTH_ACL_DEFER_INHERIT;
pub const KAUTH_FILESEC_NO_INHERIT = KAUTH_ACL_NO_INHERIT;
pub const KAUTH_FILESEC_NONE = @import("std").zig.c_translation.cast(kauth_filesec_t, @as(c_int, 0));
pub const KAUTH_FILESEC_WANTED = @import("std").zig.c_translation.cast(kauth_filesec_t, @as(c_int, 1));
pub const _KAUTH_FILESEC = "";
pub inline fn KAUTH_FILESEC_COPYSIZE(p: anytype) @TypeOf(KAUTH_FILESEC_SIZE(if (p.*.fsec_entrycount == KAUTH_FILESEC_NOACL) @as(c_int, 0) else p.*.fsec_entrycount)) {
    _ = &p;
    return KAUTH_FILESEC_SIZE(if (p.*.fsec_entrycount == KAUTH_FILESEC_NOACL) @as(c_int, 0) else p.*.fsec_entrycount);
}
pub inline fn KAUTH_FILESEC_COUNT(s: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(s - KAUTH_FILESEC_SIZE(@as(c_int, 0)), @import("std").zig.c_translation.sizeof(struct_kauth_ace))) {
    _ = &s;
    return @import("std").zig.c_translation.MacroArithmetic.div(s - KAUTH_FILESEC_SIZE(@as(c_int, 0)), @import("std").zig.c_translation.sizeof(struct_kauth_ace));
}
pub inline fn KAUTH_FILESEC_VALID(s: anytype) @TypeOf((s >= KAUTH_FILESEC_SIZE(@as(c_int, 0))) and (@import("std").zig.c_translation.MacroArithmetic.rem(s - KAUTH_FILESEC_SIZE(@as(c_int, 0)), @import("std").zig.c_translation.sizeof(struct_kauth_ace)) == @as(c_int, 0))) {
    _ = &s;
    return (s >= KAUTH_FILESEC_SIZE(@as(c_int, 0))) and (@import("std").zig.c_translation.MacroArithmetic.rem(s - KAUTH_FILESEC_SIZE(@as(c_int, 0)), @import("std").zig.c_translation.sizeof(struct_kauth_ace)) == @as(c_int, 0));
}
pub const KAUTH_FILESEC_XATTR = "com.apple.system.Security";
pub const KAUTH_ENDIAN_HOST = @as(c_int, 0x00000001);
pub const KAUTH_ENDIAN_DISK = @as(c_int, 0x00000002);
pub const KAUTH_VNODE_READ_DATA = @as(c_uint, 1) << @as(c_int, 1);
pub const KAUTH_VNODE_LIST_DIRECTORY = KAUTH_VNODE_READ_DATA;
pub const KAUTH_VNODE_WRITE_DATA = @as(c_uint, 1) << @as(c_int, 2);
pub const KAUTH_VNODE_ADD_FILE = KAUTH_VNODE_WRITE_DATA;
pub const KAUTH_VNODE_EXECUTE = @as(c_uint, 1) << @as(c_int, 3);
pub const KAUTH_VNODE_SEARCH = KAUTH_VNODE_EXECUTE;
pub const KAUTH_VNODE_DELETE = @as(c_uint, 1) << @as(c_int, 4);
pub const KAUTH_VNODE_APPEND_DATA = @as(c_uint, 1) << @as(c_int, 5);
pub const KAUTH_VNODE_ADD_SUBDIRECTORY = KAUTH_VNODE_APPEND_DATA;
pub const KAUTH_VNODE_DELETE_CHILD = @as(c_uint, 1) << @as(c_int, 6);
pub const KAUTH_VNODE_READ_ATTRIBUTES = @as(c_uint, 1) << @as(c_int, 7);
pub const KAUTH_VNODE_WRITE_ATTRIBUTES = @as(c_uint, 1) << @as(c_int, 8);
pub const KAUTH_VNODE_READ_EXTATTRIBUTES = @as(c_uint, 1) << @as(c_int, 9);
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES = @as(c_uint, 1) << @as(c_int, 10);
pub const KAUTH_VNODE_READ_SECURITY = @as(c_uint, 1) << @as(c_int, 11);
pub const KAUTH_VNODE_WRITE_SECURITY = @as(c_uint, 1) << @as(c_int, 12);
pub const KAUTH_VNODE_TAKE_OWNERSHIP = @as(c_uint, 1) << @as(c_int, 13);
pub const KAUTH_VNODE_CHANGE_OWNER = KAUTH_VNODE_TAKE_OWNERSHIP;
pub const KAUTH_VNODE_SYNCHRONIZE = @as(c_uint, 1) << @as(c_int, 20);
pub const KAUTH_VNODE_LINKTARGET = @as(c_uint, 1) << @as(c_int, 25);
pub const KAUTH_VNODE_CHECKIMMUTABLE = @as(c_uint, 1) << @as(c_int, 26);
pub const KAUTH_VNODE_ACCESS = @as(c_uint, 1) << @as(c_int, 31);
pub const KAUTH_VNODE_NOIMMUTABLE = @as(c_uint, 1) << @as(c_int, 30);
pub const KAUTH_VNODE_SEARCHBYANYONE = @as(c_uint, 1) << @as(c_int, 29);
pub const KAUTH_VNODE_GENERIC_READ_BITS = ((KAUTH_VNODE_READ_DATA | KAUTH_VNODE_READ_ATTRIBUTES) | KAUTH_VNODE_READ_EXTATTRIBUTES) | KAUTH_VNODE_READ_SECURITY;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS = (((((KAUTH_VNODE_WRITE_DATA | KAUTH_VNODE_APPEND_DATA) | KAUTH_VNODE_DELETE) | KAUTH_VNODE_DELETE_CHILD) | KAUTH_VNODE_WRITE_ATTRIBUTES) | KAUTH_VNODE_WRITE_EXTATTRIBUTES) | KAUTH_VNODE_WRITE_SECURITY;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS = KAUTH_VNODE_EXECUTE;
pub const KAUTH_VNODE_GENERIC_ALL_BITS = (KAUTH_VNODE_GENERIC_READ_BITS | KAUTH_VNODE_GENERIC_WRITE_BITS) | KAUTH_VNODE_GENERIC_EXECUTE_BITS;
pub const KAUTH_VNODE_WRITE_RIGHTS = ((((((((((KAUTH_VNODE_ADD_FILE | KAUTH_VNODE_ADD_SUBDIRECTORY) | KAUTH_VNODE_DELETE_CHILD) | KAUTH_VNODE_WRITE_DATA) | KAUTH_VNODE_APPEND_DATA) | KAUTH_VNODE_DELETE) | KAUTH_VNODE_WRITE_ATTRIBUTES) | KAUTH_VNODE_WRITE_EXTATTRIBUTES) | KAUTH_VNODE_WRITE_SECURITY) | KAUTH_VNODE_TAKE_OWNERSHIP) | KAUTH_VNODE_LINKTARGET) | KAUTH_VNODE_CHECKIMMUTABLE;
pub const __DARWIN_ACL_READ_DATA = @as(c_int, 1) << @as(c_int, 1);
pub const __DARWIN_ACL_LIST_DIRECTORY = __DARWIN_ACL_READ_DATA;
pub const __DARWIN_ACL_WRITE_DATA = @as(c_int, 1) << @as(c_int, 2);
pub const __DARWIN_ACL_ADD_FILE = __DARWIN_ACL_WRITE_DATA;
pub const __DARWIN_ACL_EXECUTE = @as(c_int, 1) << @as(c_int, 3);
pub const __DARWIN_ACL_SEARCH = __DARWIN_ACL_EXECUTE;
pub const __DARWIN_ACL_DELETE = @as(c_int, 1) << @as(c_int, 4);
pub const __DARWIN_ACL_APPEND_DATA = @as(c_int, 1) << @as(c_int, 5);
pub const __DARWIN_ACL_ADD_SUBDIRECTORY = __DARWIN_ACL_APPEND_DATA;
pub const __DARWIN_ACL_DELETE_CHILD = @as(c_int, 1) << @as(c_int, 6);
pub const __DARWIN_ACL_READ_ATTRIBUTES = @as(c_int, 1) << @as(c_int, 7);
pub const __DARWIN_ACL_WRITE_ATTRIBUTES = @as(c_int, 1) << @as(c_int, 8);
pub const __DARWIN_ACL_READ_EXTATTRIBUTES = @as(c_int, 1) << @as(c_int, 9);
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES = @as(c_int, 1) << @as(c_int, 10);
pub const __DARWIN_ACL_READ_SECURITY = @as(c_int, 1) << @as(c_int, 11);
pub const __DARWIN_ACL_WRITE_SECURITY = @as(c_int, 1) << @as(c_int, 12);
pub const __DARWIN_ACL_CHANGE_OWNER = @as(c_int, 1) << @as(c_int, 13);
pub const __DARWIN_ACL_SYNCHRONIZE = @as(c_int, 1) << @as(c_int, 20);
pub const __DARWIN_ACL_EXTENDED_ALLOW = @as(c_int, 1);
pub const __DARWIN_ACL_EXTENDED_DENY = @as(c_int, 2);
pub const __DARWIN_ACL_ENTRY_INHERITED = @as(c_int, 1) << @as(c_int, 4);
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT = @as(c_int, 1) << @as(c_int, 5);
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT = @as(c_int, 1) << @as(c_int, 6);
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT = @as(c_int, 1) << @as(c_int, 7);
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT = @as(c_int, 1) << @as(c_int, 8);
pub const __DARWIN_ACL_FLAG_NO_INHERIT = @as(c_int, 1) << @as(c_int, 17);
pub const ACL_MAX_ENTRIES = @as(c_int, 128);
pub const ACL_UNDEFINED_ID = NULL;
pub const kCFFileSecurityRemoveACL = @import("std").zig.c_translation.cast(acl_t, _FILESEC_REMOVE_ACL);
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFUSERNOTIFICATION__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFXMLNODE__ = @as(c_int, 1);
pub const __CFXMLNode_DEPRECATION_MSG = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead";
pub const __COREFOUNDATION_CFXMLPARSER__ = @as(c_int, 1);
pub const __CFXMLParser_DEPRECATION_MSG = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead";
pub const CGDATACONSUMER_H_ = "";
pub const CGERROR_H_ = "";
pub const CGLAYER_H_ = "";
pub const CGPDFCONTENTSTREAM_H_ = "";
pub const CGPDFCONTEXT_H_ = "";
pub const CGPDFOPERATORTABLE_H_ = "";
pub const CGPDFSCANNER_H_ = "";
pub const CGDIRECTDISPLAY_H_ = "";
pub const CGWINDOW_H_ = "";
pub const kCGNullWindowID = @import("std").zig.c_translation.cast(CGWindowID, @as(c_int, 0));
pub const kCGWindowIDCFNumberType = kCFNumberSInt32Type;
pub const kCGWindowSharingCFNumberType = kCFNumberSInt32Type;
pub const kCGWindowBackingCFNumberType = kCFNumberSInt32Type;
pub const CGWINDOWLEVEL_H_ = "";
pub const kCGNumReservedWindowLevels = @as(c_int, 16);
pub const kCGNumReservedBaseWindowLevels = @as(c_int, 5);
pub const kCGBaseWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, INT32_MIN);
pub const kCGMinimumWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, kCGBaseWindowLevel + kCGNumReservedBaseWindowLevels);
pub const kCGMaximumWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, INT32_MAX - kCGNumReservedWindowLevels);
pub const kCGDesktopWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, kCGMinimumWindowLevel + @as(c_int, 20));
pub const kCGDesktopIconWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, kCGDesktopWindowLevel + @as(c_int, 20));
pub const kCGBackstopMenuLevel = @import("std").zig.c_translation.cast(CGWindowLevel, -@as(c_int, 20));
pub const kCGNormalWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 0));
pub const kCGFloatingWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 3));
pub const kCGTornOffMenuWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 3));
pub const kCGModalPanelWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 8));
pub const kCGUtilityWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 19));
pub const kCGDockWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 20));
pub const kCGMainMenuWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 24));
pub const kCGStatusWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 25));
pub const kCGPopUpMenuWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 101));
pub const kCGOverlayWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 102));
pub const kCGHelpWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 200));
pub const kCGDraggingWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 500));
pub const kCGScreenSaverWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 1000));
pub const kCGAssistiveTechHighWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 1500));
pub const kCGCursorWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, kCGMaximumWindowLevel - @as(c_int, 1));
pub const kCGNullDirectDisplay = @import("std").zig.c_translation.cast(CGDirectDisplayID, @as(c_int, 0));
pub const kCGDirectMainDisplay = CGMainDisplayID();
pub const kCGDisplayWidth = CFSTR("Width");
pub const kCGDisplayHeight = CFSTR("Height");
pub const kCGDisplayMode = CFSTR("Mode");
pub const kCGDisplayBitsPerPixel = CFSTR("BitsPerPixel");
pub const kCGDisplayBitsPerSample = CFSTR("BitsPerSample");
pub const kCGDisplaySamplesPerPixel = CFSTR("SamplesPerPixel");
pub const kCGDisplayRefreshRate = CFSTR("RefreshRate");
pub const kCGDisplayModeUsableForDesktopGUI = CFSTR("UsableForDesktopGUI");
pub const kCGDisplayIOFlags = CFSTR("IOFlags");
pub const kCGDisplayBytesPerRow = CFSTR("kCGDisplayBytesPerRow");
pub const kCGIODisplayModeID = CFSTR("IODisplayModeID");
pub const kCGDisplayModeIsSafeForHardware = CFSTR("kCGDisplayModeIsSafeForHardware");
pub const kCGDisplayModeIsInterlaced = CFSTR("kCGDisplayModeIsInterlaced");
pub const kCGDisplayModeIsStretched = CFSTR("kCGDisplayModeIsStretched");
pub const kCGDisplayModeIsTelevisionOutput = CFSTR("kCGDisplayModeIsTelevisionOutput");
pub const CGDisplayNoErr = kCGErrorSuccess;
pub const CGDIRECTPALETTE_H_ = "";
pub const CGDISPLAYCONFIGURATION_H_ = "";
pub const _IOKIT_IOKITLIB_H = "";
pub const _MACH_MACH_TYPES_H_ = "";
pub const _MACH_HOST_INFO_H_ = "";
pub const _MACH_VM_STATISTICS_H_ = "";
pub inline fn VM_STATISTICS_TRUNCATE_TO_32_BIT(value: anytype) u32 {
    _ = &value;
    return @import("std").zig.c_translation.cast(u32, if (value > UINT32_MAX) UINT32_MAX else value);
}
pub const VM_PAGE_QUERY_PAGE_PRESENT = @as(c_int, 0x1);
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS = @as(c_int, 0x2);
pub const VM_PAGE_QUERY_PAGE_REF = @as(c_int, 0x4);
pub const VM_PAGE_QUERY_PAGE_DIRTY = @as(c_int, 0x8);
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT = @as(c_int, 0x10);
pub const VM_PAGE_QUERY_PAGE_COPIED = @as(c_int, 0x20);
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE = @as(c_int, 0x40);
pub const VM_PAGE_QUERY_PAGE_EXTERNAL = @as(c_int, 0x80);
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED = @as(c_int, 0x100);
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED = @as(c_int, 0x200);
pub const VM_PAGE_QUERY_PAGE_CS_NX = @as(c_int, 0x400);
pub const VM_PAGE_QUERY_PAGE_REUSABLE = @as(c_int, 0x800);
pub const VM_FLAGS_FIXED = @as(c_int, 0x00000000);
pub const VM_FLAGS_ANYWHERE = @as(c_int, 0x00000001);
pub const VM_FLAGS_PURGABLE = @as(c_int, 0x00000002);
pub const VM_FLAGS_4GB_CHUNK = @as(c_int, 0x00000004);
pub const VM_FLAGS_RANDOM_ADDR = @as(c_int, 0x00000008);
pub const VM_FLAGS_NO_CACHE = @as(c_int, 0x00000010);
pub const VM_FLAGS_RESILIENT_CODESIGN = @as(c_int, 0x00000020);
pub const VM_FLAGS_RESILIENT_MEDIA = @as(c_int, 0x00000040);
pub const VM_FLAGS_PERMANENT = @as(c_int, 0x00000080);
pub const VM_FLAGS_TPRO = @as(c_int, 0x00001000);
pub const VM_FLAGS_OVERWRITE = @as(c_int, 0x00004000);
pub const VM_FLAGS_SUPERPAGE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00070000, .hex);
pub const VM_FLAGS_RETURN_DATA_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const VM_FLAGS_RETURN_4K_DATA_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const VM_FLAGS_ALIAS_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF000000, .hex);
pub const VM_FLAGS_USER_ALLOCATE = (((((((((VM_FLAGS_FIXED | VM_FLAGS_ANYWHERE) | VM_FLAGS_PURGABLE) | VM_FLAGS_4GB_CHUNK) | VM_FLAGS_RANDOM_ADDR) | VM_FLAGS_NO_CACHE) | VM_FLAGS_PERMANENT) | VM_FLAGS_OVERWRITE) | VM_FLAGS_SUPERPAGE_MASK) | VM_FLAGS_TPRO) | VM_FLAGS_ALIAS_MASK;
pub const VM_FLAGS_USER_MAP = (VM_FLAGS_USER_ALLOCATE | VM_FLAGS_RETURN_4K_DATA_ADDR) | VM_FLAGS_RETURN_DATA_ADDR;
pub const VM_FLAGS_USER_REMAP = (((((VM_FLAGS_FIXED | VM_FLAGS_ANYWHERE) | VM_FLAGS_RANDOM_ADDR) | VM_FLAGS_OVERWRITE) | VM_FLAGS_RETURN_DATA_ADDR) | VM_FLAGS_RESILIENT_CODESIGN) | VM_FLAGS_RESILIENT_MEDIA;
pub const VM_FLAGS_SUPERPAGE_SHIFT = @as(c_int, 16);
pub const SUPERPAGE_NONE = @as(c_int, 0);
pub const SUPERPAGE_SIZE_ANY = @as(c_int, 1);
pub const VM_FLAGS_SUPERPAGE_NONE = SUPERPAGE_NONE << VM_FLAGS_SUPERPAGE_SHIFT;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY = SUPERPAGE_SIZE_ANY << VM_FLAGS_SUPERPAGE_SHIFT;
pub const SUPERPAGE_SIZE_2MB = @as(c_int, 2);
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB = SUPERPAGE_SIZE_2MB << VM_FLAGS_SUPERPAGE_SHIFT;
pub const GUARD_TYPE_VIRT_MEMORY = @as(c_int, 0x5);
pub const __VM_LEDGER_ACCOUNTING_POSTMARK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2019032600, .decimal);
pub const VM_LEDGER_TAG_NONE = @as(c_int, 0x00000000);
pub const VM_LEDGER_TAG_DEFAULT = @as(c_int, 0x00000001);
pub const VM_LEDGER_TAG_NETWORK = @as(c_int, 0x00000002);
pub const VM_LEDGER_TAG_MEDIA = @as(c_int, 0x00000003);
pub const VM_LEDGER_TAG_GRAPHICS = @as(c_int, 0x00000004);
pub const VM_LEDGER_TAG_NEURAL = @as(c_int, 0x00000005);
pub const VM_LEDGER_TAG_MAX = @as(c_int, 0x00000005);
pub const VM_LEDGER_TAG_UNCHANGED = @import("std").zig.c_translation.cast(c_int, -@as(c_int, 1));
pub const VM_LEDGER_FLAG_NO_FOOTPRINT = @as(c_int, 1) << @as(c_int, 0);
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG = @as(c_int, 1) << @as(c_int, 1);
pub const VM_LEDGER_FLAGS = VM_LEDGER_FLAG_NO_FOOTPRINT | VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG;
pub const VM_MEMORY_MALLOC = @as(c_int, 1);
pub const VM_MEMORY_MALLOC_SMALL = @as(c_int, 2);
pub const VM_MEMORY_MALLOC_LARGE = @as(c_int, 3);
pub const VM_MEMORY_MALLOC_HUGE = @as(c_int, 4);
pub const VM_MEMORY_SBRK = @as(c_int, 5);
pub const VM_MEMORY_REALLOC = @as(c_int, 6);
pub const VM_MEMORY_MALLOC_TINY = @as(c_int, 7);
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE = @as(c_int, 8);
pub const VM_MEMORY_MALLOC_LARGE_REUSED = @as(c_int, 9);
pub const VM_MEMORY_ANALYSIS_TOOL = @as(c_int, 10);
pub const VM_MEMORY_MALLOC_NANO = @as(c_int, 11);
pub const VM_MEMORY_MALLOC_MEDIUM = @as(c_int, 12);
pub const VM_MEMORY_MALLOC_PGUARD = @as(c_int, 13);
pub const VM_MEMORY_MALLOC_PROB_GUARD = @as(c_int, 13);
pub const VM_MEMORY_MACH_MSG = @as(c_int, 20);
pub const VM_MEMORY_IOKIT = @as(c_int, 21);
pub const VM_MEMORY_STACK = @as(c_int, 30);
pub const VM_MEMORY_GUARD = @as(c_int, 31);
pub const VM_MEMORY_SHARED_PMAP = @as(c_int, 32);
pub const VM_MEMORY_DYLIB = @as(c_int, 33);
pub const VM_MEMORY_OBJC_DISPATCHERS = @as(c_int, 34);
pub const VM_MEMORY_UNSHARED_PMAP = @as(c_int, 35);
pub const VM_MEMORY_APPKIT = @as(c_int, 40);
pub const VM_MEMORY_FOUNDATION = @as(c_int, 41);
pub const VM_MEMORY_COREGRAPHICS = @as(c_int, 42);
pub const VM_MEMORY_CORESERVICES = @as(c_int, 43);
pub const VM_MEMORY_CARBON = VM_MEMORY_CORESERVICES;
pub const VM_MEMORY_JAVA = @as(c_int, 44);
pub const VM_MEMORY_COREDATA = @as(c_int, 45);
pub const VM_MEMORY_COREDATA_OBJECTIDS = @as(c_int, 46);
pub const VM_MEMORY_ATS = @as(c_int, 50);
pub const VM_MEMORY_LAYERKIT = @as(c_int, 51);
pub const VM_MEMORY_CGIMAGE = @as(c_int, 52);
pub const VM_MEMORY_TCMALLOC = @as(c_int, 53);
pub const VM_MEMORY_COREGRAPHICS_DATA = @as(c_int, 54);
pub const VM_MEMORY_COREGRAPHICS_SHARED = @as(c_int, 55);
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS = @as(c_int, 56);
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES = @as(c_int, 57);
pub const VM_MEMORY_COREGRAPHICS_XALLOC = @as(c_int, 58);
pub const VM_MEMORY_COREGRAPHICS_MISC = VM_MEMORY_COREGRAPHICS;
pub const VM_MEMORY_DYLD = @as(c_int, 60);
pub const VM_MEMORY_DYLD_MALLOC = @as(c_int, 61);
pub const VM_MEMORY_SQLITE = @as(c_int, 62);
pub const VM_MEMORY_JAVASCRIPT_CORE = @as(c_int, 63);
pub const VM_MEMORY_WEBASSEMBLY = VM_MEMORY_JAVASCRIPT_CORE;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR = @as(c_int, 64);
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE = @as(c_int, 65);
pub const VM_MEMORY_GLSL = @as(c_int, 66);
pub const VM_MEMORY_OPENCL = @as(c_int, 67);
pub const VM_MEMORY_COREIMAGE = @as(c_int, 68);
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS = @as(c_int, 69);
pub const VM_MEMORY_IMAGEIO = @as(c_int, 70);
pub const VM_MEMORY_COREPROFILE = @as(c_int, 71);
pub const VM_MEMORY_ASSETSD = @as(c_int, 72);
pub const VM_MEMORY_OS_ALLOC_ONCE = @as(c_int, 73);
pub const VM_MEMORY_LIBDISPATCH = @as(c_int, 74);
pub const VM_MEMORY_ACCELERATE = @as(c_int, 75);
pub const VM_MEMORY_COREUI = @as(c_int, 76);
pub const VM_MEMORY_COREUIFILE = @as(c_int, 77);
pub const VM_MEMORY_GENEALOGY = @as(c_int, 78);
pub const VM_MEMORY_RAWCAMERA = @as(c_int, 79);
pub const VM_MEMORY_CORPSEINFO = @as(c_int, 80);
pub const VM_MEMORY_ASL = @as(c_int, 81);
pub const VM_MEMORY_SWIFT_RUNTIME = @as(c_int, 82);
pub const VM_MEMORY_SWIFT_METADATA = @as(c_int, 83);
pub const VM_MEMORY_DHMM = @as(c_int, 84);
pub const VM_MEMORY_SCENEKIT = @as(c_int, 86);
pub const VM_MEMORY_SKYWALK = @as(c_int, 87);
pub const VM_MEMORY_IOSURFACE = @as(c_int, 88);
pub const VM_MEMORY_LIBNETWORK = @as(c_int, 89);
pub const VM_MEMORY_AUDIO = @as(c_int, 90);
pub const VM_MEMORY_VIDEOBITSTREAM = @as(c_int, 91);
pub const VM_MEMORY_CM_XPC = @as(c_int, 92);
pub const VM_MEMORY_CM_RPC = @as(c_int, 93);
pub const VM_MEMORY_CM_MEMORYPOOL = @as(c_int, 94);
pub const VM_MEMORY_CM_READCACHE = @as(c_int, 95);
pub const VM_MEMORY_CM_CRABS = @as(c_int, 96);
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS = @as(c_int, 97);
pub const VM_MEMORY_ACCOUNTS = @as(c_int, 98);
pub const VM_MEMORY_SANITIZER = @as(c_int, 99);
pub const VM_MEMORY_IOACCELERATOR = @as(c_int, 100);
pub const VM_MEMORY_CM_REGWARP = @as(c_int, 101);
pub const VM_MEMORY_EAR_DECODER = @as(c_int, 102);
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA = @as(c_int, 103);
pub const VM_MEMORY_COLORSYNC = @as(c_int, 104);
pub const VM_MEMORY_BTINFO = @as(c_int, 105);
pub const VM_MEMORY_ROSETTA = @as(c_int, 230);
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT = @as(c_int, 231);
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP = @as(c_int, 232);
pub const VM_MEMORY_ROSETTA_RETURN_STACK = @as(c_int, 233);
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP = @as(c_int, 234);
pub const VM_MEMORY_ROSETTA_USER_LDT = @as(c_int, 235);
pub const VM_MEMORY_ROSETTA_ARENA = @as(c_int, 236);
pub const VM_MEMORY_ROSETTA_10 = @as(c_int, 239);
pub const VM_MEMORY_APPLICATION_SPECIFIC_1 = @as(c_int, 240);
pub const VM_MEMORY_APPLICATION_SPECIFIC_16 = @as(c_int, 255);
pub const VM_MEMORY_COUNT = @as(c_int, 256);
pub inline fn VM_MAKE_TAG(tag: anytype) @TypeOf(tag << @as(c_int, 24)) {
    _ = &tag;
    return tag << @as(c_int, 24);
}
pub const HOST_INFO_MAX = @as(c_int, 1024);
pub const KERNEL_VERSION_MAX = @as(c_int, 512);
pub const KERNEL_BOOT_INFO_MAX = @as(c_int, 4096);
pub const HOST_BASIC_INFO = @as(c_int, 1);
pub const HOST_SCHED_INFO = @as(c_int, 3);
pub const HOST_RESOURCE_SIZES = @as(c_int, 4);
pub const HOST_PRIORITY_INFO = @as(c_int, 5);
pub const HOST_SEMAPHORE_TRAPS = @as(c_int, 7);
pub const HOST_MACH_MSG_TRAP = @as(c_int, 8);
pub const HOST_VM_PURGABLE = @as(c_int, 9);
pub const HOST_DEBUG_INFO_INTERNAL = @as(c_int, 10);
pub const HOST_CAN_HAS_DEBUGGER = @as(c_int, 11);
pub const HOST_PREFERRED_USER_ARCH = @as(c_int, 12);
pub const HOST_CAN_HAS_DEBUGGER_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(host_can_has_debugger_info_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(host_basic_info_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_SCHED_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(host_sched_info_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_RESOURCE_SIZES_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(kernel_resource_sizes_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_PRIORITY_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(host_priority_info_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_LOAD_INFO = @as(c_int, 1);
pub const HOST_VM_INFO = @as(c_int, 2);
pub const HOST_CPU_LOAD_INFO = @as(c_int, 3);
pub const HOST_VM_INFO64 = @as(c_int, 4);
pub const HOST_EXTMOD_INFO64 = @as(c_int, 5);
pub const HOST_EXPIRED_TASK_INFO = @as(c_int, 6);
pub const HOST_LOAD_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(host_load_info_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_VM_PURGABLE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(host_purgable_info_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_VM_INFO64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_statistics64_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_VM_INFO64_LATEST_COUNT = HOST_VM_INFO64_COUNT;
pub const HOST_VM_INFO64_REV1_COUNT = HOST_VM_INFO64_LATEST_COUNT;
pub const HOST_VM_INFO64_REV0_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, HOST_VM_INFO64_REV1_COUNT - @as(c_int, 14));
pub const HOST_EXTMOD_INFO64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_extmod_statistics_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_EXTMOD_INFO64_LATEST_COUNT = HOST_EXTMOD_INFO64_COUNT;
pub const HOST_VM_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_statistics_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_VM_INFO_LATEST_COUNT = HOST_VM_INFO_COUNT;
pub const HOST_VM_INFO_REV2_COUNT = HOST_VM_INFO_LATEST_COUNT;
pub const HOST_VM_INFO_REV1_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, HOST_VM_INFO_REV2_COUNT - @as(c_int, 1));
pub const HOST_VM_INFO_REV0_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, HOST_VM_INFO_REV1_COUNT - @as(c_int, 2));
pub const HOST_CPU_LOAD_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(host_cpu_load_info_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const HOST_PREFERRED_USER_ARCH_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(host_preferred_user_arch_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const _MACH_HOST_NOTIFY_H_ = "";
pub const HOST_NOTIFY_CALENDAR_CHANGE = @as(c_int, 0);
pub const HOST_NOTIFY_CALENDAR_SET = @as(c_int, 1);
pub const HOST_NOTIFY_TYPE_MAX = @as(c_int, 1);
pub const HOST_CALENDAR_CHANGED_REPLYID = @as(c_int, 950);
pub const HOST_CALENDAR_SET_REPLYID = @as(c_int, 951);
pub const _MACH_HOST_SPECIAL_PORTS_H_ = "";
pub const HOST_SECURITY_PORT = @as(c_int, 0);
pub const HOST_MIN_SPECIAL_PORT = HOST_SECURITY_PORT;
pub const HOST_PORT = @as(c_int, 1);
pub const HOST_PRIV_PORT = @as(c_int, 2);
pub const HOST_IO_MAIN_PORT = @as(c_int, 3);
pub const HOST_MAX_SPECIAL_KERNEL_PORT = @as(c_int, 7);
pub const HOST_LAST_SPECIAL_KERNEL_PORT = HOST_IO_MAIN_PORT;
pub const HOST_DYNAMIC_PAGER_PORT = @as(c_int, 1) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_AUDIT_CONTROL_PORT = @as(c_int, 2) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_USER_NOTIFICATION_PORT = @as(c_int, 3) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_AUTOMOUNTD_PORT = @as(c_int, 4) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_LOCKD_PORT = @as(c_int, 5) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_KTRACE_BACKGROUND_PORT = @as(c_int, 6) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_SEATBELT_PORT = @as(c_int, 7) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_KEXTD_PORT = @as(c_int, 8) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_LAUNCHCTL_PORT = @as(c_int, 9) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_UNFREED_PORT = @as(c_int, 10) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_AMFID_PORT = @as(c_int, 11) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_GSSD_PORT = @as(c_int, 12) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_TELEMETRY_PORT = @as(c_int, 13) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_ATM_NOTIFICATION_PORT = @as(c_int, 14) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_COALITION_PORT = @as(c_int, 15) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_SYSDIAGNOSE_PORT = @as(c_int, 16) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_XPC_EXCEPTION_PORT = @as(c_int, 17) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_CONTAINERD_PORT = @as(c_int, 18) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_NODE_PORT = @as(c_int, 19) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_RESOURCE_NOTIFY_PORT = @as(c_int, 20) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_CLOSURED_PORT = @as(c_int, 21) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_SYSPOLICYD_PORT = @as(c_int, 22) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_FILECOORDINATIOND_PORT = @as(c_int, 23) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_FAIRPLAYD_PORT = @as(c_int, 24) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_IOCOMPRESSIONSTATS_PORT = @as(c_int, 25) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_MEMORY_ERROR_PORT = @as(c_int, 26) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_MAX_SPECIAL_PORT = HOST_MEMORY_ERROR_PORT;
pub const HOST_CHUD_PORT = HOST_LAUNCHCTL_PORT;
pub const HOST_LOCAL_NODE = -@as(c_int, 1);
pub inline fn host_set_host_port(host: anytype, port: anytype) @TypeOf(KERN_INVALID_ARGUMENT) {
    _ = &host;
    _ = &port;
    return KERN_INVALID_ARGUMENT;
}
pub inline fn host_set_host_priv_port(host: anytype, port: anytype) @TypeOf(KERN_INVALID_ARGUMENT) {
    _ = &host;
    _ = &port;
    return KERN_INVALID_ARGUMENT;
}
pub inline fn host_set_io_main_port(host: anytype, port: anytype) @TypeOf(KERN_INVALID_ARGUMENT) {
    _ = &host;
    _ = &port;
    return KERN_INVALID_ARGUMENT;
}
pub inline fn host_get_chud_port(host: anytype, port: anytype) @TypeOf(host_get_launchctl_port(host, port)) {
    _ = &host;
    _ = &port;
    return host_get_launchctl_port(host, port);
}
pub inline fn host_set_chud_port(host: anytype, port: anytype) @TypeOf(host_set_launchctl_port(host, port)) {
    _ = &host;
    _ = &port;
    return host_set_launchctl_port(host, port);
}
pub const _MACH_MEMORY_OBJECT_TYPES_H_ = "";
pub const _MACH_VM_PROT_H_ = "";
pub const VM_PROT_NONE = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x00));
pub const VM_PROT_READ = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x01));
pub const VM_PROT_WRITE = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x02));
pub const VM_PROT_EXECUTE = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x04));
pub const VM_PROT_DEFAULT = VM_PROT_READ | VM_PROT_WRITE;
pub const VM_PROT_ALL = (VM_PROT_READ | VM_PROT_WRITE) | VM_PROT_EXECUTE;
pub const VM_PROT_RORW_TP = VM_PROT_EXECUTE;
pub const VM_PROT_NO_CHANGE_LEGACY = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x08));
pub const VM_PROT_NO_CHANGE = @import("std").zig.c_translation.cast(vm_prot_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const VM_PROT_COPY = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x10));
pub const VM_PROT_WANTS_COPY = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x10));
pub const VM_PROT_IS_MASK = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x40));
pub const VM_PROT_STRIP_READ = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x80));
pub const VM_PROT_EXECUTE_ONLY = VM_PROT_EXECUTE | VM_PROT_STRIP_READ;
pub const VM_PROT_ALLEXEC = VM_PROT_EXECUTE;
pub const _MACH_VM_SYNC_H_ = "";
pub const VM_SYNC_ASYNCHRONOUS = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x01));
pub const VM_SYNC_SYNCHRONOUS = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x02));
pub const VM_SYNC_INVALIDATE = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x04));
pub const VM_SYNC_KILLPAGES = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x08));
pub const VM_SYNC_DEACTIVATE = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x10));
pub const VM_SYNC_CONTIGUOUS = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x20));
pub const VM_SYNC_REUSABLEPAGES = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x40));
pub const _MACH_VM_TYPES_H_ = "";
pub const PPNUM_MAX = UINT32_MAX;
pub const VM_MAP_NULL = @import("std").zig.c_translation.cast(vm_map_t, @as(c_int, 0));
pub const VM_MAP_INSPECT_NULL = @import("std").zig.c_translation.cast(vm_map_inspect_t, @as(c_int, 0));
pub const VM_MAP_READ_NULL = @import("std").zig.c_translation.cast(vm_map_read_t, @as(c_int, 0));
pub const UPL_NULL = @import("std").zig.c_translation.cast(upl_t, @as(c_int, 0));
pub const VM_NAMED_ENTRY_NULL = @import("std").zig.c_translation.cast(vm_named_entry_t, @as(c_int, 0));
pub const VM_64_BIT_DATA_OBJECTS = "";
pub const MEMORY_OBJECT_NULL = @import("std").zig.c_translation.cast(memory_object_t, @as(c_int, 0));
pub const MEMORY_OBJECT_CONTROL_NULL = @import("std").zig.c_translation.cast(memory_object_control_t, @as(c_int, 0));
pub const MEMORY_OBJECT_NAME_NULL = @import("std").zig.c_translation.cast(memory_object_name_t, @as(c_int, 0));
pub const MEMORY_OBJECT_DEFAULT_NULL = @import("std").zig.c_translation.cast(memory_object_default_t, @as(c_int, 0));
pub const MEMORY_OBJECT_COPY_NONE = @as(c_int, 0);
pub const MEMORY_OBJECT_COPY_CALL = @as(c_int, 1);
pub const MEMORY_OBJECT_COPY_DELAY = @as(c_int, 2);
pub const MEMORY_OBJECT_COPY_TEMPORARY = @as(c_int, 3);
pub const MEMORY_OBJECT_COPY_SYMMETRIC = @as(c_int, 4);
pub const MEMORY_OBJECT_COPY_INVALID = @as(c_int, 5);
pub const MEMORY_OBJECT_RETURN_NONE = @as(c_int, 0);
pub const MEMORY_OBJECT_RETURN_DIRTY = @as(c_int, 1);
pub const MEMORY_OBJECT_RETURN_ALL = @as(c_int, 2);
pub const MEMORY_OBJECT_RETURN_ANYTHING = @as(c_int, 3);
pub const MEMORY_OBJECT_DATA_FLUSH = @as(c_int, 0x1);
pub const MEMORY_OBJECT_DATA_NO_CHANGE = @as(c_int, 0x2);
pub const MEMORY_OBJECT_DATA_PURGE = @as(c_int, 0x4);
pub const MEMORY_OBJECT_COPY_SYNC = @as(c_int, 0x8);
pub const MEMORY_OBJECT_DATA_SYNC = @as(c_int, 0x10);
pub const MEMORY_OBJECT_IO_SYNC = @as(c_int, 0x20);
pub const MEMORY_OBJECT_DATA_FLUSH_ALL = @as(c_int, 0x40);
pub const MEMORY_OBJECT_INFO_MAX = @as(c_int, 1024);
pub const MEMORY_OBJECT_PERFORMANCE_INFO = @as(c_int, 11);
pub const MEMORY_OBJECT_ATTRIBUTE_INFO = @as(c_int, 14);
pub const MEMORY_OBJECT_BEHAVIOR_INFO = @as(c_int, 15);
pub const MEMORY_OBJECT_BEHAVE_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(memory_object_behave_info_data_t), @import("std").zig.c_translation.sizeof(c_int)));
pub const MEMORY_OBJECT_PERF_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(memory_object_perf_info_data_t), @import("std").zig.c_translation.sizeof(c_int)));
pub const MEMORY_OBJECT_ATTR_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(memory_object_attr_info_data_t), @import("std").zig.c_translation.sizeof(c_int)));
pub const MEMORY_OBJECT_TERMINATE_IDLE = @as(c_int, 0x1);
pub const MEMORY_OBJECT_RESPECT_CACHE = @as(c_int, 0x2);
pub const MEMORY_OBJECT_RELEASE_NO_OP = @as(c_int, 0x4);
pub const MAP_MEM_NOOP = @as(c_int, 0);
pub const MAP_MEM_COPYBACK = @as(c_int, 1);
pub const MAP_MEM_IO = @as(c_int, 2);
pub const MAP_MEM_WTHRU = @as(c_int, 3);
pub const MAP_MEM_WCOMB = @as(c_int, 4);
pub const MAP_MEM_INNERWBACK = @as(c_int, 5);
pub const MAP_MEM_POSTED = @as(c_int, 6);
pub const MAP_MEM_RT = @as(c_int, 7);
pub const MAP_MEM_POSTED_REORDERED = @as(c_int, 8);
pub const MAP_MEM_POSTED_COMBINED_REORDERED = @as(c_int, 9);
pub inline fn GET_MAP_MEM(flags: anytype) @TypeOf((@import("std").zig.c_translation.cast(c_uint, flags) >> @as(c_int, 24)) & @as(c_int, 0xFF)) {
    _ = &flags;
    return (@import("std").zig.c_translation.cast(c_uint, flags) >> @as(c_int, 24)) & @as(c_int, 0xFF);
}
pub const MAP_MEM_LEDGER_TAGGED = @as(c_int, 0x002000);
pub const MAP_MEM_PURGABLE_KERNEL_ONLY = @as(c_int, 0x004000);
pub const MAP_MEM_GRAB_SECLUDED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x008000, .hex);
pub const MAP_MEM_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x010000, .hex);
pub const MAP_MEM_NAMED_CREATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x020000, .hex);
pub const MAP_MEM_PURGABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x040000, .hex);
pub const MAP_MEM_NAMED_REUSE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x080000, .hex);
pub const MAP_MEM_USE_DATA_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x100000, .hex);
pub const MAP_MEM_VM_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x200000, .hex);
pub const MAP_MEM_VM_SHARE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400000, .hex);
pub const MAP_MEM_4K_DATA_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800000, .hex);
pub const MAP_MEM_FLAGS_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00FFFF00, .hex);
pub const MAP_MEM_FLAGS_USER = (((((((((MAP_MEM_PURGABLE_KERNEL_ONLY | MAP_MEM_GRAB_SECLUDED) | MAP_MEM_ONLY) | MAP_MEM_NAMED_CREATE) | MAP_MEM_PURGABLE) | MAP_MEM_NAMED_REUSE) | MAP_MEM_USE_DATA_ADDR) | MAP_MEM_VM_COPY) | MAP_MEM_VM_SHARE) | MAP_MEM_LEDGER_TAGGED) | MAP_MEM_4K_DATA_ADDR;
pub const MAP_MEM_FLAGS_ALL = MAP_MEM_FLAGS_USER;
pub const _MACH_EXCEPTION_TYPES_H_ = "";
pub const _MACH_MACHINE_EXCEPTION_H_ = "";
pub const _MACH_ARM_EXCEPTION_H_ = "";
pub const EXC_TYPES_COUNT = @as(c_int, 14);
pub const EXC_MASK_MACHINE = @as(c_int, 0);
pub const EXCEPTION_CODE_MAX = @as(c_int, 2);
pub const EXC_ARM_UNDEFINED = @as(c_int, 1);
pub const EXC_ARM_FP_UNDEFINED = @as(c_int, 0);
pub const EXC_ARM_FP_IO = @as(c_int, 1);
pub const EXC_ARM_FP_DZ = @as(c_int, 2);
pub const EXC_ARM_FP_OF = @as(c_int, 3);
pub const EXC_ARM_FP_UF = @as(c_int, 4);
pub const EXC_ARM_FP_IX = @as(c_int, 5);
pub const EXC_ARM_FP_ID = @as(c_int, 6);
pub const EXC_ARM_DA_ALIGN = @as(c_int, 0x101);
pub const EXC_ARM_DA_DEBUG = @as(c_int, 0x102);
pub const EXC_ARM_SP_ALIGN = @as(c_int, 0x103);
pub const EXC_ARM_SWP = @as(c_int, 0x104);
pub const EXC_ARM_PAC_FAIL = @as(c_int, 0x105);
pub const EXC_ARM_BREAKPOINT = @as(c_int, 1);
pub const EXC_BAD_ACCESS = @as(c_int, 1);
pub const EXC_BAD_INSTRUCTION = @as(c_int, 2);
pub const EXC_ARITHMETIC = @as(c_int, 3);
pub const EXC_EMULATION = @as(c_int, 4);
pub const EXC_SOFTWARE = @as(c_int, 5);
pub const EXC_BREAKPOINT = @as(c_int, 6);
pub const EXC_SYSCALL = @as(c_int, 7);
pub const EXC_MACH_SYSCALL = @as(c_int, 8);
pub const EXC_RPC_ALERT = @as(c_int, 9);
pub const EXC_CRASH = @as(c_int, 10);
pub const EXC_RESOURCE = @as(c_int, 11);
pub const EXC_GUARD = @as(c_int, 12);
pub const EXC_CORPSE_NOTIFY = @as(c_int, 13);
pub const EXCEPTION_DEFAULT = @as(c_int, 1);
pub const EXCEPTION_STATE = @as(c_int, 2);
pub const EXCEPTION_STATE_IDENTITY = @as(c_int, 3);
pub const EXCEPTION_IDENTITY_PROTECTED = @as(c_int, 4);
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const MACH_EXCEPTION_ERRORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const MACH_EXCEPTION_CODES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const MACH_EXCEPTION_MASK = (MACH_EXCEPTION_CODES | MACH_EXCEPTION_ERRORS) | MACH_EXCEPTION_BACKTRACE_PREFERRED;
pub const EXC_MASK_BAD_ACCESS = @as(c_int, 1) << EXC_BAD_ACCESS;
pub const EXC_MASK_BAD_INSTRUCTION = @as(c_int, 1) << EXC_BAD_INSTRUCTION;
pub const EXC_MASK_ARITHMETIC = @as(c_int, 1) << EXC_ARITHMETIC;
pub const EXC_MASK_EMULATION = @as(c_int, 1) << EXC_EMULATION;
pub const EXC_MASK_SOFTWARE = @as(c_int, 1) << EXC_SOFTWARE;
pub const EXC_MASK_BREAKPOINT = @as(c_int, 1) << EXC_BREAKPOINT;
pub const EXC_MASK_SYSCALL = @as(c_int, 1) << EXC_SYSCALL;
pub const EXC_MASK_MACH_SYSCALL = @as(c_int, 1) << EXC_MACH_SYSCALL;
pub const EXC_MASK_RPC_ALERT = @as(c_int, 1) << EXC_RPC_ALERT;
pub const EXC_MASK_CRASH = @as(c_int, 1) << EXC_CRASH;
pub const EXC_MASK_RESOURCE = @as(c_int, 1) << EXC_RESOURCE;
pub const EXC_MASK_GUARD = @as(c_int, 1) << EXC_GUARD;
pub const EXC_MASK_CORPSE_NOTIFY = @as(c_int, 1) << EXC_CORPSE_NOTIFY;
pub const EXC_MASK_ALL = ((((((((((EXC_MASK_BAD_ACCESS | EXC_MASK_BAD_INSTRUCTION) | EXC_MASK_ARITHMETIC) | EXC_MASK_EMULATION) | EXC_MASK_SOFTWARE) | EXC_MASK_BREAKPOINT) | EXC_MASK_SYSCALL) | EXC_MASK_MACH_SYSCALL) | EXC_MASK_RPC_ALERT) | EXC_MASK_RESOURCE) | EXC_MASK_GUARD) | EXC_MASK_MACHINE;
pub const FIRST_EXCEPTION = @as(c_int, 1);
pub const EXC_SOFT_SIGNAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10003, .hex);
pub const EXC_MACF_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000, .hex);
pub const EXC_MACF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2FFFF, .hex);
pub const _MACH_THREAD_STATUS_H_ = "";
pub const _MACH_MACHINE_THREAD_STATUS_H_ = "";
pub const _ARM_THREAD_STATUS_H_ = "";
pub const _MACH_MACHINE_THREAD_STATE_H_ = "";
pub const _MACH_ARM_THREAD_STATE_H_ = "";
pub const ARM_THREAD_STATE_MAX = @as(c_int, 1296);
pub const THREAD_STATE_MAX = @as(c_int, 1296);
pub const ARM_THREAD_STATE = @as(c_int, 1);
pub const ARM_UNIFIED_THREAD_STATE = ARM_THREAD_STATE;
pub const ARM_VFP_STATE = @as(c_int, 2);
pub const ARM_EXCEPTION_STATE = @as(c_int, 3);
pub const ARM_DEBUG_STATE = @as(c_int, 4);
pub const THREAD_STATE_NONE = @as(c_int, 5);
pub const ARM_THREAD_STATE64 = @as(c_int, 6);
pub const ARM_EXCEPTION_STATE64 = @as(c_int, 7);
pub const ARM_THREAD_STATE32 = @as(c_int, 9);
pub const ARM_DEBUG_STATE32 = @as(c_int, 14);
pub const ARM_DEBUG_STATE64 = @as(c_int, 15);
pub const ARM_NEON_STATE = @as(c_int, 16);
pub const ARM_NEON_STATE64 = @as(c_int, 17);
pub const ARM_CPMU_STATE64 = @as(c_int, 18);
pub const ARM_PAGEIN_STATE = @as(c_int, 27);
pub inline fn ARM_STATE_FLAVOR_IS_OTHER_VALID(_flavor_: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &_flavor_;
    return @as(c_int, 0);
}
pub inline fn FLAVOR_MODIFIES_CORE_CPU_REGISTERS(x: anytype) @TypeOf(((x == ARM_THREAD_STATE) or (x == ARM_THREAD_STATE32)) or (x == ARM_THREAD_STATE64)) {
    _ = &x;
    return ((x == ARM_THREAD_STATE) or (x == ARM_THREAD_STATE32)) or (x == ARM_THREAD_STATE64);
}
pub inline fn VALID_THREAD_STATE_FLAVOR(x: anytype) @TypeOf((((((((((((((x == ARM_THREAD_STATE) or (x == ARM_VFP_STATE)) or (x == ARM_EXCEPTION_STATE)) or (x == ARM_DEBUG_STATE)) or (x == THREAD_STATE_NONE)) or (x == ARM_THREAD_STATE32)) or (x == ARM_THREAD_STATE64)) or (x == ARM_EXCEPTION_STATE64)) or (x == ARM_NEON_STATE)) or (x == ARM_NEON_STATE64)) or (x == ARM_DEBUG_STATE32)) or (x == ARM_DEBUG_STATE64)) or (x == ARM_PAGEIN_STATE)) or (ARM_STATE_FLAVOR_IS_OTHER_VALID(x) != 0)) {
    _ = &x;
    return (((((((((((((x == ARM_THREAD_STATE) or (x == ARM_VFP_STATE)) or (x == ARM_EXCEPTION_STATE)) or (x == ARM_DEBUG_STATE)) or (x == THREAD_STATE_NONE)) or (x == ARM_THREAD_STATE32)) or (x == ARM_THREAD_STATE64)) or (x == ARM_EXCEPTION_STATE64)) or (x == ARM_NEON_STATE)) or (x == ARM_NEON_STATE64)) or (x == ARM_DEBUG_STATE32)) or (x == ARM_DEBUG_STATE64)) or (x == ARM_PAGEIN_STATE)) or (ARM_STATE_FLAVOR_IS_OTHER_VALID(x) != 0);
}
pub inline fn arm_thread_state64_get_pc(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_pc(ts)) {
    _ = &ts;
    return __darwin_arm_thread_state64_get_pc(ts);
}
pub inline fn arm_thread_state64_get_pc_fptr(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_pc_fptr(ts)) {
    _ = &ts;
    return __darwin_arm_thread_state64_get_pc_fptr(ts);
}
pub inline fn arm_thread_state64_set_pc_fptr(ts: anytype, fptr: anytype) @TypeOf(__darwin_arm_thread_state64_set_pc_fptr(ts, fptr)) {
    _ = &ts;
    _ = &fptr;
    return __darwin_arm_thread_state64_set_pc_fptr(ts, fptr);
}
pub inline fn arm_thread_state64_get_lr(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_lr(ts)) {
    _ = &ts;
    return __darwin_arm_thread_state64_get_lr(ts);
}
pub inline fn arm_thread_state64_get_lr_fptr(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_lr_fptr(ts)) {
    _ = &ts;
    return __darwin_arm_thread_state64_get_lr_fptr(ts);
}
pub inline fn arm_thread_state64_set_lr_fptr(ts: anytype, fptr: anytype) @TypeOf(__darwin_arm_thread_state64_set_lr_fptr(ts, fptr)) {
    _ = &ts;
    _ = &fptr;
    return __darwin_arm_thread_state64_set_lr_fptr(ts, fptr);
}
pub inline fn arm_thread_state64_get_sp(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_sp(ts)) {
    _ = &ts;
    return __darwin_arm_thread_state64_get_sp(ts);
}
pub inline fn arm_thread_state64_set_sp(ts: anytype, ptr: anytype) @TypeOf(__darwin_arm_thread_state64_set_sp(ts, ptr)) {
    _ = &ts;
    _ = &ptr;
    return __darwin_arm_thread_state64_set_sp(ts, ptr);
}
pub inline fn arm_thread_state64_get_fp(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_fp(ts)) {
    _ = &ts;
    return __darwin_arm_thread_state64_get_fp(ts);
}
pub inline fn arm_thread_state64_set_fp(ts: anytype, ptr: anytype) @TypeOf(__darwin_arm_thread_state64_set_fp(ts, ptr)) {
    _ = &ts;
    _ = &ptr;
    return __darwin_arm_thread_state64_set_fp(ts, ptr);
}
pub inline fn arm_thread_state64_ptrauth_strip(ts: anytype) @TypeOf(__darwin_arm_thread_state64_ptrauth_strip(ts)) {
    _ = &ts;
    return __darwin_arm_thread_state64_ptrauth_strip(ts);
}
pub const ARM_THREAD_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_thread_state_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_THREAD_STATE32_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_thread_state32_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_THREAD_STATE64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_thread_state64_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_UNIFIED_THREAD_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_unified_thread_state_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_VFP_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_vfp_state_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_EXCEPTION_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_exception_state_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_EXCEPTION_STATE64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_exception_state64_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_DEBUG_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_debug_state_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_DEBUG_STATE32_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_debug_state32_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_PAGEIN_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_pagein_state_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_DEBUG_STATE64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_debug_state64_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_NEON_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_neon_state_t), @import("std").zig.c_translation.sizeof(u32)));
pub const ARM_NEON_STATE64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(arm_neon_state64_t), @import("std").zig.c_translation.sizeof(u32)));
pub const MACHINE_THREAD_STATE = ARM_THREAD_STATE;
pub const MACHINE_THREAD_STATE_COUNT = ARM_UNIFIED_THREAD_STATE_COUNT;
pub const THREAD_MACHINE_STATE_MAX = THREAD_STATE_MAX;
pub const THREAD_STATE_FLAVOR_LIST = @as(c_int, 0);
pub const THREAD_STATE_FLAVOR_LIST_NEW = @as(c_int, 128);
pub const THREAD_STATE_FLAVOR_LIST_10_9 = @as(c_int, 129);
pub const THREAD_STATE_FLAVOR_LIST_10_13 = @as(c_int, 130);
pub const THREAD_STATE_FLAVOR_LIST_10_15 = @as(c_int, 131);
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF = @as(c_int, 1);
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF = @as(c_int, 2);
pub const _MACH_DEBUG_IPC_INFO_H_ = "";
pub const _MACH_VOUCHER_TYPES_H_ = "";
pub const _MACH_STD_TYPES_H_ = "";
pub const MACH_VOUCHER_NULL = @import("std").zig.c_translation.cast(mach_voucher_t, @as(c_int, 0));
pub const MACH_VOUCHER_NAME_NULL = @import("std").zig.c_translation.cast(mach_voucher_name_t, @as(c_int, 0));
pub const MACH_VOUCHER_NAME_ARRAY_NULL = @import("std").zig.c_translation.cast(mach_voucher_name_array_t, @as(c_int, 0));
pub const IPC_VOUCHER_NULL = @import("std").zig.c_translation.cast(ipc_voucher_t, @as(c_int, 0));
pub const MACH_VOUCHER_SELECTOR_CURRENT = @import("std").zig.c_translation.cast(mach_voucher_selector_t, @as(c_int, 0));
pub const MACH_VOUCHER_SELECTOR_EFFECTIVE = @import("std").zig.c_translation.cast(mach_voucher_selector_t, @as(c_int, 1));
pub const MACH_VOUCHER_ATTR_KEY_ALL = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, ~@as(c_int, 0));
pub const MACH_VOUCHER_ATTR_KEY_NONE = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_KEY_ATM = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 1));
pub const MACH_VOUCHER_ATTR_KEY_IMPORTANCE = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 2));
pub const MACH_VOUCHER_ATTR_KEY_BANK = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 3));
pub const MACH_VOUCHER_ATTR_KEY_PTHPRIORITY = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 4));
pub const MACH_VOUCHER_ATTR_KEY_USER_DATA = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 7));
pub const MACH_VOUCHER_ATTR_KEY_BITS = MACH_VOUCHER_ATTR_KEY_USER_DATA;
pub const MACH_VOUCHER_ATTR_KEY_TEST = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 8));
pub const MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN = MACH_VOUCHER_ATTR_KEY_TEST;
pub const MACH_VOUCHER_ATTR_NOOP = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_COPY = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 1));
pub const MACH_VOUCHER_ATTR_REMOVE = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 2));
pub const MACH_VOUCHER_ATTR_SET_VALUE_HANDLE = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 3));
pub const MACH_VOUCHER_ATTR_AUTO_REDEEM = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 4));
pub const MACH_VOUCHER_ATTR_SEND_PREPROCESS = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 5));
pub const MACH_VOUCHER_ATTR_REDEEM = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 10));
pub const MACH_VOUCHER_ATTR_IMPORTANCE_SELF = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 200));
pub const MACH_VOUCHER_ATTR_USER_DATA_STORE = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 211));
pub const MACH_VOUCHER_ATTR_BITS_STORE = MACH_VOUCHER_ATTR_USER_DATA_STORE;
pub const MACH_VOUCHER_ATTR_TEST_STORE = MACH_VOUCHER_ATTR_USER_DATA_STORE;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE = @as(c_int, 5120);
pub const MACH_VOUCHER_TRAP_STACK_LIMIT = @as(c_int, 256);
pub const MACH_VOUCHER_ATTR_MANAGER_NULL = @import("std").zig.c_translation.cast(mach_voucher_attr_manager_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_CONTROL_NULL = @import("std").zig.c_translation.cast(mach_voucher_attr_control_t, @as(c_int, 0));
pub const IPC_VOUCHER_ATTR_MANAGER_NULL = @import("std").zig.c_translation.cast(ipc_voucher_attr_manager_t, @as(c_int, 0));
pub const IPC_VOUCHER_ATTR_CONTROL_NULL = @import("std").zig.c_translation.cast(ipc_voucher_attr_control_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_VALUE_MAX_NESTED = @import("std").zig.c_translation.cast(mach_voucher_attr_value_handle_array_size_t, @as(c_int, 4));
pub const MACH_VOUCHER_ATTR_VALUE_FLAGS_NONE = @import("std").zig.c_translation.cast(mach_voucher_attr_value_flags_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_VALUE_FLAGS_PERSIST = @import("std").zig.c_translation.cast(mach_voucher_attr_value_flags_t, @as(c_int, 1));
pub const MACH_VOUCHER_ATTR_CONTROL_FLAGS_NONE = @import("std").zig.c_translation.cast(mach_voucher_attr_control_flags_t, @as(c_int, 0));
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL = @as(c_int, 1);
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL = @as(c_int, 2);
pub const MACH_ACTIVITY_ID_COUNT_MAX = @as(c_int, 16);
pub const _MACH_PROCESSOR_INFO_H_ = "";
pub const _MACH_MACHINE_PROCESSOR_INFO_H_ = "";
pub const _MACH_ARM_PROCESSOR_INFO_H_ = "";
pub const PROCESSOR_CPU_STAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000003, .hex);
pub const PROCESSOR_CPU_STAT64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000004, .hex);
pub const PROCESSOR_CPU_STAT_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(processor_cpu_stat_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const PROCESSOR_CPU_STAT64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(processor_cpu_stat64_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const PROCESSOR_INFO_MAX = @as(c_int, 1024);
pub const PROCESSOR_SET_INFO_MAX = @as(c_int, 1024);
pub const PROCESSOR_BASIC_INFO = @as(c_int, 1);
pub const PROCESSOR_CPU_LOAD_INFO = @as(c_int, 2);
pub const PROCESSOR_PM_REGS_INFO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000001, .hex);
pub const PROCESSOR_TEMPERATURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000002, .hex);
pub const PROCESSOR_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(processor_basic_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const PROCESSOR_CPU_LOAD_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(processor_cpu_load_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const LOAD_SCALE = @as(c_int, 1000);
pub const PROCESSOR_SET_BASIC_INFO = @as(c_int, 5);
pub const PROCESSOR_SET_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(processor_set_basic_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const PROCESSOR_SET_LOAD_INFO = @as(c_int, 4);
pub const PROCESSOR_SET_LOAD_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(processor_set_load_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const _MACH_TASK_INFO_H_ = "";
pub const _MACH_POLICY_H_ = "";
pub const POLICY_NULL = @as(c_int, 0);
pub const POLICY_TIMESHARE = @as(c_int, 1);
pub const POLICY_RR = @as(c_int, 2);
pub const POLICY_FIFO = @as(c_int, 4);
pub const __NEW_SCHEDULING_FRAMEWORK__ = "";
pub const POLICYCLASS_FIXEDPRI = POLICY_RR | POLICY_FIFO;
pub inline fn invalid_policy(policy: anytype) @TypeOf(((policy != POLICY_TIMESHARE) and (policy != POLICY_RR)) and (policy != POLICY_FIFO)) {
    _ = &policy;
    return ((policy != POLICY_TIMESHARE) and (policy != POLICY_RR)) and (policy != POLICY_FIFO);
}
pub const POLICY_TIMESHARE_BASE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_policy_timeshare_base), @import("std").zig.c_translation.sizeof(integer_t)));
pub const POLICY_TIMESHARE_LIMIT_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_policy_timeshare_limit), @import("std").zig.c_translation.sizeof(integer_t)));
pub const POLICY_TIMESHARE_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_policy_timeshare_info), @import("std").zig.c_translation.sizeof(integer_t)));
pub const POLICY_RR_BASE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_policy_rr_base), @import("std").zig.c_translation.sizeof(integer_t)));
pub const POLICY_RR_LIMIT_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_policy_rr_limit), @import("std").zig.c_translation.sizeof(integer_t)));
pub const POLICY_RR_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_policy_rr_info), @import("std").zig.c_translation.sizeof(integer_t)));
pub const POLICY_FIFO_BASE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_policy_fifo_base), @import("std").zig.c_translation.sizeof(integer_t)));
pub const POLICY_FIFO_LIMIT_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_policy_fifo_limit), @import("std").zig.c_translation.sizeof(integer_t)));
pub const POLICY_FIFO_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_policy_fifo_info), @import("std").zig.c_translation.sizeof(integer_t)));
pub const TASK_INFO_MAX = @as(c_int, 1024);
pub const TASK_BASIC_INFO_32 = @as(c_int, 4);
pub const TASK_BASIC2_INFO_32 = @as(c_int, 6);
pub const TASK_BASIC_INFO_32_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_basic_info_32_data_t), @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_BASIC_INFO_64 = TASK_BASIC_INFO_64_2;
pub const TASK_BASIC_INFO_64_COUNT = TASK_BASIC_INFO_64_2_COUNT;
pub const TASK_BASIC_INFO_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_basic_info_data_t), @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_BASIC_INFO = TASK_BASIC_INFO_64;
pub const TASK_EVENTS_INFO = @as(c_int, 2);
pub const TASK_EVENTS_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_events_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_THREAD_TIMES_INFO = @as(c_int, 3);
pub const TASK_THREAD_TIMES_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_thread_times_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_ABSOLUTETIME_INFO = @as(c_int, 1);
pub const TASK_ABSOLUTETIME_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_absolutetime_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_KERNELMEMORY_INFO = @as(c_int, 7);
pub const TASK_KERNELMEMORY_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_kernelmemory_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_SECURITY_TOKEN = @as(c_int, 13);
pub const TASK_SECURITY_TOKEN_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(security_token_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_AUDIT_TOKEN = @as(c_int, 15);
pub const TASK_AUDIT_TOKEN_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(audit_token_t), @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_AFFINITY_TAG_INFO = @as(c_int, 16);
pub const TASK_AFFINITY_TAG_INFO_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_affinity_tag_info_data_t), @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_DYLD_INFO = @as(c_int, 17);
pub const TASK_DYLD_INFO_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_dyld_info_data_t), @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_DYLD_ALL_IMAGE_INFO_32 = @as(c_int, 0);
pub const TASK_DYLD_ALL_IMAGE_INFO_64 = @as(c_int, 1);
pub const TASK_BASIC_INFO_64_2 = @as(c_int, 18);
pub const TASK_BASIC_INFO_64_2_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_basic_info_64_2_data_t), @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_EXTMOD_INFO = @as(c_int, 19);
pub const TASK_EXTMOD_INFO_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_extmod_info_data_t), @import("std").zig.c_translation.sizeof(natural_t));
pub const MACH_TASK_BASIC_INFO = @as(c_int, 20);
pub const MACH_TASK_BASIC_INFO_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(mach_task_basic_info_data_t), @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_POWER_INFO = @as(c_int, 21);
pub const TASK_POWER_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_power_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_VM_INFO = @as(c_int, 22);
pub const TASK_VM_INFO_PURGEABLE = @as(c_int, 23);
pub const TASK_VM_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_vm_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_VM_INFO_REV6_COUNT = TASK_VM_INFO_COUNT;
pub const TASK_VM_INFO_REV5_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV6_COUNT - @as(c_int, 2));
pub const TASK_VM_INFO_REV4_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV5_COUNT - @as(c_int, 1));
pub const TASK_VM_INFO_REV3_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV4_COUNT - @as(c_int, 2));
pub const TASK_VM_INFO_REV2_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV3_COUNT - @as(c_int, 42));
pub const TASK_VM_INFO_REV1_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV2_COUNT - @as(c_int, 4));
pub const TASK_VM_INFO_REV0_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV1_COUNT - @as(c_int, 2));
pub const TASK_TRACE_MEMORY_INFO = @as(c_int, 24);
pub const TASK_TRACE_MEMORY_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_trace_memory_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_WAIT_STATE_INFO = @as(c_int, 25);
pub const TASK_WAIT_STATE_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_wait_state_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_POWER_INFO_V2 = @as(c_int, 26);
pub const TASK_POWER_INFO_V2_COUNT_OLD = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_power_info_v2_data_t) - (@import("std").zig.c_translation.sizeof(u64) * @as(c_int, 2))), @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_POWER_INFO_V2_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_power_info_v2_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT = @as(c_int, 27);
pub const TASK_FLAGS_INFO = @as(c_int, 28);
pub const TASK_FLAGS_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_flags_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TF_LP64 = @as(c_int, 0x00000001);
pub const TF_64B_DATA = @as(c_int, 0x00000002);
pub const TASK_DEBUG_INFO_INTERNAL = @as(c_int, 29);
pub const TASK_EXC_GUARD_NONE = @as(c_int, 0x00);
pub const TASK_EXC_GUARD_VM_DELIVER = @as(c_int, 0x01);
pub const TASK_EXC_GUARD_VM_ONCE = @as(c_int, 0x02);
pub const TASK_EXC_GUARD_VM_CORPSE = @as(c_int, 0x04);
pub const TASK_EXC_GUARD_VM_FATAL = @as(c_int, 0x08);
pub const TASK_EXC_GUARD_VM_ALL = @as(c_int, 0x0f);
pub const TASK_EXC_GUARD_MP_DELIVER = @as(c_int, 0x10);
pub const TASK_EXC_GUARD_MP_ONCE = @as(c_int, 0x20);
pub const TASK_EXC_GUARD_MP_CORPSE = @as(c_int, 0x40);
pub const TASK_EXC_GUARD_MP_FATAL = @as(c_int, 0x80);
pub const TASK_EXC_GUARD_MP_ALL = @as(c_int, 0xf0);
pub const TASK_EXC_GUARD_ALL = @as(c_int, 0xff);
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG = @as(c_int, 0x01);
pub const TASK_SCHED_TIMESHARE_INFO = @as(c_int, 10);
pub const TASK_SCHED_RR_INFO = @as(c_int, 11);
pub const TASK_SCHED_FIFO_INFO = @as(c_int, 12);
pub const TASK_SCHED_INFO = @as(c_int, 14);
pub const MACH_TASK_INSPECT_H = "";
pub const TASK_INSPECT_BASIC_COUNTS_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_task_inspect_basic_counts), @import("std").zig.c_translation.sizeof(natural_t));
pub const _MACH_TASK_POLICY_H_ = "";
pub const TASK_CATEGORY_POLICY = @as(c_int, 1);
pub const TASK_SUPPRESSION_POLICY = @as(c_int, 3);
pub const TASK_POLICY_STATE = @as(c_int, 4);
pub const TASK_BASE_QOS_POLICY = @as(c_int, 8);
pub const TASK_OVERRIDE_QOS_POLICY = @as(c_int, 9);
pub const TASK_BASE_LATENCY_QOS_POLICY = @as(c_int, 10);
pub const TASK_BASE_THROUGHPUT_QOS_POLICY = @as(c_int, 11);
pub const TASK_CATEGORY_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(task_category_policy_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const LATENCY_QOS_LAUNCH_DEFAULT_TIER = LATENCY_QOS_TIER_3;
pub const THROUGHPUT_QOS_LAUNCH_DEFAULT_TIER = THROUGHPUT_QOS_TIER_3;
pub const TASK_QOS_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(struct_task_qos_policy), @import("std").zig.c_translation.sizeof(integer_t)));
pub const PROC_FLAG_DARWINBG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hex);
pub const PROC_FLAG_EXT_DARWINBG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000, .hex);
pub const PROC_FLAG_IOS_APPLEDAEMON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000, .hex);
pub const PROC_FLAG_IOS_IMPPROMOTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000, .hex);
pub const PROC_FLAG_ADAPTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x100000, .hex);
pub const PROC_FLAG_ADAPTIVE_IMPORTANT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x200000, .hex);
pub const PROC_FLAG_IMPORTANCE_DONOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400000, .hex);
pub const PROC_FLAG_SUPPRESSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800000, .hex);
pub const PROC_FLAG_APPLICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000, .hex);
pub const PROC_FLAG_IOS_APPLICATION = PROC_FLAG_APPLICATION;
pub const _MACH_TASK_SPECIAL_PORTS_H_ = "";
pub const TASK_KERNEL_PORT = @as(c_int, 1);
pub const TASK_HOST_PORT = @as(c_int, 2);
pub const TASK_NAME_PORT = @as(c_int, 3);
pub const TASK_BOOTSTRAP_PORT = @as(c_int, 4);
pub const TASK_INSPECT_PORT = @as(c_int, 5);
pub const TASK_READ_PORT = @as(c_int, 6);
pub const TASK_ACCESS_PORT = @as(c_int, 9);
pub const TASK_DEBUG_CONTROL_PORT = @as(c_int, 10);
pub const TASK_RESOURCE_NOTIFY_PORT = @as(c_int, 11);
pub const TASK_MAX_SPECIAL_PORT = TASK_RESOURCE_NOTIFY_PORT;
pub const _MACH_THREAD_INFO_H_ = "";
pub const THREAD_INFO_MAX = @as(c_int, 32);
pub const THREAD_BASIC_INFO = @as(c_int, 3);
pub const THREAD_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_basic_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const THREAD_IDENTIFIER_INFO = @as(c_int, 4);
pub const THREAD_IDENTIFIER_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_identifier_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const TH_USAGE_SCALE = @as(c_int, 1000);
pub const TH_STATE_RUNNING = @as(c_int, 1);
pub const TH_STATE_STOPPED = @as(c_int, 2);
pub const TH_STATE_WAITING = @as(c_int, 3);
pub const TH_STATE_UNINTERRUPTIBLE = @as(c_int, 4);
pub const TH_STATE_HALTED = @as(c_int, 5);
pub const TH_FLAGS_SWAPPED = @as(c_int, 0x1);
pub const TH_FLAGS_IDLE = @as(c_int, 0x2);
pub const TH_FLAGS_GLOBAL_FORCED_IDLE = @as(c_int, 0x4);
pub const THREAD_EXTENDED_INFO = @as(c_int, 5);
pub const MAXTHREADNAMESIZE = @as(c_int, 64);
pub const THREAD_EXTENDED_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_extended_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const THREAD_DEBUG_INFO_INTERNAL = @as(c_int, 6);
pub const IO_NUM_PRIORITIES = @as(c_int, 4);
pub const THREAD_SCHED_TIMESHARE_INFO = @as(c_int, 10);
pub const THREAD_SCHED_RR_INFO = @as(c_int, 11);
pub const THREAD_SCHED_FIFO_INFO = @as(c_int, 12);
pub const _MACH_THREAD_POLICY_H_ = "";
pub const THREAD_STANDARD_POLICY = @as(c_int, 1);
pub const THREAD_STANDARD_POLICY_COUNT = @as(c_int, 0);
pub const THREAD_EXTENDED_POLICY = @as(c_int, 1);
pub const THREAD_EXTENDED_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_extended_policy_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const THREAD_TIME_CONSTRAINT_POLICY = @as(c_int, 2);
pub const THREAD_TIME_CONSTRAINT_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_time_constraint_policy_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const THREAD_PRECEDENCE_POLICY = @as(c_int, 3);
pub const THREAD_PRECEDENCE_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_precedence_policy_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const THREAD_AFFINITY_POLICY = @as(c_int, 4);
pub const THREAD_AFFINITY_TAG_NULL = @as(c_int, 0);
pub const THREAD_AFFINITY_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_affinity_policy_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const THREAD_BACKGROUND_POLICY = @as(c_int, 5);
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG = @as(c_int, 0x1000);
pub const THREAD_BACKGROUND_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_background_policy_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const THREAD_LATENCY_QOS_POLICY = @as(c_int, 7);
pub const THREAD_LATENCY_QOS_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_latency_qos_policy_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const THREAD_THROUGHPUT_QOS_POLICY = @as(c_int, 8);
pub const THREAD_THROUGHPUT_QOS_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(thread_throughput_qos_policy_data_t), @import("std").zig.c_translation.sizeof(integer_t)));
pub const _MACH_THREAD_SPECIAL_PORTS_H_ = "";
pub const THREAD_KERNEL_PORT = @as(c_int, 1);
pub const THREAD_INSPECT_PORT = @as(c_int, 2);
pub const THREAD_READ_PORT = @as(c_int, 3);
pub const THREAD_MAX_SPECIAL_PORT = THREAD_READ_PORT;
pub const _MACH_VM_ATTRIBUTES_H_ = "";
pub const MATTR_CACHE = @as(c_int, 1);
pub const MATTR_MIGRATE = @as(c_int, 2);
pub const MATTR_REPLICATE = @as(c_int, 4);
pub const MATTR_VAL_OFF = @as(c_int, 0);
pub const MATTR_VAL_ON = @as(c_int, 1);
pub const MATTR_VAL_GET = @as(c_int, 2);
pub const MATTR_VAL_CACHE_FLUSH = @as(c_int, 6);
pub const MATTR_VAL_DCACHE_FLUSH = @as(c_int, 7);
pub const MATTR_VAL_ICACHE_FLUSH = @as(c_int, 8);
pub const MATTR_VAL_CACHE_SYNC = @as(c_int, 9);
pub const MATTR_VAL_GET_INFO = @as(c_int, 10);
pub const _MACH_VM_INHERIT_H_ = "";
pub const VM_INHERIT_SHARE = @import("std").zig.c_translation.cast(vm_inherit_t, @as(c_int, 0));
pub const VM_INHERIT_COPY = @import("std").zig.c_translation.cast(vm_inherit_t, @as(c_int, 1));
pub const VM_INHERIT_NONE = @import("std").zig.c_translation.cast(vm_inherit_t, @as(c_int, 2));
pub const VM_INHERIT_DONATE_COPY = @import("std").zig.c_translation.cast(vm_inherit_t, @as(c_int, 3));
pub const VM_INHERIT_DEFAULT = VM_INHERIT_COPY;
pub const VM_INHERIT_LAST_VALID = VM_INHERIT_NONE;
pub const _MACH_VM_PURGABLE_H_ = "";
pub const VM_PURGABLE_SET_STATE = @import("std").zig.c_translation.cast(vm_purgable_t, @as(c_int, 0));
pub const VM_PURGABLE_GET_STATE = @import("std").zig.c_translation.cast(vm_purgable_t, @as(c_int, 1));
pub const VM_PURGABLE_PURGE_ALL = @import("std").zig.c_translation.cast(vm_purgable_t, @as(c_int, 2));
pub const VM_PURGABLE_SET_STATE_FROM_KERNEL = @import("std").zig.c_translation.cast(vm_purgable_t, @as(c_int, 3));
pub const VM_PURGABLE_NO_AGING_SHIFT = @as(c_int, 16);
pub const VM_PURGABLE_NO_AGING_MASK = @as(c_int, 0x1) << VM_PURGABLE_NO_AGING_SHIFT;
pub const VM_PURGABLE_NO_AGING = @as(c_int, 0x1) << VM_PURGABLE_NO_AGING_SHIFT;
pub const VM_PURGABLE_DEBUG_SHIFT = @as(c_int, 12);
pub const VM_PURGABLE_DEBUG_MASK = @as(c_int, 0x3) << VM_PURGABLE_DEBUG_SHIFT;
pub const VM_PURGABLE_DEBUG_EMPTY = @as(c_int, 0x1) << VM_PURGABLE_DEBUG_SHIFT;
pub const VM_PURGABLE_DEBUG_FAULT = @as(c_int, 0x2) << VM_PURGABLE_DEBUG_SHIFT;
pub const VM_VOLATILE_GROUP_SHIFT = @as(c_int, 8);
pub const VM_VOLATILE_GROUP_MASK = @as(c_int, 7) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_DEFAULT = VM_VOLATILE_GROUP_0;
pub const VM_VOLATILE_GROUP_0 = @as(c_int, 0) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_1 = @as(c_int, 1) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_2 = @as(c_int, 2) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_3 = @as(c_int, 3) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_4 = @as(c_int, 4) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_5 = @as(c_int, 5) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_6 = @as(c_int, 6) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_7 = @as(c_int, 7) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_PURGABLE_BEHAVIOR_SHIFT = @as(c_int, 6);
pub const VM_PURGABLE_BEHAVIOR_MASK = @as(c_int, 1) << VM_PURGABLE_BEHAVIOR_SHIFT;
pub const VM_PURGABLE_BEHAVIOR_FIFO = @as(c_int, 0) << VM_PURGABLE_BEHAVIOR_SHIFT;
pub const VM_PURGABLE_BEHAVIOR_LIFO = @as(c_int, 1) << VM_PURGABLE_BEHAVIOR_SHIFT;
pub const VM_PURGABLE_ORDERING_SHIFT = @as(c_int, 5);
pub const VM_PURGABLE_ORDERING_MASK = @as(c_int, 1) << VM_PURGABLE_ORDERING_SHIFT;
pub const VM_PURGABLE_ORDERING_OBSOLETE = @as(c_int, 1) << VM_PURGABLE_ORDERING_SHIFT;
pub const VM_PURGABLE_ORDERING_NORMAL = @as(c_int, 0) << VM_PURGABLE_ORDERING_SHIFT;
pub const VM_VOLATILE_ORDER_SHIFT = @as(c_int, 4);
pub const VM_VOLATILE_ORDER_MASK = @as(c_int, 1) << VM_VOLATILE_ORDER_SHIFT;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP = @as(c_int, 1) << VM_VOLATILE_ORDER_SHIFT;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP = @as(c_int, 0) << VM_VOLATILE_ORDER_SHIFT;
pub const VM_PURGABLE_STATE_MIN = @as(c_int, 0);
pub const VM_PURGABLE_STATE_MAX = @as(c_int, 3);
pub const VM_PURGABLE_STATE_MASK = @as(c_int, 3);
pub const VM_PURGABLE_NONVOLATILE = @as(c_int, 0);
pub const VM_PURGABLE_VOLATILE = @as(c_int, 1);
pub const VM_PURGABLE_EMPTY = @as(c_int, 2);
pub const VM_PURGABLE_DENY = @as(c_int, 3);
pub const VM_PURGABLE_ALL_MASKS = (((((VM_PURGABLE_STATE_MASK | VM_VOLATILE_ORDER_MASK) | VM_PURGABLE_ORDERING_MASK) | VM_PURGABLE_BEHAVIOR_MASK) | VM_VOLATILE_GROUP_MASK) | VM_PURGABLE_DEBUG_MASK) | VM_PURGABLE_NO_AGING_MASK;
pub const _MACH_VM_BEHAVIOR_H_ = "";
pub const VM_BEHAVIOR_DEFAULT = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 0));
pub const VM_BEHAVIOR_RANDOM = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 1));
pub const VM_BEHAVIOR_SEQUENTIAL = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 2));
pub const VM_BEHAVIOR_RSEQNTL = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 3));
pub const VM_BEHAVIOR_WILLNEED = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 4));
pub const VM_BEHAVIOR_DONTNEED = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 5));
pub const VM_BEHAVIOR_FREE = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 6));
pub const VM_BEHAVIOR_ZERO_WIRED_PAGES = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 7));
pub const VM_BEHAVIOR_REUSABLE = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 8));
pub const VM_BEHAVIOR_REUSE = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 9));
pub const VM_BEHAVIOR_CAN_REUSE = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 10));
pub const VM_BEHAVIOR_PAGEOUT = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 11));
pub const _MACH_VM_REGION_H_ = "";
pub const _MACH_MACHINE_VM_PARAM_H_ = "";
pub const _MACH_ARM_VM_PARAM_H_ = "";
pub const _VM_PAGE_SIZE_H_ = "";
pub inline fn trunc_page(x: anytype) @TypeOf(x & ~(vm_page_size - @as(c_int, 1))) {
    _ = &x;
    return x & ~(vm_page_size - @as(c_int, 1));
}
pub inline fn round_page(x: anytype) @TypeOf(trunc_page(x + (vm_page_size - @as(c_int, 1)))) {
    _ = &x;
    return trunc_page(x + (vm_page_size - @as(c_int, 1)));
}
pub inline fn mach_vm_trunc_page(x: anytype) @TypeOf(@import("std").zig.c_translation.cast(mach_vm_offset_t, x) & ~@import("std").zig.c_translation.cast(c_int, vm_page_mask)) {
    _ = &x;
    return @import("std").zig.c_translation.cast(mach_vm_offset_t, x) & ~@import("std").zig.c_translation.cast(c_int, vm_page_mask);
}
pub inline fn mach_vm_round_page(x: anytype) @TypeOf((@import("std").zig.c_translation.cast(mach_vm_offset_t, x) + vm_page_mask) & ~@import("std").zig.c_translation.cast(c_int, vm_page_mask)) {
    _ = &x;
    return (@import("std").zig.c_translation.cast(mach_vm_offset_t, x) + vm_page_mask) & ~@import("std").zig.c_translation.cast(c_int, vm_page_mask);
}
pub inline fn trunc_page_kernel(x: anytype) @TypeOf(x & ~vm_kernel_page_mask) {
    _ = &x;
    return x & ~vm_kernel_page_mask;
}
pub inline fn round_page_kernel(x: anytype) @TypeOf(trunc_page_kernel(x + vm_kernel_page_mask)) {
    _ = &x;
    return trunc_page_kernel(x + vm_kernel_page_mask);
}
pub const BYTE_SIZE = @as(c_int, 8);
pub const PAGE_SHIFT = vm_page_shift;
pub const PAGE_SIZE = vm_page_size;
pub const PAGE_MASK = vm_page_mask;
pub const VM_PAGE_SIZE = vm_page_size;
pub inline fn machine_ptob(x: anytype) @TypeOf(x << PAGE_SHIFT) {
    _ = &x;
    return x << PAGE_SHIFT;
}
pub const PAGE_MAX_SHIFT = @as(c_int, 14);
pub const PAGE_MAX_SIZE = @as(c_int, 1) << PAGE_MAX_SHIFT;
pub const PAGE_MAX_MASK = PAGE_MAX_SIZE - @as(c_int, 1);
pub const PAGE_MIN_SHIFT = @as(c_int, 12);
pub const PAGE_MIN_SIZE = @as(c_int, 1) << PAGE_MIN_SHIFT;
pub const PAGE_MIN_MASK = PAGE_MIN_SIZE - @as(c_int, 1);
pub const VM_MAX_PAGE_ADDRESS = MACH_VM_MAX_ADDRESS;
pub const VM_MIN_ADDRESS = @import("std").zig.c_translation.cast(vm_address_t, @as(c_ulonglong, 0x0000000000000000));
pub const VM_MAX_ADDRESS = @import("std").zig.c_translation.cast(vm_address_t, @as(c_ulonglong, 0x00000000F0000000));
pub const MACH_VM_MIN_ADDRESS_RAW = @as(c_ulonglong, 0x0);
pub const MACH_VM_MAX_ADDRESS_RAW = @as(c_ulonglong, 0x00007FFFFE000000);
pub const MACH_VM_MIN_ADDRESS = @import("std").zig.c_translation.cast(mach_vm_offset_t, MACH_VM_MIN_ADDRESS_RAW);
pub const MACH_VM_MAX_ADDRESS = @import("std").zig.c_translation.cast(mach_vm_offset_t, MACH_VM_MAX_ADDRESS_RAW);
pub const MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW = @as(c_ulonglong, 0x0000001000000000);
pub const MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW = @as(c_ulonglong, 0x0000007000000000);
pub const MACH_VM_MIN_GPU_CARVEOUT_ADDRESS = @import("std").zig.c_translation.cast(mach_vm_offset_t, MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW);
pub const MACH_VM_MAX_GPU_CARVEOUT_ADDRESS = @import("std").zig.c_translation.cast(mach_vm_offset_t, MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW);
pub const VM_MAP_MIN_ADDRESS = VM_MIN_ADDRESS;
pub const VM_MAP_MAX_ADDRESS = VM_MAX_ADDRESS;
pub const SWI_SYSCALL = @as(c_int, 0x80);
pub const VM_REGION_INFO_MAX = @as(c_int, 1024);
pub const VM_REGION_BASIC_INFO_64 = @as(c_int, 9);
pub const VM_REGION_BASIC_INFO_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_region_basic_info_data_64_t), @import("std").zig.c_translation.sizeof(c_int)));
pub const VM_REGION_BASIC_INFO = @as(c_int, 10);
pub const VM_REGION_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_region_basic_info_data_t), @import("std").zig.c_translation.sizeof(c_int)));
pub const SM_COW = @as(c_int, 1);
pub const SM_PRIVATE = @as(c_int, 2);
pub const SM_EMPTY = @as(c_int, 3);
pub const SM_SHARED = @as(c_int, 4);
pub const SM_TRUESHARED = @as(c_int, 5);
pub const SM_PRIVATE_ALIASED = @as(c_int, 6);
pub const SM_SHARED_ALIASED = @as(c_int, 7);
pub const SM_LARGE_PAGE = @as(c_int, 8);
pub const VM_REGION_EXTENDED_INFO = @as(c_int, 13);
pub const VM_REGION_EXTENDED_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_region_extended_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const VM_REGION_TOP_INFO = @as(c_int, 12);
pub const VM_REGION_TOP_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_region_top_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const VM_REGION_SUBMAP_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_region_submap_info_data_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const VM_REGION_SUBMAP_INFO_V2_SIZE = @import("std").zig.c_translation.sizeof(vm_region_submap_info_data_64_t);
pub const VM_REGION_SUBMAP_INFO_V1_SIZE = VM_REGION_SUBMAP_INFO_V2_SIZE - @import("std").zig.c_translation.sizeof(vm_object_id_t);
pub const VM_REGION_SUBMAP_INFO_V0_SIZE = VM_REGION_SUBMAP_INFO_V1_SIZE - @import("std").zig.c_translation.sizeof(c_uint);
pub const VM_REGION_SUBMAP_INFO_V2_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(VM_REGION_SUBMAP_INFO_V2_SIZE, @import("std").zig.c_translation.sizeof(natural_t)));
pub const VM_REGION_SUBMAP_INFO_V1_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(VM_REGION_SUBMAP_INFO_V1_SIZE, @import("std").zig.c_translation.sizeof(natural_t)));
pub const VM_REGION_SUBMAP_INFO_V0_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(VM_REGION_SUBMAP_INFO_V0_SIZE, @import("std").zig.c_translation.sizeof(natural_t)));
pub const VM_REGION_SUBMAP_INFO_COUNT_64 = VM_REGION_SUBMAP_INFO_V2_COUNT_64;
pub const VM_REGION_SUBMAP_SHORT_INFO_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_region_submap_short_info_data_64_t), @import("std").zig.c_translation.sizeof(natural_t)));
pub const VM_MAP_ENTRY_MAX = @as(c_int, 256);
pub const VM_PAGE_INFO_MAX = "";
pub const VM_PAGE_INFO_BASIC = @as(c_int, 1);
pub const VM_PAGE_INFO_BASIC_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(vm_page_info_basic_data_t), @import("std").zig.c_translation.sizeof(c_int)));
pub const _MACH_KMOD_H_ = "";
pub const KMOD_MAX_NAME = @as(c_int, 64);
pub const KMOD_RETURN_SUCCESS = KERN_SUCCESS;
pub const KMOD_RETURN_FAILURE = KERN_FAILURE;
pub const KMOD_INFO_NAME = kmod_info;
pub const KMOD_INFO_VERSION = @as(c_int, 1);
pub const _MACH_DYLIB_INFO_H_ = "";
pub const _FSID_T = "";
pub const _FSOBJ_ID_T = "";
pub const TASK_NULL = @import("std").zig.c_translation.cast(task_t, @as(c_int, 0));
pub const TASK_NAME_NULL = @import("std").zig.c_translation.cast(task_name_t, @as(c_int, 0));
pub const TASK_INSPECT_NULL = @import("std").zig.c_translation.cast(task_inspect_t, @as(c_int, 0));
pub const TASK_READ_NULL = @import("std").zig.c_translation.cast(task_read_t, @as(c_int, 0));
pub const THREAD_NULL = @import("std").zig.c_translation.cast(thread_t, @as(c_int, 0));
pub const THREAD_INSPECT_NULL = @import("std").zig.c_translation.cast(thread_inspect_t, @as(c_int, 0));
pub const THREAD_READ_NULL = @import("std").zig.c_translation.cast(thread_read_t, @as(c_int, 0));
pub const TID_NULL = @import("std").zig.c_translation.cast(u64, @as(c_int, 0));
pub const THR_ACT_NULL = @import("std").zig.c_translation.cast(thread_act_t, @as(c_int, 0));
pub const IPC_SPACE_NULL = @import("std").zig.c_translation.cast(ipc_space_t, @as(c_int, 0));
pub const IPC_SPACE_READ_NULL = @import("std").zig.c_translation.cast(ipc_space_read_t, @as(c_int, 0));
pub const IPC_SPACE_INSPECT_NULL = @import("std").zig.c_translation.cast(ipc_space_inspect_t, @as(c_int, 0));
pub const COALITION_NULL = @import("std").zig.c_translation.cast(coalition_t, @as(c_int, 0));
pub const HOST_NULL = @import("std").zig.c_translation.cast(host_t, @as(c_int, 0));
pub const HOST_PRIV_NULL = @import("std").zig.c_translation.cast(host_priv_t, @as(c_int, 0));
pub const HOST_SECURITY_NULL = @import("std").zig.c_translation.cast(host_security_t, @as(c_int, 0));
pub const PROCESSOR_SET_NULL = @import("std").zig.c_translation.cast(processor_set_t, @as(c_int, 0));
pub const PROCESSOR_NULL = @import("std").zig.c_translation.cast(processor_t, @as(c_int, 0));
pub const SEMAPHORE_NULL = @import("std").zig.c_translation.cast(semaphore_t, @as(c_int, 0));
pub const LOCK_SET_NULL = @import("std").zig.c_translation.cast(lock_set_t, @as(c_int, 0));
pub const LEDGER_NULL = @import("std").zig.c_translation.cast(ledger_t, @as(c_int, 0));
pub const ALARM_NULL = @import("std").zig.c_translation.cast(alarm_t, @as(c_int, 0));
pub const CLOCK_NULL = @import("std").zig.c_translation.cast(clock_t, @as(c_int, 0));
pub const UND_SERVER_NULL = @import("std").zig.c_translation.cast(UNDServerRef, @as(c_int, 0));
pub const ARCADE_REG_NULL = @import("std").zig.c_translation.cast(arcade_register_t, @as(c_int, 0));
pub const MACH_EVENTLINK_NULL = @import("std").zig.c_translation.cast(mach_eventlink_t, @as(c_int, 0));
pub const IPC_EVENTLINK_NULL = @import("std").zig.c_translation.cast(ipc_eventlink_t, @as(c_int, 0));
pub const TASK_ID_TOKEN_NULL = @import("std").zig.c_translation.cast(task_id_token_t, @as(c_int, 0));
pub const KCDATA_OBJECT_NULL = @import("std").zig.c_translation.cast(kcdata_object_t, @as(c_int, 0));
pub const TASK_FLAVOR_CONTROL = @as(c_int, 0);
pub const TASK_FLAVOR_READ = @as(c_int, 1);
pub const TASK_FLAVOR_INSPECT = @as(c_int, 2);
pub const TASK_FLAVOR_NAME = @as(c_int, 3);
pub const TASK_FLAVOR_MAX = TASK_FLAVOR_NAME;
pub const THREAD_FLAVOR_CONTROL = @as(c_int, 0);
pub const THREAD_FLAVOR_READ = @as(c_int, 1);
pub const THREAD_FLAVOR_INSPECT = @as(c_int, 2);
pub const THREAD_FLAVOR_MAX = THREAD_FLAVOR_INSPECT;
pub const LEDGER_ITEM_INFINITY = @import("std").zig.c_translation.cast(ledger_item_t, ~@as(c_int, 0));
pub const LEDGER_LIMIT_INFINITY = @import("std").zig.c_translation.cast(ledger_amount_t, (@as(c_ulonglong, 1) << @as(c_int, 63)) - @as(c_int, 1));
pub const _MACH_INIT_ = @as(c_int, 1);
pub inline fn mach_task_self() @TypeOf(mach_task_self_) {
    return mach_task_self_;
}
pub inline fn current_task() @TypeOf(mach_task_self()) {
    return mach_task_self();
}
pub const _MACH_MACH_TRAPS_H_ = "";
pub const NAME_SERVER_SLOT = @as(c_int, 0);
pub const ENVIRONMENT_SLOT = @as(c_int, 1);
pub const SERVICE_SLOT = @as(c_int, 2);
pub const MACH_PORTS_SLOTS_USED = @as(c_int, 3);
pub const __IOKIT_IOTYPES_H = "";
pub const IOKIT = @as(c_int, 1);
pub const __IOKIT_IORETURN_H = "";
pub const _MACH_ERROR_H_ = "";
pub const err_none = @import("std").zig.c_translation.cast(mach_error_t, @as(c_int, 0));
pub const ERR_SUCCESS = @import("std").zig.c_translation.cast(mach_error_t, @as(c_int, 0));
pub const ERR_ROUTINE_NIL = @import("std").zig.c_translation.cast(mach_error_fn_t, @as(c_int, 0));
pub inline fn err_system(x: anytype) c_int {
    _ = &x;
    return @import("std").zig.c_translation.cast(c_int, (@import("std").zig.c_translation.cast(c_uint, x) & @as(c_int, 0x3f)) << @as(c_int, 26));
}
pub inline fn err_sub(x: anytype) @TypeOf((x & @as(c_int, 0xfff)) << @as(c_int, 14)) {
    _ = &x;
    return (x & @as(c_int, 0xfff)) << @as(c_int, 14);
}
pub inline fn err_get_system(err: anytype) @TypeOf((err >> @as(c_int, 26)) & @as(c_int, 0x3f)) {
    _ = &err;
    return (err >> @as(c_int, 26)) & @as(c_int, 0x3f);
}
pub inline fn err_get_sub(err: anytype) @TypeOf((err >> @as(c_int, 14)) & @as(c_int, 0xfff)) {
    _ = &err;
    return (err >> @as(c_int, 14)) & @as(c_int, 0xfff);
}
pub inline fn err_get_code(err: anytype) @TypeOf(err & @as(c_int, 0x3fff)) {
    _ = &err;
    return err & @as(c_int, 0x3fff);
}
pub const system_emask = err_system(@as(c_int, 0x3f));
pub const sub_emask = err_sub(@as(c_int, 0xfff));
pub const code_emask = @as(c_int, 0x3fff);
pub const err_kern = err_system(@as(c_int, 0x0));
pub const err_us = err_system(@as(c_int, 0x1));
pub const err_server = err_system(@as(c_int, 0x2));
pub const err_ipc = err_system(@as(c_int, 0x3));
pub const err_mach_ipc = err_system(@as(c_int, 0x4));
pub const err_dipc = err_system(@as(c_int, 0x7));
pub const err_local = err_system(@as(c_int, 0x3e));
pub const err_ipc_compat = err_system(@as(c_int, 0x3f));
pub const err_max_system = @as(c_int, 0x3f);
pub inline fn unix_err(errno_1: anytype) @TypeOf((err_kern | err_sub(@as(c_int, 3))) | errno_1) {
    _ = &errno_1;
    return (err_kern | err_sub(@as(c_int, 3))) | errno_1;
}
pub const sys_iokit = err_system(@as(c_int, 0x38));
pub const sub_iokit_common = err_sub(@as(c_int, 0));
pub const sub_iokit_usb = err_sub(@as(c_int, 1));
pub const sub_iokit_firewire = err_sub(@as(c_int, 2));
pub const sub_iokit_block_storage = err_sub(@as(c_int, 4));
pub const sub_iokit_graphics = err_sub(@as(c_int, 5));
pub const sub_iokit_networking = err_sub(@as(c_int, 6));
pub const sub_iokit_bluetooth = err_sub(@as(c_int, 8));
pub const sub_iokit_pmu = err_sub(@as(c_int, 9));
pub const sub_iokit_acpi = err_sub(@as(c_int, 10));
pub const sub_iokit_smbus = err_sub(@as(c_int, 11));
pub const sub_iokit_ahci = err_sub(@as(c_int, 12));
pub const sub_iokit_powermanagement = err_sub(@as(c_int, 13));
pub const sub_iokit_hidsystem = err_sub(@as(c_int, 14));
pub const sub_iokit_scsi = err_sub(@as(c_int, 16));
pub const sub_iokit_usbaudio = err_sub(@as(c_int, 17));
pub const sub_iokit_wirelesscharging = err_sub(@as(c_int, 18));
pub const sub_iokit_thunderbolt = err_sub(@as(c_int, 29));
pub const sub_iokit_graphics_acceleration = err_sub(@as(c_int, 30));
pub const sub_iokit_keystore = err_sub(@as(c_int, 31));
pub const sub_iokit_apfs = err_sub(@as(c_int, 33));
pub const sub_iokit_acpiec = err_sub(@as(c_int, 34));
pub const sub_iokit_timesync_avb = err_sub(@as(c_int, 35));
pub const sub_iokit_platform = err_sub(@as(c_int, 0x2A));
pub const sub_iokit_audio_video = err_sub(@as(c_int, 0x45));
pub const sub_iokit_cec = err_sub(@as(c_int, 0x46));
pub const sub_iokit_arc = err_sub(@as(c_int, 0x47));
pub const sub_iokit_baseband = err_sub(@as(c_int, 0x80));
pub const sub_iokit_HDA = err_sub(@as(c_int, 0xFE));
pub const sub_iokit_hsic = err_sub(@as(c_int, 0x147));
pub const sub_iokit_sdio = err_sub(@as(c_int, 0x174));
pub const sub_iokit_wlan = err_sub(@as(c_int, 0x208));
pub const sub_iokit_appleembeddedsleepwakehandler = err_sub(@as(c_int, 0x209));
pub const sub_iokit_appleppm = err_sub(@as(c_int, 0x20A));
pub const sub_iokit_vendor_specific = err_sub(-@as(c_int, 2));
pub const sub_iokit_reserved = err_sub(-@as(c_int, 1));
pub const kIOReturnSuccess = KERN_SUCCESS;
pub const kIOReturnError = iokit_common_err(@as(c_int, 0x2bc));
pub const kIOReturnNoMemory = iokit_common_err(@as(c_int, 0x2bd));
pub const kIOReturnNoResources = iokit_common_err(@as(c_int, 0x2be));
pub const kIOReturnIPCError = iokit_common_err(@as(c_int, 0x2bf));
pub const kIOReturnNoDevice = iokit_common_err(@as(c_int, 0x2c0));
pub const kIOReturnNotPrivileged = iokit_common_err(@as(c_int, 0x2c1));
pub const kIOReturnBadArgument = iokit_common_err(@as(c_int, 0x2c2));
pub const kIOReturnLockedRead = iokit_common_err(@as(c_int, 0x2c3));
pub const kIOReturnLockedWrite = iokit_common_err(@as(c_int, 0x2c4));
pub const kIOReturnExclusiveAccess = iokit_common_err(@as(c_int, 0x2c5));
pub const kIOReturnBadMessageID = iokit_common_err(@as(c_int, 0x2c6));
pub const kIOReturnUnsupported = iokit_common_err(@as(c_int, 0x2c7));
pub const kIOReturnVMError = iokit_common_err(@as(c_int, 0x2c8));
pub const kIOReturnInternalError = iokit_common_err(@as(c_int, 0x2c9));
pub const kIOReturnIOError = iokit_common_err(@as(c_int, 0x2ca));
pub const kIOReturnCannotLock = iokit_common_err(@as(c_int, 0x2cc));
pub const kIOReturnNotOpen = iokit_common_err(@as(c_int, 0x2cd));
pub const kIOReturnNotReadable = iokit_common_err(@as(c_int, 0x2ce));
pub const kIOReturnNotWritable = iokit_common_err(@as(c_int, 0x2cf));
pub const kIOReturnNotAligned = iokit_common_err(@as(c_int, 0x2d0));
pub const kIOReturnBadMedia = iokit_common_err(@as(c_int, 0x2d1));
pub const kIOReturnStillOpen = iokit_common_err(@as(c_int, 0x2d2));
pub const kIOReturnRLDError = iokit_common_err(@as(c_int, 0x2d3));
pub const kIOReturnDMAError = iokit_common_err(@as(c_int, 0x2d4));
pub const kIOReturnBusy = iokit_common_err(@as(c_int, 0x2d5));
pub const kIOReturnTimeout = iokit_common_err(@as(c_int, 0x2d6));
pub const kIOReturnOffline = iokit_common_err(@as(c_int, 0x2d7));
pub const kIOReturnNotReady = iokit_common_err(@as(c_int, 0x2d8));
pub const kIOReturnNotAttached = iokit_common_err(@as(c_int, 0x2d9));
pub const kIOReturnNoChannels = iokit_common_err(@as(c_int, 0x2da));
pub const kIOReturnNoSpace = iokit_common_err(@as(c_int, 0x2db));
pub const kIOReturnPortExists = iokit_common_err(@as(c_int, 0x2dd));
pub const kIOReturnCannotWire = iokit_common_err(@as(c_int, 0x2de));
pub const kIOReturnNoInterrupt = iokit_common_err(@as(c_int, 0x2df));
pub const kIOReturnNoFrames = iokit_common_err(@as(c_int, 0x2e0));
pub const kIOReturnMessageTooLarge = iokit_common_err(@as(c_int, 0x2e1));
pub const kIOReturnNotPermitted = iokit_common_err(@as(c_int, 0x2e2));
pub const kIOReturnNoPower = iokit_common_err(@as(c_int, 0x2e3));
pub const kIOReturnNoMedia = iokit_common_err(@as(c_int, 0x2e4));
pub const kIOReturnUnformattedMedia = iokit_common_err(@as(c_int, 0x2e5));
pub const kIOReturnUnsupportedMode = iokit_common_err(@as(c_int, 0x2e6));
pub const kIOReturnUnderrun = iokit_common_err(@as(c_int, 0x2e7));
pub const kIOReturnOverrun = iokit_common_err(@as(c_int, 0x2e8));
pub const kIOReturnDeviceError = iokit_common_err(@as(c_int, 0x2e9));
pub const kIOReturnNoCompletion = iokit_common_err(@as(c_int, 0x2ea));
pub const kIOReturnAborted = iokit_common_err(@as(c_int, 0x2eb));
pub const kIOReturnNoBandwidth = iokit_common_err(@as(c_int, 0x2ec));
pub const kIOReturnNotResponding = iokit_common_err(@as(c_int, 0x2ed));
pub const kIOReturnIsoTooOld = iokit_common_err(@as(c_int, 0x2ee));
pub const kIOReturnIsoTooNew = iokit_common_err(@as(c_int, 0x2ef));
pub const kIOReturnNotFound = iokit_common_err(@as(c_int, 0x2f0));
pub const kIOReturnInvalid = iokit_common_err(@as(c_int, 0x1));
pub const _OS_OSTYPES_H = "";
pub const OSTYPES_K64_REV = @as(c_int, 2);
pub const PRIIOByteCount = PRIu64;
pub inline fn IOPhysical32(hi: anytype, lo: anytype) @TypeOf(@import("std").zig.c_translation.cast(UInt64, lo) + (@import("std").zig.c_translation.cast(UInt64, hi) << @as(c_int, 32))) {
    _ = &hi;
    _ = &lo;
    return @import("std").zig.c_translation.cast(UInt64, lo) + (@import("std").zig.c_translation.cast(UInt64, hi) << @as(c_int, 32));
}
pub const IOPhysSize = @as(c_int, 64);
pub const __IOKIT_PORTS_DEFINED__ = "";
pub const DEVICE_TYPES_H = "";
pub const IO_OBJECT_NULL = @import("std").zig.c_translation.cast(io_object_t, @as(c_int, 0));
pub const __IOKIT_IOMAPTYPES_H = "";
pub const _IOKIT_IOKITKEYS_H = "";
pub const kIOKitBuildVersionKey = "IOKitBuildVersion";
pub const kIOKitDiagnosticsKey = "IOKitDiagnostics";
pub const kIORegistryPlanesKey = "IORegistryPlanes";
pub const kIOCatalogueKey = "IOCatalogue";
pub const kIOServicePlane = "IOService";
pub const kIOPowerPlane = "IOPower";
pub const kIODeviceTreePlane = "IODeviceTree";
pub const kIOAudioPlane = "IOAudio";
pub const kIOFireWirePlane = "IOFireWire";
pub const kIOUSBPlane = "IOUSB";
pub const kIORegistryEntryIDKey = "IORegistryEntryID";
pub const kIORegistryEntryPropertyKeysKey = "IORegistryEntryPropertyKeys";
pub const kIORegistryEntryAllowableSetPropertiesKey = "IORegistryEntryAllowableSetProperties";
pub const kIORegistryEntryDefaultLockingSetPropertiesKey = "IORegistryEntryDefaultLockingSetProperties";
pub const kIOServiceClass = "IOService";
pub const kIOResourcesClass = "IOResources";
pub const kIOClassKey = "IOClass";
pub const kIOProbeScoreKey = "IOProbeScore";
pub const kIOKitDebugKey = "IOKitDebug";
pub const kIOUserClassKey = "IOUserClass";
pub const kIOUserClassesKey = "IOUserClasses";
pub const kIOSupportedPropertiesKey = "IOSupportedProperties";
pub const kIOUserServicePropertiesKey = "IOUserServiceProperties";
pub const kIOProviderClassKey = "IOProviderClass";
pub const kIONameMatchKey = "IONameMatch";
pub const kIOPropertyMatchKey = "IOPropertyMatch";
pub const kIOPropertyExistsMatchKey = "IOPropertyExistsMatch";
pub const kIOPathMatchKey = "IOPathMatch";
pub const kIOLocationMatchKey = "IOLocationMatch";
pub const kIOParentMatchKey = "IOParentMatch";
pub const kIOResourceMatchKey = "IOResourceMatch";
pub const kIOResourceMatchedKey = "IOResourceMatched";
pub const kIOMatchedServiceCountKey = "IOMatchedServiceCountMatch";
pub const kIONameMatchedKey = "IONameMatched";
pub const kIOMatchCategoryKey = "IOMatchCategory";
pub const kIODefaultMatchCategoryKey = "IODefaultMatchCategory";
pub const kIOMatchedPersonalityKey = "IOMatchedPersonality";
pub const kIORematchPersonalityKey = "IORematchPersonality";
pub const kIORematchCountKey = "IORematchCount";
pub const kIODEXTMatchCountKey = "IODEXTMatchCount";
pub const kIOUserClientEntitlementsKey = "IOUserClientEntitlements";
pub const kIOServiceDEXTEntitlementsKey = "IOServiceDEXTEntitlements";
pub const kIODriverKitEntitlementKey = "com.apple.developer.driverkit";
pub const kIODriverKitUserClientEntitlementsKey = "com.apple.developer.driverkit.userclient-access";
pub const kIODriverKitRequiredEntitlementsKey = "com.apple.private.driverkit.driver-access";
pub const kIODriverKitTestDriverEntitlementKey = "com.apple.private.driverkit.test-driver";
pub const kIODriverKitUserClientEntitlementAllowAnyKey = "com.apple.developer.driverkit.allow-any-userclient-access";
pub const kIODriverKitUserClientEntitlementAdministratorKey = "com.apple.developer.driverkit.administrator";
pub const kIODriverKitUserClientEntitlementCommunicatesWithDriversKey = "com.apple.developer.driverkit.communicates-with-drivers";
pub const kIODriverKitUserClientEntitlementAllowThirdPartyUserClientsKey = "com.apple.developer.driverkit.allow-third-party-userclients";
pub const kIODriverKitUSBTransportEntitlementKey = "com.apple.developer.driverkit.transport.usb";
pub const kIODriverKitHIDTransportEntitlementKey = "com.apple.developer.driverkit.transport.hid";
pub const kIODriverKitHIDFamilyDeviceEntitlementKey = "com.apple.developer.driverkit.family.hid.device";
pub const kIODriverKitHIDFamilyEventServiceEntitlementKey = "com.apple.developer.driverkit.family.hid.eventservice";
pub const kIODriverKitTransportBuiltinEntitlementKey = "com.apple.developer.driverkit.builtin";
pub const kIONVRAMReadAccessKey = "com.apple.private.iokit.nvram-read-access";
pub const kIONVRAMWriteAccessKey = "com.apple.private.iokit.nvram-write-access";
pub const kIOResourcesSetPropertyKey = "com.apple.private.iokit.ioresources.setproperty";
pub const kIONVRAMSystemAllowKey = "com.apple.private.iokit.system-nvram-allow";
pub const kIOMatchDeferKey = "IOMatchDefer";
pub const kIOAllCPUInitializedKey = "IOAllCPUInitialized";
pub const kIOUserClientClassKey = "IOUserClientClass";
pub const kIOMapperIDKey = "IOMapperID";
pub const kIOUserClientCrossEndianKey = "IOUserClientCrossEndian";
pub const kIOUserClientCrossEndianCompatibleKey = "IOUserClientCrossEndianCompatible";
pub const kIOUserClientSharedInstanceKey = "IOUserClientSharedInstance";
pub const kIOUserClientDefaultLockingKey = "IOUserClientDefaultLocking";
pub const kIOUserClientDefaultLockingSetPropertiesKey = "IOUserClientDefaultLockingSetProperties";
pub const kIOUserClientDefaultLockingSingleThreadExternalMethodKey = "IOUserClientDefaultLockingSingleThreadExternalMethod";
pub const kIOUserClientCreatorKey = "IOUserClientCreator";
pub const kIOUserServerCDHashKey = "IOUserServerCDHash";
pub const kIOUserUserClientKey = "IOUserUserClient";
pub const kIOUserServerOneProcessKey = "IOUserServerOneProcess";
pub const kIOUserServerPreserveUserspaceRebootKey = "IOUserServerPreserveUserspaceReboot";
pub const kIOPublishNotification = "IOServicePublish";
pub const kIOFirstPublishNotification = "IOServiceFirstPublish";
pub const kIOMatchedNotification = "IOServiceMatched";
pub const kIOFirstMatchNotification = "IOServiceFirstMatch";
pub const kIOTerminatedNotification = "IOServiceTerminate";
pub const kIOWillTerminateNotification = "IOServiceWillTerminate";
pub const kIOGeneralInterest = "IOGeneralInterest";
pub const kIOBusyInterest = "IOBusyInterest";
pub const kIOAppPowerStateInterest = "IOAppPowerStateInterest";
pub const kIOPriorityPowerStateInterest = "IOPriorityPowerStateInterest";
pub const kIOPlatformDeviceMessageKey = "IOPlatformDeviceMessage";
pub const kIOCFPlugInTypesKey = "IOCFPlugInTypes";
pub const kIOCompatibilityMatchKey = "IOCompatibilityMatch";
pub const kIOCompatibilityPropertiesKey = "IOCompatibilityProperties";
pub const kIOPathKey = "IOPath";
pub const kIOCommandPoolSizeKey = "IOCommandPoolSize";
pub const kIOMaximumPriorityCountKey = "IOMaximumPriorityCount";
pub const kIOMaximumBlockCountReadKey = "IOMaximumBlockCountRead";
pub const kIOMaximumBlockCountWriteKey = "IOMaximumBlockCountWrite";
pub const kIOMaximumByteCountReadKey = "IOMaximumByteCountRead";
pub const kIOMaximumByteCountWriteKey = "IOMaximumByteCountWrite";
pub const kIOMaximumSegmentCountReadKey = "IOMaximumSegmentCountRead";
pub const kIOMaximumSegmentCountWriteKey = "IOMaximumSegmentCountWrite";
pub const kIOMaximumSegmentByteCountReadKey = "IOMaximumSegmentByteCountRead";
pub const kIOMaximumSegmentByteCountWriteKey = "IOMaximumSegmentByteCountWrite";
pub const kIOMinimumSegmentAlignmentByteCountKey = "IOMinimumSegmentAlignmentByteCount";
pub const kIOMaximumSegmentAddressableBitCountKey = "IOMaximumSegmentAddressableBitCount";
pub const kIOMinimumSaturationByteCountKey = "IOMinimumSaturationByteCount";
pub const kIOMaximumSwapWriteKey = "IOMaximumSwapWrite";
pub const kIOIconKey = "IOIcon";
pub const kIOBundleResourceFileKey = "IOBundleResourceFile";
pub const kIOBusBadgeKey = "IOBusBadge";
pub const kIODeviceIconKey = "IODeviceIcon";
pub const kIOPlatformSerialNumberKey = "IOPlatformSerialNumber";
pub const kIOPlatformUUIDKey = "IOPlatformUUID";
pub const kIONVRAMBootArgsKey = "boot-args";
pub const kIONVRAMDeletePropertyKey = "IONVRAM-DELETE-PROPERTY";
pub const kIONVRAMSyncNowPropertyKey = "IONVRAM-SYNCNOW-PROPERTY";
pub const kIONVRAMActivateCSRConfigPropertyKey = "IONVRAM-ARMCSR-PROPERTY";
pub const kIODTNVRAMPanicInfoKey = "aapl,panic-info";
pub const kIOBootDeviceKey = "IOBootDevice";
pub const kIOBootDevicePathKey = "IOBootDevicePath";
pub const kIOBootDeviceSizeKey = "IOBootDeviceSize";
pub const kOSBuildVersionKey = "OS Build Version";
pub const kIOStateNotificationItemCreateKey = "com.apple.iokit.statenotification.create";
pub const kIOStateNotificationItemSetKey = "com.apple.iokit.statenotification.set";
pub const kIOStateNotificationItemCopyKey = "com.apple.iokit.statenotification.copy";
pub const kIOStateNotificationNameKey = "com.apple.iokit.statenotification.name";
pub const kIOStateNotificationEntitlementSetKey = "com.apple.iokit.statenotification.entitlement-set";
pub const kIOStateNotificationEntitlementGetKey = "com.apple.iokit.statenotification.entitlement-get";
pub const kIOSystemStateClamshellKey = "com.apple.iokit.pm.clamshell";
pub const kIOSystemStateSleepDescriptionKey = "com.apple.iokit.pm.sleepdescription";
pub const kIOSystemStateSleepDescriptionReasonKey = "com.apple.iokit.pm.sleepreason";
pub const kIOSystemStateSleepDescriptionHibernateStateKey = "com.apple.iokit.pm.hibernatestate";
pub const kIOSystemStateWakeDescriptionKey = "com.apple.iokit.pm.wakedescription";
pub const kIOSystemStateWakeDescriptionWakeReasonKey = "com.apple.iokit.pm.wakereason";
pub const kIOSystemStateHaltDescriptionKey = "com.apple.iokit.pm.haltdescription";
pub const kIOSystemStateHaltDescriptionHaltStateKey = "com.apple.iokit.pm.haltstate";
pub const kIOSystemStatePowerSourceDescriptionKey = "com.apple.iokit.pm.powersourcedescription";
pub const kIOSystemStatePowerSourceDescriptionACAttachedKey = "com.apple.iokit.pm.acattached";
pub const __OS_OSMESSAGENOTIFICATION_H = "";
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5_EXCLUDE_PUBLIC_IOS = AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5;
pub const CGDISPLAYFADE_H_ = "";
pub const kCGDisplayFadeReservationInvalidToken = @as(c_int, 0);
pub const kCGDisplayBlendNormal = @as(f64, 0.0);
pub const kCGDisplayBlendSolidColor = @as(f64, 1.0);
pub const kCGMaxDisplayReservationInterval = @import("std").zig.c_translation.cast(CGDisplayReservationInterval, @as(f64, 15.0));
pub const CGDISPLAYSTREAM_H_ = "";
pub const CGEVENT_H_ = "";
pub const CGEVENTTYPES_H_ = "";
pub const CGREMOTEOPERATION_H_ = "";
pub const CGEventNoErr = kCGErrorSuccess;
pub const kCGMouseDownEventMaskingDeadSwitchTimeout = @as(f64, 60.0);
pub const kCGEventFilterMaskPermitAllEvents = (kCGEventFilterMaskPermitLocalMouseEvents | kCGEventFilterMaskPermitLocalKeyboardEvents) | kCGEventFilterMaskPermitSystemDefinedEvents;
pub const kCGEventSupressionStateSupressionInterval = kCGEventSuppressionStateSuppressionInterval;
pub const kCGEventSupressionStateRemoteMouseDrag = kCGEventSuppressionStateRemoteMouseDrag;
pub const kCGNumberOfEventSupressionStates = kCGNumberOfEventSuppressionStates;
pub const CGEventSupressionState = CGEventSuppressionState;
pub inline fn CGSetLocalEventsFilterDuringSupressionState(filter: anytype, state: anytype) @TypeOf(CGSetLocalEventsFilterDuringSuppressionState(filter, state)) {
    _ = &filter;
    _ = &state;
    return CGSetLocalEventsFilterDuringSuppressionState(filter, state);
}
pub const _DEV_EVENT_H = "";
pub const _DEV_EV_TYPES_H = "";
pub const _OSATOMIC_H_ = "";
pub const _OSATOMIC_DEPRECATED_H_ = "";
pub const OSATOMIC_DEPRECATED = @as(c_int, 1);
pub const _OSSPINLOCK_DEPRECATED_H_ = "";
pub const OSSPINLOCK_DEPRECATED = @as(c_int, 1);
pub const OS_SPINLOCK_INIT = @as(c_int, 0);
pub const _OSATOMICQUEUE_H_ = "";
pub const _IOKIT_IOGRAPHICSTYPES_H = "";
pub const IOGRAPHICSTYPES_REV = @as(c_int, 76);
pub const IO1BitIndexedPixels = "P";
pub const IO2BitIndexedPixels = "PP";
pub const IO4BitIndexedPixels = "PPPP";
pub const IO8BitIndexedPixels = "PPPPPPPP";
pub const IO16BitDirectPixels = "-RRRRRGGGGGBBBBB";
pub const IO32BitDirectPixels = "--------RRRRRRRRGGGGGGGGBBBBBBBB";
pub const kIO30BitDirectPixels = "--RRRRRRRRRRGGGGGGGGGGBBBBBBBBBB";
pub const kIO64BitDirectPixels = "-16R16G16B16";
pub const kIO16BitFloatPixels = "-16FR16FG16FB16";
pub const kIO32BitFloatPixels = "-32FR32FG32FB32";
pub const IOYUV422Pixels = "Y4U2V2";
pub const IO8BitOverlayPixels = "O8";
pub const IOPagedPixels = "Page1";
pub const IO_SampleTypeAlpha = 'A';
pub const IO_SampleTypeSkip = '-';
pub const kIOFBSetGammaSyncNotSpecified = -@as(c_int, 1);
pub const kIOFBSetGammaSyncNoSync = @as(c_int, 0);
pub const kIOFBSetGammaSyncVerticalBlankSync = @as(c_int, 1);
pub const kIODisplayAttributesKey = "IODisplayAttributes";
pub const kIODisplaySupportsUnderscanKey = "IODisplaySupportsUnderscan";
pub const kIODisplaySupportsBasicAudioKey = "IODisplaySupportsBasicAudio";
pub const kIODisplaySupportsYCbCr444Key = "IODisplaySupportsYCbCr444";
pub const kIODisplaySupportsYCbCr422Key = "IODisplaySupportsYCbCr422";
pub const kIODisplaySelectedColorModeKey = "cmod";
pub const IO_DISPLAY_CAN_FILL = @as(c_int, 0x00000040);
pub const IO_DISPLAY_CAN_BLIT = @as(c_int, 0x00000020);
pub const IO_24BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const IO_15BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const IO_8BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const IO_12BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const IO_2BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const STDFB_BM256_TO_BM38_MAP_SIZE = @as(c_int, 256);
pub const STDFB_BM38_TO_BM256_MAP_SIZE = @as(c_int, 256);
pub const STDFB_BM38_TO_256_WITH_LOGICAL_SIZE = STDFB_BM38_TO_BM256_MAP_SIZE + @import("std").zig.c_translation.MacroArithmetic.div(@as(c_int, 256), @import("std").zig.c_translation.sizeof(c_int));
pub const STDFB_4BPS_TO_5BPS_MAP_SIZE = @as(c_int, 16);
pub const STDFB_5BPS_TO_4BPS_MAP_SIZE = @as(c_int, 32);
pub const kIOFramebufferInfoKey = "IOFramebufferInformation";
pub const kIOFBWidthKey = "IOFBWidth";
pub const kIOFBHeightKey = "IOFBHeight";
pub const kIOFBRefreshRateKey = "IOFBRefreshRate";
pub const kIOFBFlagsKey = "IOFBFlags";
pub const kIOFBBytesPerRowKey = "IOFBBytesPerRow";
pub const kIOFBBytesPerPlaneKey = "IOFBBytesPerPlane";
pub const kIOFBBitsPerPixelKey = "IOFBBitsPerPixel";
pub const kIOFBComponentCountKey = "IOFBComponentCount";
pub const kIOFBBitsPerComponentKey = "IOFBBitsPerComponent";
pub const kIOFBDetailedTimingsKey = "IOFBDetailedTimings";
pub const kIOFBTimingRangeKey = "IOFBTimingRange";
pub const kIOFBScalerInfoKey = "IOFBScalerInfo";
pub const kIOFBCursorInfoKey = "IOFBCursorInfo";
pub const kIOFBHDMIDongleROMKey = "IOFBHDMIDongleROM";
pub const kIOFBHostAccessFlagsKey = "IOFBHostAccessFlags";
pub const kIOFBMemorySizeKey = "IOFBMemorySize";
pub const kIOFBNeedsRefreshKey = "IOFBNeedsRefresh";
pub const kIOFBProbeOptionsKey = "IOFBProbeOptions";
pub const kIOFBGammaWidthKey = "IOFBGammaWidth";
pub const kIOFBGammaCountKey = "IOFBGammaCount";
pub const kIOFBCLUTDeferKey = "IOFBCLUTDefer";
pub const kIOFBDisplayPortConfigurationDataKey = "dpcd-registers";
pub const kIOHibernatePreviewActiveKey = "IOHibernatePreviewActive";
pub const kIOHibernateEFIGfxStatusKey = "IOHibernateEFIGfxStatus";
pub const kIOFBAVSignalTypeKey = "av-signal-type";
pub const kIOFBConfigKey = "IOFBConfig";
pub const kIOFBModesKey = "IOFBModes";
pub const kIOFBModeIDKey = "ID";
pub const kIOFBModeDMKey = "DM";
pub const kIOFBModeTMKey = "TM";
pub const kIOFBModeAIDKey = "AID";
pub const kIOFBModeDFKey = "DF";
pub const kIOFBModePIKey = "PI";
pub const kIODisplayEDIDKey = "IODisplayEDID";
pub const kIODisplayEDIDOriginalKey = "IODisplayEDIDOriginal";
pub const kIODisplayLocationKey = "IODisplayLocation";
pub const kIODisplayConnectFlagsKey = "IODisplayConnectFlags";
pub const kIODisplayHasBacklightKey = "IODisplayHasBacklight";
pub const kIODisplayIsDigitalKey = "IODisplayIsDigital";
pub const kDisplayBundleKey = "DisplayBundle";
pub const kAppleDisplayTypeKey = "AppleDisplayType";
pub const kAppleSenseKey = "AppleSense";
pub const kIODisplayMCCSVersionKey = "IODisplayMCCSVersion";
pub const kIODisplayTechnologyTypeKey = "IODisplayTechnologyType";
pub const kIODisplayUsageTimeKey = "IODisplayUsageTime";
pub const kIODisplayFirmwareLevelKey = "IODisplayFirmwareLevel";
pub const kDisplayVendorID = "DisplayVendorID";
pub const kDisplayProductID = "DisplayProductID";
pub const kDisplaySerialNumber = "DisplaySerialNumber";
pub const kDisplaySerialString = "DisplaySerialString";
pub const kDisplayWeekOfManufacture = "DisplayWeekManufacture";
pub const kDisplayYearOfManufacture = "DisplayYearManufacture";
pub const kDisplayProductName = "DisplayProductName";
pub const kDisplayWhitePointX = "DisplayWhitePointX";
pub const kDisplayWhitePointY = "DisplayWhitePointY";
pub const kDisplayRedPointX = "DisplayRedPointX";
pub const kDisplayRedPointY = "DisplayRedPointY";
pub const kDisplayGreenPointX = "DisplayGreenPointX";
pub const kDisplayGreenPointY = "DisplayGreenPointY";
pub const kDisplayBluePointX = "DisplayBluePointX";
pub const kDisplayBluePointY = "DisplayBluePointY";
pub const kDisplayWhiteGamma = "DisplayWhiteGamma";
pub const kDisplayRedGamma = "DisplayRedGamma";
pub const kDisplayGreenGamma = "DisplayGreenGamma";
pub const kDisplayBlueGamma = "DisplayBlueGamma";
pub const kDisplayGammaChannels = "DisplayGammaChannels";
pub const kDisplayGammaEntryCount = "DisplayGammaEntryCount";
pub const kDisplayGammaEntrySize = "DisplayGammaEntrySize";
pub const kDisplayGammaTable = "DisplayGammaTable";
pub const kDisplayBrightnessAffectsGamma = "DisplayBrightnessAffectsGamma";
pub const kDisplayViewAngleAffectsGamma = "DisplayViewAngleAffectsGamma";
pub const kDisplayCSProfile = "DisplayCSProfile";
pub const kDisplayHorizontalImageSize = "DisplayHorizontalImageSize";
pub const kDisplayVerticalImageSize = "DisplayVerticalImageSize";
pub const kDisplayFixedPixelFormat = "DisplayFixedPixelFormat";
pub const kDisplaySubPixelLayout = "DisplaySubPixelLayout";
pub const kDisplaySubPixelConfiguration = "DisplaySubPixelConfiguration";
pub const kDisplaySubPixelShape = "DisplaySubPixelShape";
pub const kIODisplayOverrideMatchingKey = "IODisplayOverrideMatching";
pub const kIODisplayParametersKey = "IODisplayParameters";
pub const kIODisplayGUIDKey = "IODisplayGUID";
pub const kIODisplayValueKey = "value";
pub const kIODisplayMinValueKey = "min";
pub const kIODisplayMaxValueKey = "max";
pub const kIODisplayBrightnessProbeKey = "brightness-probe";
pub const kIODisplayLinearBrightnessProbeKey = "linear-brightness-probe";
pub const kIODisplayBrightnessKey = "brightness";
pub const kIODisplayLinearBrightnessKey = "linear-brightness";
pub const kIODisplayUsableLinearBrightnessKey = "usable-linear-brightness";
pub const kIODisplayBrightnessFadeKey = "brightness-fade";
pub const kIODisplayContrastKey = "contrast";
pub const kIODisplayHorizontalPositionKey = "horizontal-position";
pub const kIODisplayHorizontalSizeKey = "horizontal-size";
pub const kIODisplayVerticalPositionKey = "vertical-position";
pub const kIODisplayVerticalSizeKey = "vertical-size";
pub const kIODisplayTrapezoidKey = "trapezoid";
pub const kIODisplayPincushionKey = "pincushion";
pub const kIODisplayParallelogramKey = "parallelogram";
pub const kIODisplayRotationKey = "rotation";
pub const kIODisplayTheatreModeKey = "theatre-mode";
pub const kIODisplayTheatreModeWindowKey = "theatre-mode-window";
pub const kIODisplayOverscanKey = "oscn";
pub const kIODisplayVideoBestKey = "vbst";
pub const kIODisplaySpeakerVolumeKey = "speaker-volume";
pub const kIODisplaySpeakerSelectKey = "speaker-select";
pub const kIODisplayMicrophoneVolumeKey = "microphone-volume";
pub const kIODisplayAmbientLightSensorKey = "ambient-light-sensor";
pub const kIODisplayAudioMuteAndScreenBlankKey = "audio-mute-and-screen-blank";
pub const kIODisplayAudioTrebleKey = "audio-treble";
pub const kIODisplayAudioBassKey = "audio-bass";
pub const kIODisplayAudioBalanceLRKey = "audio-balance-LR";
pub const kIODisplayAudioProcessorModeKey = "audio-processor-mode";
pub const kIODisplayPowerModeKey = "power-mode";
pub const kIODisplayManufacturerSpecificKey = "manufacturer-specific";
pub const kIODisplayPowerStateKey = "dsyp";
pub const kIODisplayControllerIDKey = "IODisplayControllerID";
pub const kIODisplayCapabilityStringKey = "IODisplayCapabilityString";
pub const kIODisplayRedGammaScaleKey = "rgsc";
pub const kIODisplayGreenGammaScaleKey = "ggsc";
pub const kIODisplayBlueGammaScaleKey = "bgsc";
pub const kIODisplayGammaScaleKey = "gsc ";
pub const kIODisplayParametersCommitKey = "commit";
pub const kIODisplayParametersDefaultKey = "defaults";
pub const kIODisplayParametersFlushKey = "flush";
pub const _IOKIT_IOSHAREDLOCK_H = "";
pub const IOSharedLockData = OSSpinLock;
pub const ev_lock_data_t = OSSpinLock;
pub const EVENT_SYSTEM_VERSION = @as(c_int, 2);
pub const NX_MAXMOUSESCALINGS = @as(c_int, 20);
pub const NX_EVS_INFO_MAX = @as(c_int, 1024);
pub const NX_EVS_DEVICE_MAX = @as(c_int, 16);
pub const NX_EVS_DEVICE_INTERFACE_OTHER = @as(c_int, 0);
pub const NX_EVS_DEVICE_INTERFACE_NeXT = @as(c_int, 1);
pub const NX_EVS_DEVICE_INTERFACE_ADB = @as(c_int, 2);
pub const NX_EVS_DEVICE_INTERFACE_ACE = @as(c_int, 3);
pub const NX_EVS_DEVICE_INTERFACE_SERIAL_ACE = @as(c_int, 4);
pub const NX_EVS_DEVICE_INTERFACE_BUS_ACE = @as(c_int, 5);
pub const NX_EVS_DEVICE_INTERFACE_HIL = @as(c_int, 6);
pub const NX_EVS_DEVICE_INTERFACE_TYPE5 = @as(c_int, 7);
pub const NUM_SUPPORTED_INTERFACES = NX_EVS_DEVICE_INTERFACE_TYPE5 + @as(c_int, 1);
pub const NX_EVS_DEVICE_TYPE_OTHER = @as(c_int, 0);
pub const NX_EVS_DEVICE_TYPE_KEYBOARD = @as(c_int, 1);
pub const NX_EVS_DEVICE_TYPE_MOUSE = @as(c_int, 2);
pub const NX_EVS_DEVICE_TYPE_TABLET = @as(c_int, 3);
pub const __OLD_NX_EVS_DEVICE_INFO = @as(c_int, 1);
pub const NX_EVS_DEVICE_INFO = "Evs_EventDeviceInfo";
pub const NX_EVS_DEVICE_INFO_COUNT = @import("std").zig.c_translation.MacroArithmetic.div(@import("std").zig.c_translation.sizeof(NXEventSystemDeviceList), @import("std").zig.c_translation.sizeof(c_int));
pub const EV_SCREEN_MIN_BRIGHTNESS = @as(c_int, 0);
pub const EV_SCREEN_MAX_BRIGHTNESS = @as(c_int, 64);
pub inline fn EV_SCALE_BRIGHTNESS(scale: anytype, datum: anytype) @TypeOf((@import("std").zig.c_translation.cast(UInt32, datum) * @import("std").zig.c_translation.cast(UInt32, scale)) >> @as(c_int, 6)) {
    _ = &scale;
    _ = &datum;
    return (@import("std").zig.c_translation.cast(UInt32, datum) * @import("std").zig.c_translation.cast(UInt32, scale)) >> @as(c_int, 6);
}
pub const EV_TICK_TIME = @as(c_int, 16);
pub const EV_TICKS_PER_SEC = @import("std").zig.c_translation.MacroArithmetic.div(@as(c_int, 1000), EV_TICK_TIME);
pub const EV_RB = @as(c_int, 0x01);
pub const EV_LB = @as(c_int, 0x04);
pub const EV_MOUSEBUTTONMASK = EV_LB | EV_RB;
pub const EV_MINPRESSURE = @as(c_int, 0);
pub const EV_MAXPRESSURE = @as(c_int, 255);
pub const EV_CURSOR_WIDTH = @as(c_int, 16);
pub const EV_CURSOR_HEIGHT = @as(c_int, 16);
pub const kAppleOnboardGUID = @as(c_ulonglong, 0x0610000000000000);
pub const EVENT_H = "";
pub const _NXSIZE_ = @as(c_int, 1);
pub const _NXSize_ = NXSize;
pub const NX_NULLEVENT = @as(c_int, 0);
pub const NX_LMOUSEDOWN = @as(c_int, 1);
pub const NX_LMOUSEUP = @as(c_int, 2);
pub const NX_RMOUSEDOWN = @as(c_int, 3);
pub const NX_RMOUSEUP = @as(c_int, 4);
pub const NX_MOUSEMOVED = @as(c_int, 5);
pub const NX_LMOUSEDRAGGED = @as(c_int, 6);
pub const NX_RMOUSEDRAGGED = @as(c_int, 7);
pub const NX_MOUSEENTERED = @as(c_int, 8);
pub const NX_MOUSEEXITED = @as(c_int, 9);
pub const NX_OMOUSEDOWN = @as(c_int, 25);
pub const NX_OMOUSEUP = @as(c_int, 26);
pub const NX_OMOUSEDRAGGED = @as(c_int, 27);
pub const NX_KEYDOWN = @as(c_int, 10);
pub const NX_KEYUP = @as(c_int, 11);
pub const NX_FLAGSCHANGED = @as(c_int, 12);
pub const NX_KITDEFINED = @as(c_int, 13);
pub const NX_SYSDEFINED = @as(c_int, 14);
pub const NX_APPDEFINED = @as(c_int, 15);
pub const NX_SCROLLWHEELMOVED = @as(c_int, 22);
pub const NX_ZOOM = @as(c_int, 28);
pub const NX_TABLETPOINTER = @as(c_int, 23);
pub const NX_TABLETPROXIMITY = @as(c_int, 24);
pub const NX_FIRSTEVENT = @as(c_int, 0);
pub const NX_LASTEVENT = @as(c_int, 28);
pub const NX_NUMPROCS = (NX_LASTEVENT - NX_FIRSTEVENT) + @as(c_int, 1);
pub const NX_NULLEVENTMASK = @as(c_int, 1) << NX_NULLEVENT;
pub const NX_LMOUSEDOWNMASK = @as(c_int, 1) << NX_LMOUSEDOWN;
pub const NX_LMOUSEUPMASK = @as(c_int, 1) << NX_LMOUSEUP;
pub const NX_RMOUSEDOWNMASK = @as(c_int, 1) << NX_RMOUSEDOWN;
pub const NX_RMOUSEUPMASK = @as(c_int, 1) << NX_RMOUSEUP;
pub const NX_OMOUSEDOWNMASK = @as(c_int, 1) << NX_OMOUSEDOWN;
pub const NX_OMOUSEUPMASK = @as(c_int, 1) << NX_OMOUSEUP;
pub const NX_MOUSEMOVEDMASK = @as(c_int, 1) << NX_MOUSEMOVED;
pub const NX_LMOUSEDRAGGEDMASK = @as(c_int, 1) << NX_LMOUSEDRAGGED;
pub const NX_RMOUSEDRAGGEDMASK = @as(c_int, 1) << NX_RMOUSEDRAGGED;
pub const NX_OMOUSEDRAGGEDMASK = @as(c_int, 1) << NX_OMOUSEDRAGGED;
pub const NX_MOUSEENTEREDMASK = @as(c_int, 1) << NX_MOUSEENTERED;
pub const NX_MOUSEEXITEDMASK = @as(c_int, 1) << NX_MOUSEEXITED;
pub const NX_KEYDOWNMASK = @as(c_int, 1) << NX_KEYDOWN;
pub const NX_KEYUPMASK = @as(c_int, 1) << NX_KEYUP;
pub const NX_FLAGSCHANGEDMASK = @as(c_int, 1) << NX_FLAGSCHANGED;
pub const NX_KITDEFINEDMASK = @as(c_int, 1) << NX_KITDEFINED;
pub const NX_SYSDEFINEDMASK = @as(c_int, 1) << NX_SYSDEFINED;
pub const NX_APPDEFINEDMASK = @as(c_int, 1) << NX_APPDEFINED;
pub const NX_SCROLLWHEELMOVEDMASK = @as(c_int, 1) << NX_SCROLLWHEELMOVED;
pub const NX_ZOOMMASK = @as(c_int, 1) << NX_ZOOM;
pub const NX_TABLETPOINTERMASK = @as(c_int, 1) << NX_TABLETPOINTER;
pub const NX_TABLETPROXIMITYMASK = @as(c_int, 1) << NX_TABLETPROXIMITY;
pub inline fn EventCodeMask(@"type": anytype) @TypeOf(@as(c_int, 1) << @"type") {
    _ = &@"type";
    return @as(c_int, 1) << @"type";
}
pub const NX_ALLEVENTS = -@as(c_int, 1);
pub const NX_SUBTYPE_DEFAULT = @as(c_int, 0);
pub const NX_SUBTYPE_TABLET_POINT = @as(c_int, 1);
pub const NX_SUBTYPE_TABLET_PROXIMITY = @as(c_int, 2);
pub const NX_SUBTYPE_MOUSE_TOUCH = @as(c_int, 3);
pub const NX_SUBTYPE_POWER_KEY = @as(c_int, 1);
pub const NX_SUBTYPE_AUX_MOUSE_BUTTONS = @as(c_int, 7);
pub const NX_SUBTYPE_AUX_CONTROL_BUTTONS = @as(c_int, 8);
pub const NX_SUBTYPE_EJECT_KEY = @as(c_int, 10);
pub const NX_SUBTYPE_SLEEP_EVENT = @as(c_int, 11);
pub const NX_SUBTYPE_RESTART_EVENT = @as(c_int, 12);
pub const NX_SUBTYPE_SHUTDOWN_EVENT = @as(c_int, 13);
pub const NX_SUBTYPE_MENU = @as(c_int, 16);
pub const NX_SUBTYPE_ACCESSIBILITY = @as(c_int, 17);
pub const NX_SUBTYPE_STICKYKEYS_ON = @as(c_int, 100);
pub const NX_SUBTYPE_STICKYKEYS_OFF = @as(c_int, 101);
pub const NX_SUBTYPE_STICKYKEYS_SHIFT = @as(c_int, 102);
pub const NX_SUBTYPE_STICKYKEYS_CONTROL = @as(c_int, 103);
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE = @as(c_int, 104);
pub const NX_SUBTYPE_STICKYKEYS_COMMAND = @as(c_int, 105);
pub const NX_SUBTYPE_STICKYKEYS_RELEASE = @as(c_int, 106);
pub const NX_SUBTYPE_STICKYKEYS_TOGGLEMOUSEDRIVING = @as(c_int, 107);
pub const NX_SUBTYPE_STICKYKEYS_SHIFT_DOWN = @as(c_int, 110);
pub const NX_SUBTYPE_STICKYKEYS_CONTROL_DOWN = @as(c_int, 111);
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE_DOWN = @as(c_int, 112);
pub const NX_SUBTYPE_STICKYKEYS_COMMAND_DOWN = @as(c_int, 113);
pub const NX_SUBTYPE_STICKYKEYS_FN_DOWN = @as(c_int, 114);
pub const NX_SUBTYPE_STICKYKEYS_SHIFT_LOCK = @as(c_int, 120);
pub const NX_SUBTYPE_STICKYKEYS_CONTROL_LOCK = @as(c_int, 121);
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE_LOCK = @as(c_int, 122);
pub const NX_SUBTYPE_STICKYKEYS_COMMAND_LOCK = @as(c_int, 123);
pub const NX_SUBTYPE_STICKYKEYS_FN_LOCK = @as(c_int, 124);
pub const NX_SUBTYPE_STICKYKEYS_SHIFT_UP = @as(c_int, 130);
pub const NX_SUBTYPE_STICKYKEYS_CONTROL_UP = @as(c_int, 131);
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE_UP = @as(c_int, 132);
pub const NX_SUBTYPE_STICKYKEYS_COMMAND_UP = @as(c_int, 133);
pub const NX_SUBTYPE_STICKYKEYS_FN_UP = @as(c_int, 134);
pub const NX_SUBTYPE_SLOWKEYS_START = @as(c_int, 200);
pub const NX_SUBTYPE_SLOWKEYS_ABORT = @as(c_int, 201);
pub const NX_SUBTYPE_SLOWKEYS_END = @as(c_int, 202);
pub const NX_SUBTYPE_HIDPARAMETER_MODIFIED = @as(c_int, 210);
pub const NX_ALPHASHIFTMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const NX_SHIFTMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const NX_CONTROLMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const NX_ALTERNATEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const NX_COMMANDMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const NX_NUMERICPADMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const NX_HELPMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const NX_SECONDARYFNMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const NX_ALPHASHIFT_STATELESS_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const NX_DEVICELCTLKEYMASK = @as(c_int, 0x00000001);
pub const NX_DEVICELSHIFTKEYMASK = @as(c_int, 0x00000002);
pub const NX_DEVICERSHIFTKEYMASK = @as(c_int, 0x00000004);
pub const NX_DEVICELCMDKEYMASK = @as(c_int, 0x00000008);
pub const NX_DEVICERCMDKEYMASK = @as(c_int, 0x00000010);
pub const NX_DEVICELALTKEYMASK = @as(c_int, 0x00000020);
pub const NX_DEVICERALTKEYMASK = @as(c_int, 0x00000040);
pub const NX_DEVICE_ALPHASHIFT_STATELESS_MASK = @as(c_int, 0x00000080);
pub const NX_DEVICERCTLKEYMASK = @as(c_int, 0x00002000);
pub const NX_STYLUSPROXIMITYMASK = @as(c_int, 0x00000080);
pub const NX_NONCOALSESCEDMASK = @as(c_int, 0x00000100);
pub const NX_ASCIISET = @as(c_int, 0);
pub const NX_SYMBOLSET = @as(c_int, 1);
pub const NX_DINGBATSSET = @as(c_int, 2);
pub const NX_TABLET_BUTTON_PENTIPMASK = @as(c_int, 0x0001);
pub const NX_TABLET_BUTTON_PENLOWERSIDEMASK = @as(c_int, 0x0002);
pub const NX_TABLET_BUTTON_PENUPPERSIDEMASK = @as(c_int, 0x0004);
pub const NX_TABLET_CAPABILITY_DEVICEIDMASK = @as(c_int, 0x0001);
pub const NX_TABLET_CAPABILITY_ABSXMASK = @as(c_int, 0x0002);
pub const NX_TABLET_CAPABILITY_ABSYMASK = @as(c_int, 0x0004);
pub const NX_TABLET_CAPABILITY_VENDOR1MASK = @as(c_int, 0x0008);
pub const NX_TABLET_CAPABILITY_VENDOR2MASK = @as(c_int, 0x0010);
pub const NX_TABLET_CAPABILITY_VENDOR3MASK = @as(c_int, 0x0020);
pub const NX_TABLET_CAPABILITY_BUTTONSMASK = @as(c_int, 0x0040);
pub const NX_TABLET_CAPABILITY_TILTXMASK = @as(c_int, 0x0080);
pub const NX_TABLET_CAPABILITY_TILTYMASK = @as(c_int, 0x0100);
pub const NX_TABLET_CAPABILITY_ABSZMASK = @as(c_int, 0x0200);
pub const NX_TABLET_CAPABILITY_PRESSUREMASK = @as(c_int, 0x0400);
pub const NX_TABLET_CAPABILITY_TANGENTIALPRESSUREMASK = @as(c_int, 0x0800);
pub const NX_TABLET_CAPABILITY_ORIENTINFOMASK = @as(c_int, 0x1000);
pub const NX_TABLET_CAPABILITY_ROTATIONMASK = @as(c_int, 0x2000);
pub const NX_TABLET_POINTER_UNKNOWN = @as(c_int, 0);
pub const NX_TABLET_POINTER_PEN = @as(c_int, 1);
pub const NX_TABLET_POINTER_CURSOR = @as(c_int, 2);
pub const NX_TABLET_POINTER_ERASER = @as(c_int, 3);
pub const kNXEventDataVersion = @as(c_int, 2);
pub const kNXEventVersion = @as(c_int, 2);
pub const NX_NOWINDOW = -@as(c_int, 1);
pub const NX_BYTYPE = @as(c_int, 0);
pub const NX_BROADCAST = @as(c_int, 1);
pub const NX_TOPWINDOW = @as(c_int, 2);
pub const NX_FIRSTWINDOW = @as(c_int, 3);
pub const NX_MOUSEWINDOW = @as(c_int, 4);
pub const NX_NEXTWINDOW = @as(c_int, 5);
pub const NX_LASTLEFT = @as(c_int, 6);
pub const NX_LASTRIGHT = @as(c_int, 7);
pub const NX_LASTKEY = @as(c_int, 8);
pub const NX_EXPLICIT = @as(c_int, 9);
pub const NX_TRANSMIT = @as(c_int, 10);
pub const NX_BYPSCONTEXT = @as(c_int, 11);
pub const NX_WAKEMASK = ((((((NX_KEYDOWNMASK | NX_FLAGSCHANGEDMASK) | NX_LMOUSEDOWNMASK) | NX_LMOUSEUPMASK) | NX_RMOUSEDOWNMASK) | NX_RMOUSEUPMASK) | NX_OMOUSEDOWNMASK) | NX_OMOUSEUPMASK;
pub const NX_UNDIMMASK = (((((((((NX_WAKEMASK | NX_KEYUPMASK) | NX_SCROLLWHEELMOVEDMASK) | NX_LMOUSEDRAGGEDMASK) | NX_RMOUSEDRAGGEDMASK) | NX_OMOUSEDRAGGEDMASK) | NX_MOUSEMOVEDMASK) | NX_MOUSEENTEREDMASK) | NX_MOUSEEXITEDMASK) | NX_TABLETPOINTERMASK) | NX_TABLETPROXIMITYMASK;
pub const NX_EVENT_EXTENSION_LOCATION_INVALID = @as(c_int, 0x1);
pub const NX_EVENT_EXTENSION_LOCATION_TYPE_FLOAT = @as(c_int, 0x2);
pub const NX_EVENT_EXTENSION_LOCATION_DEVICE_SCALED = @as(c_int, 0x4);
pub const NX_EVENT_EXTENSION_MOUSE_DELTA_TYPE_FLOAT = @as(c_int, 0x8);
pub const NX_EVENT_EXTENSION_AUDIT_TOKEN = @as(c_int, 0x10);
pub inline fn CGEventMaskBit(eventType: anytype) @TypeOf(@import("std").zig.c_translation.cast(CGEventMask, @as(c_int, 1)) << eventType) {
    _ = &eventType;
    return @import("std").zig.c_translation.cast(CGEventMask, @as(c_int, 1)) << eventType;
}
pub const kCGEventMaskForAllEvents = ~@import("std").zig.c_translation.cast(CGEventMask, @as(c_int, 0));
pub const kCGNotifyEventTapAdded = "com.apple.coregraphics.eventTapAdded";
pub const kCGNotifyEventTapRemoved = "com.apple.coregraphics.eventTapRemoved";
pub const kCGAnyInputEventType = @import("std").zig.c_translation.cast(CGEventType, ~@as(c_int, 0));
pub const CGEVENTSOURCE_H_ = "";
pub const CGPSCONVERTER_H_ = "";
pub const CGSESSION_H_ = "";
pub const kCGSessionUserIDKey = CFSTR("kCGSSessionUserIDKey");
pub const kCGSessionUserNameKey = CFSTR("kCGSSessionUserNameKey");
pub const kCGSessionConsoleSetKey = CFSTR("kCGSSessionConsoleSetKey");
pub const kCGSessionOnConsoleKey = CFSTR("kCGSSessionOnConsoleKey");
pub const kCGSessionLoginDoneKey = CFSTR("kCGSessionLoginDoneKey");
pub const kCGNotifyGUIConsoleSessionChanged = "com.apple.coregraphics.GUIConsoleSessionChanged";
pub const kCGNotifyGUISessionUserChanged = "com.apple.coregraphics.GUISessionUserChanged";
pub const CGDIRECTDISPLAYMETAL_H_ = "";
pub const __darwin_pthread_handler_rec = struct___darwin_pthread_handler_rec;
pub const _opaque_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const _opaque_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const _opaque_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const _opaque_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const _opaque_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const _opaque_pthread_once_t = struct__opaque_pthread_once_t;
pub const _opaque_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const _opaque_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const _opaque_pthread_t = struct__opaque_pthread_t;
pub const _OSUnalignedU16 = struct__OSUnalignedU16;
pub const _OSUnalignedU32 = struct__OSUnalignedU32;
pub const _OSUnalignedU64 = struct__OSUnalignedU64;
pub const TimeBaseRecord = struct_TimeBaseRecord;
pub const __CFString = struct___CFString;
pub const __CFNull = struct___CFNull;
pub const __CFAllocator = struct___CFAllocator;
pub const __IOSurface = struct___IOSurface;
pub const __CFDictionary = struct___CFDictionary;
pub const CGContext = struct_CGContext;
pub const CGColor = struct_CGColor;
pub const CGColorSpace = struct_CGColorSpace;
pub const CGDataProvider = struct_CGDataProvider;
pub const __CFData = struct___CFData;
pub const __CFError = struct___CFError;
pub const __CFArray = struct___CFArray;
pub const __CFCharacterSet = struct___CFCharacterSet;
pub const __CFNotificationCenter = struct___CFNotificationCenter;
pub const __CFLocale = struct___CFLocale;
pub const __CFURL = struct___CFURL;
pub const FSRef = struct_FSRef;
pub const ColorSyncProfile = struct_ColorSyncProfile;
pub const CGPattern = struct_CGPattern;
pub const CGFont = struct_CGFont;
pub const CGGradient = struct_CGGradient;
pub const CGImage = struct_CGImage;
pub const CGPath = struct_CGPath;
pub const CGPDFDocument = struct_CGPDFDocument;
pub const CGPDFPage = struct_CGPDFPage;
pub const CGPDFDictionary = struct_CGPDFDictionary;
pub const CGPDFArray = struct_CGPDFArray;
pub const CGPDFObject = struct_CGPDFObject;
pub const CGPDFStream = struct_CGPDFStream;
pub const CGPDFString = struct_CGPDFString;
pub const __CFDate = struct___CFDate;
pub const __CFTimeZone = struct___CFTimeZone;
pub const CGShading = struct_CGShading;
pub const CGFunction = struct_CGFunction;
pub const CGColorConversionInfo = struct_CGColorConversionInfo;
pub const lconv = struct_lconv;
pub const __float2 = struct___float2;
pub const __double2 = struct___double2;
pub const exception = struct_exception;
pub const __darwin_arm_exception_state = struct___darwin_arm_exception_state;
pub const __darwin_arm_exception_state64 = struct___darwin_arm_exception_state64;
pub const __darwin_arm_thread_state = struct___darwin_arm_thread_state;
pub const __darwin_arm_thread_state64 = struct___darwin_arm_thread_state64;
pub const __darwin_arm_vfp_state = struct___darwin_arm_vfp_state;
pub const __darwin_arm_neon_state64 = struct___darwin_arm_neon_state64;
pub const __darwin_arm_neon_state = struct___darwin_arm_neon_state;
pub const __arm_pagein_state = struct___arm_pagein_state;
pub const __arm_legacy_debug_state = struct___arm_legacy_debug_state;
pub const __darwin_arm_debug_state32 = struct___darwin_arm_debug_state32;
pub const __darwin_arm_debug_state64 = struct___darwin_arm_debug_state64;
pub const __darwin_arm_cpmu_state64 = struct___darwin_arm_cpmu_state64;
pub const __darwin_mcontext32 = struct___darwin_mcontext32;
pub const __darwin_mcontext64 = struct___darwin_mcontext64;
pub const __darwin_sigaltstack = struct___darwin_sigaltstack;
pub const __darwin_ucontext = struct___darwin_ucontext;
pub const sigval = union_sigval;
pub const sigevent = struct_sigevent;
pub const __siginfo = struct___siginfo;
pub const __sigaction_u = union___sigaction_u;
pub const __sigaction = struct___sigaction;
pub const sigstack = struct_sigstack;
pub const __sbuf = struct___sbuf;
pub const __sFILEX = struct___sFILEX;
pub const __sFILE = struct___sFILE;
pub const timeval = struct_timeval;
pub const rusage = struct_rusage;
pub const rusage_info_v0 = struct_rusage_info_v0;
pub const rusage_info_v1 = struct_rusage_info_v1;
pub const rusage_info_v2 = struct_rusage_info_v2;
pub const rusage_info_v3 = struct_rusage_info_v3;
pub const rusage_info_v4 = struct_rusage_info_v4;
pub const rusage_info_v5 = struct_rusage_info_v5;
pub const rusage_info_v6 = struct_rusage_info_v6;
pub const rlimit = struct_rlimit;
pub const proc_rlimit_control_wakeupmon = struct_proc_rlimit_control_wakeupmon;
pub const timespec = struct_timespec;
pub const tm = struct_tm;
pub const __CFBag = struct___CFBag;
pub const __CFBinaryHeap = struct___CFBinaryHeap;
pub const __CFBitVector = struct___CFBitVector;
pub const __CFByteOrder = enum___CFByteOrder;
pub const __CFCalendar = struct___CFCalendar;
pub const __CFDateFormatter = struct___CFDateFormatter;
pub const __CFBoolean = struct___CFBoolean;
pub const __CFNumber = struct___CFNumber;
pub const __CFNumberFormatter = struct___CFNumberFormatter;
pub const mach_port_status = struct_mach_port_status;
pub const mach_port_limits = struct_mach_port_limits;
pub const mach_port_info_ext = struct_mach_port_info_ext;
pub const mach_port_guard_info = struct_mach_port_guard_info;
pub const mach_port_qos = struct_mach_port_qos;
pub const mach_service_port_info = struct_mach_service_port_info;
pub const mach_port_options = struct_mach_port_options;
pub const mach_port_guard_exception_codes = enum_mach_port_guard_exception_codes;
pub const __CFRunLoop = struct___CFRunLoop;
pub const __CFRunLoopSource = struct___CFRunLoopSource;
pub const __CFRunLoopObserver = struct___CFRunLoopObserver;
pub const __CFRunLoopTimer = struct___CFRunLoopTimer;
pub const __CFSocket = struct___CFSocket;
pub const accessx_descriptor = struct_accessx_descriptor;
pub const fssearchblock = struct_fssearchblock;
pub const searchstate = struct_searchstate;
pub const flocktimeout = struct_flocktimeout;
pub const radvisory = struct_radvisory;
pub const fsignatures = struct_fsignatures;
pub const fsupplement = struct_fsupplement;
pub const fchecklv = struct_fchecklv;
pub const fgetsigsinfo = struct_fgetsigsinfo;
pub const fstore = struct_fstore;
pub const fpunchhole = struct_fpunchhole;
pub const ftrimactivefile = struct_ftrimactivefile;
pub const fspecread = struct_fspecread;
pub const log2phys = struct_log2phys;
pub const _filesec = struct__filesec;
pub const os_workgroup_attr_opaque_s = struct_os_workgroup_attr_opaque_s;
pub const os_workgroup_interval_data_opaque_s = struct_os_workgroup_interval_data_opaque_s;
pub const os_workgroup_join_token_opaque_s = struct_os_workgroup_join_token_opaque_s;
pub const os_workgroup_s = struct_os_workgroup_s;
pub const os_workgroup_max_parallel_threads_attr_s = struct_os_workgroup_max_parallel_threads_attr_s;
pub const time_value = struct_time_value;
pub const mach_timespec = struct_mach_timespec;
pub const dispatch_source_type_s = struct_dispatch_source_type_s;
pub const __CFReadStream = struct___CFReadStream;
pub const __CFWriteStream = struct___CFWriteStream;
pub const __CFSet = struct___CFSet;
pub const __CFTree = struct___CFTree;
pub const __CFUUID = struct___CFUUID;
pub const __CFBundle = struct___CFBundle;
pub const __CFMessagePort = struct___CFMessagePort;
pub const __CFPlugInInstance = struct___CFPlugInInstance;
pub const __CFMachPort = struct___CFMachPort;
pub const __CFAttributedString = struct___CFAttributedString;
pub const __CFURLEnumerator = struct___CFURLEnumerator;
pub const kauth_identity_extlookup = struct_kauth_identity_extlookup;
pub const kauth_cache_sizes = struct_kauth_cache_sizes;
pub const kauth_ace = struct_kauth_ace;
pub const kauth_acl = struct_kauth_acl;
pub const kauth_filesec = struct_kauth_filesec;
pub const _acl = struct__acl;
pub const _acl_entry = struct__acl_entry;
pub const _acl_permset = struct__acl_permset;
pub const _acl_flagset = struct__acl_flagset;
pub const __CFFileSecurity = struct___CFFileSecurity;
pub const __CFStringTokenizer = struct___CFStringTokenizer;
pub const __CFFileDescriptor = struct___CFFileDescriptor;
pub const __CFUserNotification = struct___CFUserNotification;
pub const __CFXMLNode = struct___CFXMLNode;
pub const __CFXMLParser = struct___CFXMLParser;
pub const CGDataConsumer = struct_CGDataConsumer;
pub const CGLayer = struct_CGLayer;
pub const CGPDFContentStream = struct_CGPDFContentStream;
pub const CGPDFOperatorTable = struct_CGPDFOperatorTable;
pub const CGPDFScanner = struct_CGPDFScanner;
pub const CGDisplayMode = struct_CGDisplayMode;
pub const vm_statistics = struct_vm_statistics;
pub const vm_statistics64 = struct_vm_statistics64;
pub const vm_extmod_statistics = struct_vm_extmod_statistics;
pub const vm_purgeable_stat = struct_vm_purgeable_stat;
pub const vm_purgeable_info = struct_vm_purgeable_info;
pub const virtual_memory_guard_exception_codes = enum_virtual_memory_guard_exception_codes;
pub const host_can_has_debugger_info = struct_host_can_has_debugger_info;
pub const host_basic_info = struct_host_basic_info;
pub const host_sched_info = struct_host_sched_info;
pub const kernel_resource_sizes = struct_kernel_resource_sizes;
pub const host_priority_info = struct_host_priority_info;
pub const host_load_info = struct_host_load_info;
pub const host_cpu_load_info = struct_host_cpu_load_info;
pub const host_preferred_user_arch = struct_host_preferred_user_arch;
pub const mach_vm_range = struct_mach_vm_range;
pub const memory_object_perf_info = struct_memory_object_perf_info;
pub const memory_object_attr_info = struct_memory_object_attr_info;
pub const memory_object_behave_info = struct_memory_object_behave_info;
pub const arm_state_hdr = struct_arm_state_hdr;
pub const arm_unified_thread_state = struct_arm_unified_thread_state;
pub const ipc_info_space = struct_ipc_info_space;
pub const ipc_info_space_basic = struct_ipc_info_space_basic;
pub const ipc_info_name = struct_ipc_info_name;
pub const ipc_info_tree_name = struct_ipc_info_tree_name;
pub const ipc_info_port = struct_ipc_info_port;
pub const mach_voucher_attr_recipe_data = struct_mach_voucher_attr_recipe_data;
pub const processor_cpu_stat = struct_processor_cpu_stat;
pub const processor_cpu_stat64 = struct_processor_cpu_stat64;
pub const processor_basic_info = struct_processor_basic_info;
pub const processor_cpu_load_info = struct_processor_cpu_load_info;
pub const processor_set_basic_info = struct_processor_set_basic_info;
pub const processor_set_load_info = struct_processor_set_load_info;
pub const policy_timeshare_base = struct_policy_timeshare_base;
pub const policy_timeshare_limit = struct_policy_timeshare_limit;
pub const policy_timeshare_info = struct_policy_timeshare_info;
pub const policy_rr_base = struct_policy_rr_base;
pub const policy_rr_limit = struct_policy_rr_limit;
pub const policy_rr_info = struct_policy_rr_info;
pub const policy_fifo_base = struct_policy_fifo_base;
pub const policy_fifo_limit = struct_policy_fifo_limit;
pub const policy_fifo_info = struct_policy_fifo_info;
pub const policy_bases = struct_policy_bases;
pub const policy_limits = struct_policy_limits;
pub const policy_infos = struct_policy_infos;
pub const task_basic_info_32 = struct_task_basic_info_32;
pub const task_basic_info_64 = struct_task_basic_info_64;
pub const task_basic_info = struct_task_basic_info;
pub const task_events_info = struct_task_events_info;
pub const task_thread_times_info = struct_task_thread_times_info;
pub const task_absolutetime_info = struct_task_absolutetime_info;
pub const task_kernelmemory_info = struct_task_kernelmemory_info;
pub const task_affinity_tag_info = struct_task_affinity_tag_info;
pub const task_dyld_info = struct_task_dyld_info;
pub const task_basic_info_64_2 = struct_task_basic_info_64_2;
pub const task_extmod_info = struct_task_extmod_info;
pub const mach_task_basic_info = struct_mach_task_basic_info;
pub const task_power_info = struct_task_power_info;
pub const task_vm_info = struct_task_vm_info;
pub const task_trace_memory_info = struct_task_trace_memory_info;
pub const task_wait_state_info = struct_task_wait_state_info;
pub const task_power_info_v2 = struct_task_power_info_v2;
pub const task_flags_info = struct_task_flags_info;
pub const task_inspect_flavor = enum_task_inspect_flavor;
pub const task_inspect_basic_counts = struct_task_inspect_basic_counts;
pub const task_role = enum_task_role;
pub const task_category_policy = struct_task_category_policy;
pub const task_latency_qos = enum_task_latency_qos;
pub const task_throughput_qos = enum_task_throughput_qos;
pub const task_qos_policy = struct_task_qos_policy;
pub const thread_basic_info = struct_thread_basic_info;
pub const thread_identifier_info = struct_thread_identifier_info;
pub const thread_extended_info = struct_thread_extended_info;
pub const io_stat_entry = struct_io_stat_entry;
pub const io_stat_info = struct_io_stat_info;
pub const thread_standard_policy = struct_thread_standard_policy;
pub const thread_extended_policy = struct_thread_extended_policy;
pub const thread_time_constraint_policy = struct_thread_time_constraint_policy;
pub const thread_precedence_policy = struct_thread_precedence_policy;
pub const thread_affinity_policy = struct_thread_affinity_policy;
pub const thread_background_policy = struct_thread_background_policy;
pub const thread_latency_qos_policy = struct_thread_latency_qos_policy;
pub const thread_throughput_qos_policy = struct_thread_throughput_qos_policy;
pub const vm_region_basic_info_64 = struct_vm_region_basic_info_64;
pub const vm_region_basic_info = struct_vm_region_basic_info;
pub const vm_region_extended_info = struct_vm_region_extended_info;
pub const vm_region_top_info = struct_vm_region_top_info;
pub const vm_region_submap_info = struct_vm_region_submap_info;
pub const vm_region_submap_info_64 = struct_vm_region_submap_info_64;
pub const vm_region_submap_short_info_64 = struct_vm_region_submap_short_info_64;
pub const mach_vm_read_entry = struct_mach_vm_read_entry;
pub const vm_read_entry = struct_vm_read_entry;
pub const vm_page_info_basic = struct_vm_page_info_basic;
pub const kmod_reference = struct_kmod_reference;
pub const kmod_info = struct_kmod_info;
pub const kmod_info_32_v1 = struct_kmod_info_32_v1;
pub const kmod_info_64_v1 = struct_kmod_info_64_v1;
pub const fsid = struct_fsid;
pub const fsobj_id = struct_fsobj_id;
pub const dyld_kernel_image_info = struct_dyld_kernel_image_info;
pub const dyld_kernel_process_info = struct_dyld_kernel_process_info;
pub const OSNotificationHeader64 = struct_OSNotificationHeader64;
pub const IOServiceInterestContent64 = struct_IOServiceInterestContent64;
pub const IONotificationPort = struct_IONotificationPort;
pub const _CGDisplayConfigRef = struct__CGDisplayConfigRef;
pub const CGDisplayStream = struct_CGDisplayStream;
pub const CGDisplayStreamUpdate = struct_CGDisplayStreamUpdate;
pub const evsioKeymapping = struct_evsioKeymapping;
pub const evsioMouseScaling = struct_evsioMouseScaling;
pub const __IOFixedPoint32 = struct___IOFixedPoint32;
pub const _NXPoint = struct__NXPoint;
pub const _NXSize = struct__NXSize;
pub const _NXTabletPointData = struct__NXTabletPointData;
pub const _NXTabletProximityData = struct__NXTabletProximityData;
pub const _NXEvent = struct__NXEvent;
pub const _NXEventExtension = struct__NXEventExtension;
pub const _NXEventExt = struct__NXEventExt;
pub const __CGEvent = struct___CGEvent;
pub const __CGEventTapProxy = struct___CGEventTapProxy;
pub const __CGEventTapInformation = struct___CGEventTapInformation;
pub const __CGEventSource = struct___CGEventSource;
pub const CGPSConverter = struct_CGPSConverter;
